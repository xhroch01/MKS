
cviceni5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ac4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  08003b84  08003b84  00013b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e10  08003e10  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003e10  08003e10  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e10  08003e10  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e10  08003e10  00013e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e14  08003e14  00013e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  20000068  08003e80  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08003e80  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000802f  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000178f  00000000  00000000  00028102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006f8  00000000  00000000  00029898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000551  00000000  00000000  00029f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001050b  00000000  00000000  0002a4e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009731  00000000  00000000  0003a9ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005e909  00000000  00000000  0004411d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000021d0  00000000  00000000  000a2a28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000a4bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003b6c 	.word	0x08003b6c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08003b6c 	.word	0x08003b6c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <uart_process_command>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void uart_process_command(char *cmd)
	{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b085      	sub	sp, #20
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	char *token;
	token = strtok(cmd, " ");
 800023c:	4a6e      	ldr	r2, [pc, #440]	; (80003f8 <uart_process_command+0x1c4>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	0011      	movs	r1, r2
 8000242:	0018      	movs	r0, r3
 8000244:	f002 fe0c 	bl	8002e60 <strtok>
 8000248:	0003      	movs	r3, r0
 800024a:	60fb      	str	r3, [r7, #12]

	if (strcasecmp(token, "HELLO") == 0)
 800024c:	4a6b      	ldr	r2, [pc, #428]	; (80003fc <uart_process_command+0x1c8>)
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	0011      	movs	r1, r2
 8000252:	0018      	movs	r0, r3
 8000254:	f002 fdea 	bl	8002e2c <strcasecmp>
 8000258:	1e03      	subs	r3, r0, #0
 800025a:	d104      	bne.n	8000266 <uart_process_command+0x32>
	{
		printf("Hello World!\n");
 800025c:	4b68      	ldr	r3, [pc, #416]	; (8000400 <uart_process_command+0x1cc>)
 800025e:	0018      	movs	r0, r3
 8000260:	f002 fce0 	bl	8002c24 <puts>
		{
		printf("LED1: %s - LED2: %s \n",
				HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin) ? "sviti" : "nesviti",
				HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin) ? "sviti" : "nesviti");
		}
}
 8000264:	e0c4      	b.n	80003f0 <uart_process_command+0x1bc>
	else if (strcasecmp(token, "LED1") == 0)
 8000266:	4a67      	ldr	r2, [pc, #412]	; (8000404 <uart_process_command+0x1d0>)
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	0011      	movs	r1, r2
 800026c:	0018      	movs	r0, r3
 800026e:	f002 fddd 	bl	8002e2c <strcasecmp>
 8000272:	1e03      	subs	r3, r0, #0
 8000274:	d12a      	bne.n	80002cc <uart_process_command+0x98>
		token = strtok(NULL, " ");
 8000276:	4b60      	ldr	r3, [pc, #384]	; (80003f8 <uart_process_command+0x1c4>)
 8000278:	0019      	movs	r1, r3
 800027a:	2000      	movs	r0, #0
 800027c:	f002 fdf0 	bl	8002e60 <strtok>
 8000280:	0003      	movs	r3, r0
 8000282:	60fb      	str	r3, [r7, #12]
		if (strcasecmp(token, "ON") == 0) HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 8000284:	4a60      	ldr	r2, [pc, #384]	; (8000408 <uart_process_command+0x1d4>)
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	0011      	movs	r1, r2
 800028a:	0018      	movs	r0, r3
 800028c:	f002 fdce 	bl	8002e2c <strcasecmp>
 8000290:	1e03      	subs	r3, r0, #0
 8000292:	d107      	bne.n	80002a4 <uart_process_command+0x70>
 8000294:	2390      	movs	r3, #144	; 0x90
 8000296:	05db      	lsls	r3, r3, #23
 8000298:	2201      	movs	r2, #1
 800029a:	2110      	movs	r1, #16
 800029c:	0018      	movs	r0, r3
 800029e:	f001 f884 	bl	80013aa <HAL_GPIO_WritePin>
 80002a2:	e00e      	b.n	80002c2 <uart_process_command+0x8e>
		else if (strcasecmp(token, "OFF") == 0)  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 80002a4:	4a59      	ldr	r2, [pc, #356]	; (800040c <uart_process_command+0x1d8>)
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	0011      	movs	r1, r2
 80002aa:	0018      	movs	r0, r3
 80002ac:	f002 fdbe 	bl	8002e2c <strcasecmp>
 80002b0:	1e03      	subs	r3, r0, #0
 80002b2:	d106      	bne.n	80002c2 <uart_process_command+0x8e>
 80002b4:	2390      	movs	r3, #144	; 0x90
 80002b6:	05db      	lsls	r3, r3, #23
 80002b8:	2200      	movs	r2, #0
 80002ba:	2110      	movs	r1, #16
 80002bc:	0018      	movs	r0, r3
 80002be:	f001 f874 	bl	80013aa <HAL_GPIO_WritePin>
		printf("OK\n");
 80002c2:	4b53      	ldr	r3, [pc, #332]	; (8000410 <uart_process_command+0x1dc>)
 80002c4:	0018      	movs	r0, r3
 80002c6:	f002 fcad 	bl	8002c24 <puts>
}
 80002ca:	e091      	b.n	80003f0 <uart_process_command+0x1bc>
	else if (strcasecmp(token, "LED2") == 0)
 80002cc:	4a51      	ldr	r2, [pc, #324]	; (8000414 <uart_process_command+0x1e0>)
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	0011      	movs	r1, r2
 80002d2:	0018      	movs	r0, r3
 80002d4:	f002 fdaa 	bl	8002e2c <strcasecmp>
 80002d8:	1e03      	subs	r3, r0, #0
 80002da:	d128      	bne.n	800032e <uart_process_command+0xfa>
		token = strtok(NULL, " ");
 80002dc:	4b46      	ldr	r3, [pc, #280]	; (80003f8 <uart_process_command+0x1c4>)
 80002de:	0019      	movs	r1, r3
 80002e0:	2000      	movs	r0, #0
 80002e2:	f002 fdbd 	bl	8002e60 <strtok>
 80002e6:	0003      	movs	r3, r0
 80002e8:	60fb      	str	r3, [r7, #12]
		if (strcasecmp(token, "ON") == 0) HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80002ea:	4a47      	ldr	r2, [pc, #284]	; (8000408 <uart_process_command+0x1d4>)
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	0011      	movs	r1, r2
 80002f0:	0018      	movs	r0, r3
 80002f2:	f002 fd9b 	bl	8002e2c <strcasecmp>
 80002f6:	1e03      	subs	r3, r0, #0
 80002f8:	d106      	bne.n	8000308 <uart_process_command+0xd4>
 80002fa:	4b47      	ldr	r3, [pc, #284]	; (8000418 <uart_process_command+0x1e4>)
 80002fc:	2201      	movs	r2, #1
 80002fe:	2101      	movs	r1, #1
 8000300:	0018      	movs	r0, r3
 8000302:	f001 f852 	bl	80013aa <HAL_GPIO_WritePin>
 8000306:	e00d      	b.n	8000324 <uart_process_command+0xf0>
		else if (strcasecmp(token, "OFF") == 0)  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8000308:	4a40      	ldr	r2, [pc, #256]	; (800040c <uart_process_command+0x1d8>)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	0011      	movs	r1, r2
 800030e:	0018      	movs	r0, r3
 8000310:	f002 fd8c 	bl	8002e2c <strcasecmp>
 8000314:	1e03      	subs	r3, r0, #0
 8000316:	d105      	bne.n	8000324 <uart_process_command+0xf0>
 8000318:	4b3f      	ldr	r3, [pc, #252]	; (8000418 <uart_process_command+0x1e4>)
 800031a:	2200      	movs	r2, #0
 800031c:	2101      	movs	r1, #1
 800031e:	0018      	movs	r0, r3
 8000320:	f001 f843 	bl	80013aa <HAL_GPIO_WritePin>
		printf("OK\n");
 8000324:	4b3a      	ldr	r3, [pc, #232]	; (8000410 <uart_process_command+0x1dc>)
 8000326:	0018      	movs	r0, r3
 8000328:	f002 fc7c 	bl	8002c24 <puts>
}
 800032c:	e060      	b.n	80003f0 <uart_process_command+0x1bc>
	else if (strcasecmp(token, "LEDS") == 0)
 800032e:	4a3b      	ldr	r2, [pc, #236]	; (800041c <uart_process_command+0x1e8>)
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	0011      	movs	r1, r2
 8000334:	0018      	movs	r0, r3
 8000336:	f002 fd79 	bl	8002e2c <strcasecmp>
 800033a:	1e03      	subs	r3, r0, #0
 800033c:	d136      	bne.n	80003ac <uart_process_command+0x178>
		token = strtok(NULL, " ");
 800033e:	4b2e      	ldr	r3, [pc, #184]	; (80003f8 <uart_process_command+0x1c4>)
 8000340:	0019      	movs	r1, r3
 8000342:	2000      	movs	r0, #0
 8000344:	f002 fd8c 	bl	8002e60 <strtok>
 8000348:	0003      	movs	r3, r0
 800034a:	60fb      	str	r3, [r7, #12]
		if (strcasecmp(token, "ON") == 0)
 800034c:	4a2e      	ldr	r2, [pc, #184]	; (8000408 <uart_process_command+0x1d4>)
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	0011      	movs	r1, r2
 8000352:	0018      	movs	r0, r3
 8000354:	f002 fd6a 	bl	8002e2c <strcasecmp>
 8000358:	1e03      	subs	r3, r0, #0
 800035a:	d10d      	bne.n	8000378 <uart_process_command+0x144>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1),
 800035c:	2390      	movs	r3, #144	; 0x90
 800035e:	05db      	lsls	r3, r3, #23
 8000360:	2201      	movs	r2, #1
 8000362:	2110      	movs	r1, #16
 8000364:	0018      	movs	r0, r3
 8000366:	f001 f820 	bl	80013aa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 800036a:	4b2b      	ldr	r3, [pc, #172]	; (8000418 <uart_process_command+0x1e4>)
 800036c:	2201      	movs	r2, #1
 800036e:	2101      	movs	r1, #1
 8000370:	0018      	movs	r0, r3
 8000372:	f001 f81a 	bl	80013aa <HAL_GPIO_WritePin>
 8000376:	e014      	b.n	80003a2 <uart_process_command+0x16e>
		else if (strcasecmp(token, "OFF") == 0)
 8000378:	4a24      	ldr	r2, [pc, #144]	; (800040c <uart_process_command+0x1d8>)
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	0011      	movs	r1, r2
 800037e:	0018      	movs	r0, r3
 8000380:	f002 fd54 	bl	8002e2c <strcasecmp>
 8000384:	1e03      	subs	r3, r0, #0
 8000386:	d10c      	bne.n	80003a2 <uart_process_command+0x16e>
			HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0),
 8000388:	2390      	movs	r3, #144	; 0x90
 800038a:	05db      	lsls	r3, r3, #23
 800038c:	2200      	movs	r2, #0
 800038e:	2110      	movs	r1, #16
 8000390:	0018      	movs	r0, r3
 8000392:	f001 f80a 	bl	80013aa <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8000396:	4b20      	ldr	r3, [pc, #128]	; (8000418 <uart_process_command+0x1e4>)
 8000398:	2200      	movs	r2, #0
 800039a:	2101      	movs	r1, #1
 800039c:	0018      	movs	r0, r3
 800039e:	f001 f804 	bl	80013aa <HAL_GPIO_WritePin>
			printf("OK\n");
 80003a2:	4b1b      	ldr	r3, [pc, #108]	; (8000410 <uart_process_command+0x1dc>)
 80003a4:	0018      	movs	r0, r3
 80003a6:	f002 fc3d 	bl	8002c24 <puts>
}
 80003aa:	e021      	b.n	80003f0 <uart_process_command+0x1bc>
	else if (strcasecmp(token, "stav") == 0)
 80003ac:	4a1c      	ldr	r2, [pc, #112]	; (8000420 <uart_process_command+0x1ec>)
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	0011      	movs	r1, r2
 80003b2:	0018      	movs	r0, r3
 80003b4:	f002 fd3a 	bl	8002e2c <strcasecmp>
 80003b8:	1e03      	subs	r3, r0, #0
 80003ba:	d119      	bne.n	80003f0 <uart_process_command+0x1bc>
				HAL_GPIO_ReadPin(LED1_GPIO_Port, LED1_Pin) ? "sviti" : "nesviti",
 80003bc:	2390      	movs	r3, #144	; 0x90
 80003be:	05db      	lsls	r3, r3, #23
 80003c0:	2110      	movs	r1, #16
 80003c2:	0018      	movs	r0, r3
 80003c4:	f000 ffd4 	bl	8001370 <HAL_GPIO_ReadPin>
 80003c8:	1e03      	subs	r3, r0, #0
		printf("LED1: %s - LED2: %s \n",
 80003ca:	d001      	beq.n	80003d0 <uart_process_command+0x19c>
 80003cc:	4c15      	ldr	r4, [pc, #84]	; (8000424 <uart_process_command+0x1f0>)
 80003ce:	e000      	b.n	80003d2 <uart_process_command+0x19e>
 80003d0:	4c15      	ldr	r4, [pc, #84]	; (8000428 <uart_process_command+0x1f4>)
				HAL_GPIO_ReadPin(LED2_GPIO_Port, LED2_Pin) ? "sviti" : "nesviti");
 80003d2:	4b11      	ldr	r3, [pc, #68]	; (8000418 <uart_process_command+0x1e4>)
 80003d4:	2101      	movs	r1, #1
 80003d6:	0018      	movs	r0, r3
 80003d8:	f000 ffca 	bl	8001370 <HAL_GPIO_ReadPin>
 80003dc:	1e03      	subs	r3, r0, #0
		printf("LED1: %s - LED2: %s \n",
 80003de:	d001      	beq.n	80003e4 <uart_process_command+0x1b0>
 80003e0:	4b10      	ldr	r3, [pc, #64]	; (8000424 <uart_process_command+0x1f0>)
 80003e2:	e000      	b.n	80003e6 <uart_process_command+0x1b2>
 80003e4:	4b10      	ldr	r3, [pc, #64]	; (8000428 <uart_process_command+0x1f4>)
 80003e6:	4811      	ldr	r0, [pc, #68]	; (800042c <uart_process_command+0x1f8>)
 80003e8:	001a      	movs	r2, r3
 80003ea:	0021      	movs	r1, r4
 80003ec:	f002 fbb4 	bl	8002b58 <iprintf>
}
 80003f0:	46c0      	nop			; (mov r8, r8)
 80003f2:	46bd      	mov	sp, r7
 80003f4:	b005      	add	sp, #20
 80003f6:	bd90      	pop	{r4, r7, pc}
 80003f8:	08003b84 	.word	0x08003b84
 80003fc:	08003b88 	.word	0x08003b88
 8000400:	08003b90 	.word	0x08003b90
 8000404:	08003ba0 	.word	0x08003ba0
 8000408:	08003ba8 	.word	0x08003ba8
 800040c:	08003bac 	.word	0x08003bac
 8000410:	08003bb0 	.word	0x08003bb0
 8000414:	08003bb4 	.word	0x08003bb4
 8000418:	48000400 	.word	0x48000400
 800041c:	08003bbc 	.word	0x08003bbc
 8000420:	08003bc4 	.word	0x08003bc4
 8000424:	08003bcc 	.word	0x08003bcc
 8000428:	08003bd4 	.word	0x08003bd4
 800042c:	08003bdc 	.word	0x08003bdc

08000430 <_write>:

int _write(int file, char const *buf, int n)
	{
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	60b9      	str	r1, [r7, #8]
 800043a:	607a      	str	r2, [r7, #4]
	/* stdout redirection to UART2 */
	HAL_UART_Transmit(&huart2, (uint8_t*) (buf), n, HAL_MAX_DELAY);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	b29a      	uxth	r2, r3
 8000440:	2301      	movs	r3, #1
 8000442:	425b      	negs	r3, r3
 8000444:	68b9      	ldr	r1, [r7, #8]
 8000446:	4804      	ldr	r0, [pc, #16]	; (8000458 <_write+0x28>)
 8000448:	f001 fc8c 	bl	8001d64 <HAL_UART_Transmit>
	return n;
 800044c:	687b      	ldr	r3, [r7, #4]
	}
 800044e:	0018      	movs	r0, r3
 8000450:	46bd      	mov	sp, r7
 8000452:	b004      	add	sp, #16
 8000454:	bd80      	pop	{r7, pc}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	20000084 	.word	0x20000084

0800045c <uart_byte_available>:

static void uart_byte_available(uint8_t c)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	0002      	movs	r2, r0
 8000464:	1dfb      	adds	r3, r7, #7
 8000466:	701a      	strb	r2, [r3, #0]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];
	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 126) data[cnt++] = c;
 8000468:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <uart_byte_available+0x74>)
 800046a:	881b      	ldrh	r3, [r3, #0]
 800046c:	2bff      	cmp	r3, #255	; 0xff
 800046e:	d812      	bhi.n	8000496 <uart_byte_available+0x3a>
 8000470:	1dfb      	adds	r3, r7, #7
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	2b1f      	cmp	r3, #31
 8000476:	d90e      	bls.n	8000496 <uart_byte_available+0x3a>
 8000478:	1dfb      	adds	r3, r7, #7
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2b7e      	cmp	r3, #126	; 0x7e
 800047e:	d80a      	bhi.n	8000496 <uart_byte_available+0x3a>
 8000480:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <uart_byte_available+0x74>)
 8000482:	881b      	ldrh	r3, [r3, #0]
 8000484:	1c5a      	adds	r2, r3, #1
 8000486:	b291      	uxth	r1, r2
 8000488:	4a11      	ldr	r2, [pc, #68]	; (80004d0 <uart_byte_available+0x74>)
 800048a:	8011      	strh	r1, [r2, #0]
 800048c:	0019      	movs	r1, r3
 800048e:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <uart_byte_available+0x78>)
 8000490:	1dfa      	adds	r2, r7, #7
 8000492:	7812      	ldrb	r2, [r2, #0]
 8000494:	545a      	strb	r2, [r3, r1]
	if ((c == '\n' || c == '\r') && cnt > 0) {
 8000496:	1dfb      	adds	r3, r7, #7
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b0a      	cmp	r3, #10
 800049c:	d003      	beq.n	80004a6 <uart_byte_available+0x4a>
 800049e:	1dfb      	adds	r3, r7, #7
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	2b0d      	cmp	r3, #13
 80004a4:	d110      	bne.n	80004c8 <uart_byte_available+0x6c>
 80004a6:	4b0a      	ldr	r3, [pc, #40]	; (80004d0 <uart_byte_available+0x74>)
 80004a8:	881b      	ldrh	r3, [r3, #0]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d00c      	beq.n	80004c8 <uart_byte_available+0x6c>
		data[cnt] = '\0';
 80004ae:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <uart_byte_available+0x74>)
 80004b0:	881b      	ldrh	r3, [r3, #0]
 80004b2:	001a      	movs	r2, r3
 80004b4:	4b07      	ldr	r3, [pc, #28]	; (80004d4 <uart_byte_available+0x78>)
 80004b6:	2100      	movs	r1, #0
 80004b8:	5499      	strb	r1, [r3, r2]
		uart_process_command(data);
 80004ba:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <uart_byte_available+0x78>)
 80004bc:	0018      	movs	r0, r3
 80004be:	f7ff feb9 	bl	8000234 <uart_process_command>
		cnt = 0;
 80004c2:	4b03      	ldr	r3, [pc, #12]	; (80004d0 <uart_byte_available+0x74>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	801a      	strh	r2, [r3, #0]
 }
}
 80004c8:	46c0      	nop			; (mov r8, r8)
 80004ca:	46bd      	mov	sp, r7
 80004cc:	b002      	add	sp, #8
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	2000018e 	.word	0x2000018e
 80004d4:	20000190 	.word	0x20000190

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fafd 	bl	8000adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f83b 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 f8d1 	bl	800068c <MX_GPIO_Init>
  MX_DMA_Init();
 80004ea:	f000 f8b1 	bl	8000650 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004ee:	f000 f87f 	bl	80005f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart2, uart_rx_buf, RX_BUFFER_LEN);
 80004f2:	4916      	ldr	r1, [pc, #88]	; (800054c <main+0x74>)
 80004f4:	4b16      	ldr	r3, [pc, #88]	; (8000550 <main+0x78>)
 80004f6:	2240      	movs	r2, #64	; 0x40
 80004f8:	0018      	movs	r0, r3
 80004fa:	f001 fcdc 	bl	8001eb6 <HAL_UART_Receive_DMA>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		while (uart_rx_read_ptr != uart_rx_write_ptr) {
 80004fe:	e019      	b.n	8000534 <main+0x5c>
			uint8_t b = uart_rx_buf[uart_rx_read_ptr];
 8000500:	4b14      	ldr	r3, [pc, #80]	; (8000554 <main+0x7c>)
 8000502:	881b      	ldrh	r3, [r3, #0]
 8000504:	b29b      	uxth	r3, r3
 8000506:	0019      	movs	r1, r3
 8000508:	1dfb      	adds	r3, r7, #7
 800050a:	4a10      	ldr	r2, [pc, #64]	; (800054c <main+0x74>)
 800050c:	5c52      	ldrb	r2, [r2, r1]
 800050e:	701a      	strb	r2, [r3, #0]
			if (++uart_rx_read_ptr >= RX_BUFFER_LEN) uart_rx_read_ptr = 0; // increase read pointer
 8000510:	4b10      	ldr	r3, [pc, #64]	; (8000554 <main+0x7c>)
 8000512:	881b      	ldrh	r3, [r3, #0]
 8000514:	b29b      	uxth	r3, r3
 8000516:	3301      	adds	r3, #1
 8000518:	b29b      	uxth	r3, r3
 800051a:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <main+0x7c>)
 800051c:	1c19      	adds	r1, r3, #0
 800051e:	8011      	strh	r1, [r2, #0]
 8000520:	2b3f      	cmp	r3, #63	; 0x3f
 8000522:	d902      	bls.n	800052a <main+0x52>
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <main+0x7c>)
 8000526:	2200      	movs	r2, #0
 8000528:	801a      	strh	r2, [r3, #0]
			uart_byte_available(b); // process every received byte with the RX state machine
 800052a:	1dfb      	adds	r3, r7, #7
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	0018      	movs	r0, r3
 8000530:	f7ff ff94 	bl	800045c <uart_byte_available>
		while (uart_rx_read_ptr != uart_rx_write_ptr) {
 8000534:	4b07      	ldr	r3, [pc, #28]	; (8000554 <main+0x7c>)
 8000536:	881b      	ldrh	r3, [r3, #0]
 8000538:	b29b      	uxth	r3, r3
 800053a:	0019      	movs	r1, r3
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <main+0x80>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	2240      	movs	r2, #64	; 0x40
 8000544:	1ad3      	subs	r3, r2, r3
 8000546:	4299      	cmp	r1, r3
 8000548:	d1da      	bne.n	8000500 <main+0x28>
 800054a:	e7f3      	b.n	8000534 <main+0x5c>
 800054c:	2000014c 	.word	0x2000014c
 8000550:	20000084 	.word	0x20000084
 8000554:	2000018c 	.word	0x2000018c
 8000558:	20000108 	.word	0x20000108

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b590      	push	{r4, r7, lr}
 800055e:	b091      	sub	sp, #68	; 0x44
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	2410      	movs	r4, #16
 8000564:	193b      	adds	r3, r7, r4
 8000566:	0018      	movs	r0, r3
 8000568:	2330      	movs	r3, #48	; 0x30
 800056a:	001a      	movs	r2, r3
 800056c:	2100      	movs	r1, #0
 800056e:	f002 fc55 	bl	8002e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000572:	003b      	movs	r3, r7
 8000574:	0018      	movs	r0, r3
 8000576:	2310      	movs	r3, #16
 8000578:	001a      	movs	r2, r3
 800057a:	2100      	movs	r1, #0
 800057c:	f002 fc4e 	bl	8002e1c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000580:	0021      	movs	r1, r4
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2202      	movs	r2, #2
 8000586:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2201      	movs	r2, #1
 800058c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2210      	movs	r2, #16
 8000592:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2202      	movs	r2, #2
 8000598:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2200      	movs	r2, #0
 800059e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	22a0      	movs	r2, #160	; 0xa0
 80005a4:	0392      	lsls	r2, r2, #14
 80005a6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2200      	movs	r2, #0
 80005ac:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	0018      	movs	r0, r3
 80005b2:	f000 ff17 	bl	80013e4 <HAL_RCC_OscConfig>
 80005b6:	1e03      	subs	r3, r0, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x62>
  {
    Error_Handler();
 80005ba:	f000 f8f9 	bl	80007b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005be:	003b      	movs	r3, r7
 80005c0:	2207      	movs	r2, #7
 80005c2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c4:	003b      	movs	r3, r7
 80005c6:	2202      	movs	r2, #2
 80005c8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	003b      	movs	r3, r7
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d0:	003b      	movs	r3, r7
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005d6:	003b      	movs	r3, r7
 80005d8:	2101      	movs	r1, #1
 80005da:	0018      	movs	r0, r3
 80005dc:	f001 fa1c 	bl	8001a18 <HAL_RCC_ClockConfig>
 80005e0:	1e03      	subs	r3, r0, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005e4:	f000 f8e4 	bl	80007b0 <Error_Handler>
  }
}
 80005e8:	46c0      	nop			; (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b011      	add	sp, #68	; 0x44
 80005ee:	bd90      	pop	{r4, r7, pc}

080005f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005f4:	4b14      	ldr	r3, [pc, #80]	; (8000648 <MX_USART2_UART_Init+0x58>)
 80005f6:	4a15      	ldr	r2, [pc, #84]	; (800064c <MX_USART2_UART_Init+0x5c>)
 80005f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80005fa:	4b13      	ldr	r3, [pc, #76]	; (8000648 <MX_USART2_UART_Init+0x58>)
 80005fc:	2296      	movs	r2, #150	; 0x96
 80005fe:	0212      	lsls	r2, r2, #8
 8000600:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000602:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_USART2_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <MX_USART2_UART_Init+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_USART2_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_USART2_UART_Init+0x58>)
 8000616:	220c      	movs	r2, #12
 8000618:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_USART2_UART_Init+0x58>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_USART2_UART_Init+0x58>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_USART2_UART_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_USART2_UART_Init+0x58>)
 800062e:	2200      	movs	r2, #0
 8000630:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000632:	4b05      	ldr	r3, [pc, #20]	; (8000648 <MX_USART2_UART_Init+0x58>)
 8000634:	0018      	movs	r0, r3
 8000636:	f001 fb41 	bl	8001cbc <HAL_UART_Init>
 800063a:	1e03      	subs	r3, r0, #0
 800063c:	d001      	beq.n	8000642 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800063e:	f000 f8b7 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000084 	.word	0x20000084
 800064c:	40004400 	.word	0x40004400

08000650 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_DMA_Init+0x38>)
 8000658:	695a      	ldr	r2, [r3, #20]
 800065a:	4b0b      	ldr	r3, [pc, #44]	; (8000688 <MX_DMA_Init+0x38>)
 800065c:	2101      	movs	r1, #1
 800065e:	430a      	orrs	r2, r1
 8000660:	615a      	str	r2, [r3, #20]
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_DMA_Init+0x38>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	2201      	movs	r2, #1
 8000668:	4013      	ands	r3, r2
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	2100      	movs	r1, #0
 8000672:	200b      	movs	r0, #11
 8000674:	f000 fb42 	bl	8000cfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000678:	200b      	movs	r0, #11
 800067a:	f000 fb54 	bl	8000d26 <HAL_NVIC_EnableIRQ>

}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	b002      	add	sp, #8
 8000684:	bd80      	pop	{r7, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	40021000 	.word	0x40021000

0800068c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800068c:	b590      	push	{r4, r7, lr}
 800068e:	b08b      	sub	sp, #44	; 0x2c
 8000690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	2414      	movs	r4, #20
 8000694:	193b      	adds	r3, r7, r4
 8000696:	0018      	movs	r0, r3
 8000698:	2314      	movs	r3, #20
 800069a:	001a      	movs	r2, r3
 800069c:	2100      	movs	r1, #0
 800069e:	f002 fbbd 	bl	8002e1c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a2:	4b40      	ldr	r3, [pc, #256]	; (80007a4 <MX_GPIO_Init+0x118>)
 80006a4:	695a      	ldr	r2, [r3, #20]
 80006a6:	4b3f      	ldr	r3, [pc, #252]	; (80007a4 <MX_GPIO_Init+0x118>)
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	0309      	lsls	r1, r1, #12
 80006ac:	430a      	orrs	r2, r1
 80006ae:	615a      	str	r2, [r3, #20]
 80006b0:	4b3c      	ldr	r3, [pc, #240]	; (80007a4 <MX_GPIO_Init+0x118>)
 80006b2:	695a      	ldr	r2, [r3, #20]
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	031b      	lsls	r3, r3, #12
 80006b8:	4013      	ands	r3, r2
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006be:	4b39      	ldr	r3, [pc, #228]	; (80007a4 <MX_GPIO_Init+0x118>)
 80006c0:	695a      	ldr	r2, [r3, #20]
 80006c2:	4b38      	ldr	r3, [pc, #224]	; (80007a4 <MX_GPIO_Init+0x118>)
 80006c4:	2180      	movs	r1, #128	; 0x80
 80006c6:	03c9      	lsls	r1, r1, #15
 80006c8:	430a      	orrs	r2, r1
 80006ca:	615a      	str	r2, [r3, #20]
 80006cc:	4b35      	ldr	r3, [pc, #212]	; (80007a4 <MX_GPIO_Init+0x118>)
 80006ce:	695a      	ldr	r2, [r3, #20]
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	03db      	lsls	r3, r3, #15
 80006d4:	4013      	ands	r3, r2
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	4b32      	ldr	r3, [pc, #200]	; (80007a4 <MX_GPIO_Init+0x118>)
 80006dc:	695a      	ldr	r2, [r3, #20]
 80006de:	4b31      	ldr	r3, [pc, #196]	; (80007a4 <MX_GPIO_Init+0x118>)
 80006e0:	2180      	movs	r1, #128	; 0x80
 80006e2:	0289      	lsls	r1, r1, #10
 80006e4:	430a      	orrs	r2, r1
 80006e6:	615a      	str	r2, [r3, #20]
 80006e8:	4b2e      	ldr	r3, [pc, #184]	; (80007a4 <MX_GPIO_Init+0x118>)
 80006ea:	695a      	ldr	r2, [r3, #20]
 80006ec:	2380      	movs	r3, #128	; 0x80
 80006ee:	029b      	lsls	r3, r3, #10
 80006f0:	4013      	ands	r3, r2
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f6:	4b2b      	ldr	r3, [pc, #172]	; (80007a4 <MX_GPIO_Init+0x118>)
 80006f8:	695a      	ldr	r2, [r3, #20]
 80006fa:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <MX_GPIO_Init+0x118>)
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	02c9      	lsls	r1, r1, #11
 8000700:	430a      	orrs	r2, r1
 8000702:	615a      	str	r2, [r3, #20]
 8000704:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <MX_GPIO_Init+0x118>)
 8000706:	695a      	ldr	r2, [r3, #20]
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	02db      	lsls	r3, r3, #11
 800070c:	4013      	ands	r3, r2
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000712:	2390      	movs	r3, #144	; 0x90
 8000714:	05db      	lsls	r3, r3, #23
 8000716:	2200      	movs	r2, #0
 8000718:	2130      	movs	r1, #48	; 0x30
 800071a:	0018      	movs	r0, r3
 800071c:	f000 fe45 	bl	80013aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000720:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <MX_GPIO_Init+0x11c>)
 8000722:	2200      	movs	r2, #0
 8000724:	2101      	movs	r1, #1
 8000726:	0018      	movs	r0, r3
 8000728:	f000 fe3f 	bl	80013aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800072c:	193b      	adds	r3, r7, r4
 800072e:	2280      	movs	r2, #128	; 0x80
 8000730:	0192      	lsls	r2, r2, #6
 8000732:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000734:	193b      	adds	r3, r7, r4
 8000736:	2284      	movs	r2, #132	; 0x84
 8000738:	0392      	lsls	r2, r2, #14
 800073a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	193b      	adds	r3, r7, r4
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000742:	193b      	adds	r3, r7, r4
 8000744:	4a19      	ldr	r2, [pc, #100]	; (80007ac <MX_GPIO_Init+0x120>)
 8000746:	0019      	movs	r1, r3
 8000748:	0010      	movs	r0, r2
 800074a:	f000 fca1 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LD2_Pin;
 800074e:	193b      	adds	r3, r7, r4
 8000750:	2230      	movs	r2, #48	; 0x30
 8000752:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	193b      	adds	r3, r7, r4
 8000756:	2201      	movs	r2, #1
 8000758:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	193b      	adds	r3, r7, r4
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	193b      	adds	r3, r7, r4
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000766:	193a      	adds	r2, r7, r4
 8000768:	2390      	movs	r3, #144	; 0x90
 800076a:	05db      	lsls	r3, r3, #23
 800076c:	0011      	movs	r1, r2
 800076e:	0018      	movs	r0, r3
 8000770:	f000 fc8e 	bl	8001090 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000774:	0021      	movs	r1, r4
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2201      	movs	r2, #1
 800077a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2201      	movs	r2, #1
 8000780:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800078e:	187b      	adds	r3, r7, r1
 8000790:	4a05      	ldr	r2, [pc, #20]	; (80007a8 <MX_GPIO_Init+0x11c>)
 8000792:	0019      	movs	r1, r3
 8000794:	0010      	movs	r0, r2
 8000796:	f000 fc7b 	bl	8001090 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	b00b      	add	sp, #44	; 0x2c
 80007a0:	bd90      	pop	{r4, r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	40021000 	.word	0x40021000
 80007a8:	48000400 	.word	0x48000400
 80007ac:	48000800 	.word	0x48000800

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <Error_Handler+0x8>
	...

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <HAL_MspInit+0x44>)
 80007c4:	699a      	ldr	r2, [r3, #24]
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <HAL_MspInit+0x44>)
 80007c8:	2101      	movs	r1, #1
 80007ca:	430a      	orrs	r2, r1
 80007cc:	619a      	str	r2, [r3, #24]
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <HAL_MspInit+0x44>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	2201      	movs	r2, #1
 80007d4:	4013      	ands	r3, r2
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_MspInit+0x44>)
 80007dc:	69da      	ldr	r2, [r3, #28]
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <HAL_MspInit+0x44>)
 80007e0:	2180      	movs	r1, #128	; 0x80
 80007e2:	0549      	lsls	r1, r1, #21
 80007e4:	430a      	orrs	r2, r1
 80007e6:	61da      	str	r2, [r3, #28]
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <HAL_MspInit+0x44>)
 80007ea:	69da      	ldr	r2, [r3, #28]
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	055b      	lsls	r3, r3, #21
 80007f0:	4013      	ands	r3, r2
 80007f2:	603b      	str	r3, [r7, #0]
 80007f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	b002      	add	sp, #8
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	40021000 	.word	0x40021000

08000804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b08b      	sub	sp, #44	; 0x2c
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	2414      	movs	r4, #20
 800080e:	193b      	adds	r3, r7, r4
 8000810:	0018      	movs	r0, r3
 8000812:	2314      	movs	r3, #20
 8000814:	001a      	movs	r2, r3
 8000816:	2100      	movs	r1, #0
 8000818:	f002 fb00 	bl	8002e1c <memset>
  if(huart->Instance==USART2)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a2f      	ldr	r2, [pc, #188]	; (80008e0 <HAL_UART_MspInit+0xdc>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d158      	bne.n	80008d8 <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000826:	4b2f      	ldr	r3, [pc, #188]	; (80008e4 <HAL_UART_MspInit+0xe0>)
 8000828:	69da      	ldr	r2, [r3, #28]
 800082a:	4b2e      	ldr	r3, [pc, #184]	; (80008e4 <HAL_UART_MspInit+0xe0>)
 800082c:	2180      	movs	r1, #128	; 0x80
 800082e:	0289      	lsls	r1, r1, #10
 8000830:	430a      	orrs	r2, r1
 8000832:	61da      	str	r2, [r3, #28]
 8000834:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <HAL_UART_MspInit+0xe0>)
 8000836:	69da      	ldr	r2, [r3, #28]
 8000838:	2380      	movs	r3, #128	; 0x80
 800083a:	029b      	lsls	r3, r3, #10
 800083c:	4013      	ands	r3, r2
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <HAL_UART_MspInit+0xe0>)
 8000844:	695a      	ldr	r2, [r3, #20]
 8000846:	4b27      	ldr	r3, [pc, #156]	; (80008e4 <HAL_UART_MspInit+0xe0>)
 8000848:	2180      	movs	r1, #128	; 0x80
 800084a:	0289      	lsls	r1, r1, #10
 800084c:	430a      	orrs	r2, r1
 800084e:	615a      	str	r2, [r3, #20]
 8000850:	4b24      	ldr	r3, [pc, #144]	; (80008e4 <HAL_UART_MspInit+0xe0>)
 8000852:	695a      	ldr	r2, [r3, #20]
 8000854:	2380      	movs	r3, #128	; 0x80
 8000856:	029b      	lsls	r3, r3, #10
 8000858:	4013      	ands	r3, r2
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800085e:	0021      	movs	r1, r4
 8000860:	187b      	adds	r3, r7, r1
 8000862:	220c      	movs	r2, #12
 8000864:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	187b      	adds	r3, r7, r1
 8000868:	2202      	movs	r2, #2
 800086a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	187b      	adds	r3, r7, r1
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	187b      	adds	r3, r7, r1
 8000874:	2200      	movs	r2, #0
 8000876:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000878:	187b      	adds	r3, r7, r1
 800087a:	2201      	movs	r2, #1
 800087c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	187a      	adds	r2, r7, r1
 8000880:	2390      	movs	r3, #144	; 0x90
 8000882:	05db      	lsls	r3, r3, #23
 8000884:	0011      	movs	r1, r2
 8000886:	0018      	movs	r0, r3
 8000888:	f000 fc02 	bl	8001090 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 800088c:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <HAL_UART_MspInit+0xe4>)
 800088e:	4a17      	ldr	r2, [pc, #92]	; (80008ec <HAL_UART_MspInit+0xe8>)
 8000890:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <HAL_UART_MspInit+0xe4>)
 8000894:	2200      	movs	r2, #0
 8000896:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <HAL_UART_MspInit+0xe4>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800089e:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_UART_MspInit+0xe4>)
 80008a0:	2280      	movs	r2, #128	; 0x80
 80008a2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008a4:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <HAL_UART_MspInit+0xe4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <HAL_UART_MspInit+0xe4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80008b0:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <HAL_UART_MspInit+0xe4>)
 80008b2:	2220      	movs	r2, #32
 80008b4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <HAL_UART_MspInit+0xe4>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <HAL_UART_MspInit+0xe4>)
 80008be:	0018      	movs	r0, r3
 80008c0:	f000 fa4e 	bl	8000d60 <HAL_DMA_Init>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d001      	beq.n	80008cc <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 80008c8:	f7ff ff72 	bl	80007b0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <HAL_UART_MspInit+0xe4>)
 80008d0:	671a      	str	r2, [r3, #112]	; 0x70
 80008d2:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <HAL_UART_MspInit+0xe4>)
 80008d4:	687a      	ldr	r2, [r7, #4]
 80008d6:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008d8:	46c0      	nop			; (mov r8, r8)
 80008da:	46bd      	mov	sp, r7
 80008dc:	b00b      	add	sp, #44	; 0x2c
 80008de:	bd90      	pop	{r4, r7, pc}
 80008e0:	40004400 	.word	0x40004400
 80008e4:	40021000 	.word	0x40021000
 80008e8:	20000108 	.word	0x20000108
 80008ec:	40020058 	.word	0x40020058

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <NMI_Handler+0x4>

080008f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <HardFault_Handler+0x4>

080008fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000914:	f000 f92a 	bl	8000b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000918:	46c0      	nop			; (mov r8, r8)
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000924:	4b03      	ldr	r3, [pc, #12]	; (8000934 <DMA1_Channel4_5_IRQHandler+0x14>)
 8000926:	0018      	movs	r0, r3
 8000928:	f000 fac8 	bl	8000ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	20000108 	.word	0x20000108

08000938 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  return 1;
 800093c:	2301      	movs	r3, #1
}
 800093e:	0018      	movs	r0, r3
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <_kill>:

int _kill(int pid, int sig)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800094e:	f002 fb39 	bl	8002fc4 <__errno>
 8000952:	0003      	movs	r3, r0
 8000954:	2216      	movs	r2, #22
 8000956:	601a      	str	r2, [r3, #0]
  return -1;
 8000958:	2301      	movs	r3, #1
 800095a:	425b      	negs	r3, r3
}
 800095c:	0018      	movs	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	b002      	add	sp, #8
 8000962:	bd80      	pop	{r7, pc}

08000964 <_exit>:

void _exit (int status)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800096c:	2301      	movs	r3, #1
 800096e:	425a      	negs	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	0011      	movs	r1, r2
 8000974:	0018      	movs	r0, r3
 8000976:	f7ff ffe5 	bl	8000944 <_kill>
  while (1) {}    /* Make sure we hang here */
 800097a:	e7fe      	b.n	800097a <_exit+0x16>

0800097c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	e00a      	b.n	80009a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800098e:	e000      	b.n	8000992 <_read+0x16>
 8000990:	bf00      	nop
 8000992:	0001      	movs	r1, r0
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	1c5a      	adds	r2, r3, #1
 8000998:	60ba      	str	r2, [r7, #8]
 800099a:	b2ca      	uxtb	r2, r1
 800099c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	3301      	adds	r3, #1
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	697a      	ldr	r2, [r7, #20]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	dbf0      	blt.n	800098e <_read+0x12>
  }

  return len;
 80009ac:	687b      	ldr	r3, [r7, #4]
}
 80009ae:	0018      	movs	r0, r3
 80009b0:	46bd      	mov	sp, r7
 80009b2:	b006      	add	sp, #24
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009be:	2301      	movs	r3, #1
 80009c0:	425b      	negs	r3, r3
}
 80009c2:	0018      	movs	r0, r3
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b002      	add	sp, #8
 80009c8:	bd80      	pop	{r7, pc}

080009ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
 80009d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	0192      	lsls	r2, r2, #6
 80009da:	605a      	str	r2, [r3, #4]
  return 0;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	0018      	movs	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b002      	add	sp, #8
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <_isatty>:

int _isatty(int file)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	0018      	movs	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	b002      	add	sp, #8
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	0018      	movs	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b004      	add	sp, #16
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a18:	4a14      	ldr	r2, [pc, #80]	; (8000a6c <_sbrk+0x5c>)
 8000a1a:	4b15      	ldr	r3, [pc, #84]	; (8000a70 <_sbrk+0x60>)
 8000a1c:	1ad3      	subs	r3, r2, r3
 8000a1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a24:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <_sbrk+0x64>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d102      	bne.n	8000a32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <_sbrk+0x64>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <_sbrk+0x68>)
 8000a30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <_sbrk+0x64>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	18d3      	adds	r3, r2, r3
 8000a3a:	693a      	ldr	r2, [r7, #16]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	d207      	bcs.n	8000a50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a40:	f002 fac0 	bl	8002fc4 <__errno>
 8000a44:	0003      	movs	r3, r0
 8000a46:	220c      	movs	r2, #12
 8000a48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	425b      	negs	r3, r3
 8000a4e:	e009      	b.n	8000a64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <_sbrk+0x64>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a56:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <_sbrk+0x64>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	18d2      	adds	r2, r2, r3
 8000a5e:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <_sbrk+0x64>)
 8000a60:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000a62:	68fb      	ldr	r3, [r7, #12]
}
 8000a64:	0018      	movs	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b006      	add	sp, #24
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20002000 	.word	0x20002000
 8000a70:	00000400 	.word	0x00000400
 8000a74:	20000290 	.word	0x20000290
 8000a78:	200003e8 	.word	0x200003e8

08000a7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a88:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a8a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a8c:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a8e:	490e      	ldr	r1, [pc, #56]	; (8000ac8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a90:	4a0e      	ldr	r2, [pc, #56]	; (8000acc <LoopForever+0xe>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a94:	e002      	b.n	8000a9c <LoopCopyDataInit>

08000a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a9a:	3304      	adds	r3, #4

08000a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa0:	d3f9      	bcc.n	8000a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aa2:	4a0b      	ldr	r2, [pc, #44]	; (8000ad0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000aa4:	4c0b      	ldr	r4, [pc, #44]	; (8000ad4 <LoopForever+0x16>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aa8:	e001      	b.n	8000aae <LoopFillZerobss>

08000aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aac:	3204      	adds	r2, #4

08000aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab0:	d3fb      	bcc.n	8000aaa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ab2:	f7ff ffe3 	bl	8000a7c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000ab6:	f002 fa8b 	bl	8002fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aba:	f7ff fd0d 	bl	80004d8 <main>

08000abe <LoopForever>:

LoopForever:
    b LoopForever
 8000abe:	e7fe      	b.n	8000abe <LoopForever>
  ldr   r0, =_estack
 8000ac0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ac8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000acc:	08003e18 	.word	0x08003e18
  ldr r2, =_sbss
 8000ad0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ad4:	200003e4 	.word	0x200003e4

08000ad8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ad8:	e7fe      	b.n	8000ad8 <ADC1_IRQHandler>
	...

08000adc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae0:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <HAL_Init+0x24>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_Init+0x24>)
 8000ae6:	2110      	movs	r1, #16
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000aec:	2000      	movs	r0, #0
 8000aee:	f000 f809 	bl	8000b04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af2:	f7ff fe63 	bl	80007bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af6:	2300      	movs	r3, #0
}
 8000af8:	0018      	movs	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	40022000 	.word	0x40022000

08000b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <HAL_InitTick+0x5c>)
 8000b0e:	681c      	ldr	r4, [r3, #0]
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <HAL_InitTick+0x60>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	0019      	movs	r1, r3
 8000b16:	23fa      	movs	r3, #250	; 0xfa
 8000b18:	0098      	lsls	r0, r3, #2
 8000b1a:	f7ff faff 	bl	800011c <__udivsi3>
 8000b1e:	0003      	movs	r3, r0
 8000b20:	0019      	movs	r1, r3
 8000b22:	0020      	movs	r0, r4
 8000b24:	f7ff fafa 	bl	800011c <__udivsi3>
 8000b28:	0003      	movs	r3, r0
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f000 f90b 	bl	8000d46 <HAL_SYSTICK_Config>
 8000b30:	1e03      	subs	r3, r0, #0
 8000b32:	d001      	beq.n	8000b38 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	e00f      	b.n	8000b58 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b03      	cmp	r3, #3
 8000b3c:	d80b      	bhi.n	8000b56 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	2301      	movs	r3, #1
 8000b42:	425b      	negs	r3, r3
 8000b44:	2200      	movs	r2, #0
 8000b46:	0018      	movs	r0, r3
 8000b48:	f000 f8d8 	bl	8000cfc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_InitTick+0x64>)
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b52:	2300      	movs	r3, #0
 8000b54:	e000      	b.n	8000b58 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
}
 8000b58:	0018      	movs	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b003      	add	sp, #12
 8000b5e:	bd90      	pop	{r4, r7, pc}
 8000b60:	20000000 	.word	0x20000000
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000004 	.word	0x20000004

08000b6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_IncTick+0x1c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	001a      	movs	r2, r3
 8000b76:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_IncTick+0x20>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	18d2      	adds	r2, r2, r3
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <HAL_IncTick+0x20>)
 8000b7e:	601a      	str	r2, [r3, #0]
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	20000294 	.word	0x20000294

08000b90 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  return uwTick;
 8000b94:	4b02      	ldr	r3, [pc, #8]	; (8000ba0 <HAL_GetTick+0x10>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	0018      	movs	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	20000294 	.word	0x20000294

08000ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	0002      	movs	r2, r0
 8000bac:	1dfb      	adds	r3, r7, #7
 8000bae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b7f      	cmp	r3, #127	; 0x7f
 8000bb6:	d809      	bhi.n	8000bcc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb8:	1dfb      	adds	r3, r7, #7
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	231f      	movs	r3, #31
 8000bc0:	401a      	ands	r2, r3
 8000bc2:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <__NVIC_EnableIRQ+0x30>)
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	4091      	lsls	r1, r2
 8000bc8:	000a      	movs	r2, r1
 8000bca:	601a      	str	r2, [r3, #0]
  }
}
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b002      	add	sp, #8
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	e000e100 	.word	0xe000e100

08000bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	0002      	movs	r2, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b7f      	cmp	r3, #127	; 0x7f
 8000bec:	d828      	bhi.n	8000c40 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bee:	4a2f      	ldr	r2, [pc, #188]	; (8000cac <__NVIC_SetPriority+0xd4>)
 8000bf0:	1dfb      	adds	r3, r7, #7
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	b25b      	sxtb	r3, r3
 8000bf6:	089b      	lsrs	r3, r3, #2
 8000bf8:	33c0      	adds	r3, #192	; 0xc0
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	589b      	ldr	r3, [r3, r2]
 8000bfe:	1dfa      	adds	r2, r7, #7
 8000c00:	7812      	ldrb	r2, [r2, #0]
 8000c02:	0011      	movs	r1, r2
 8000c04:	2203      	movs	r2, #3
 8000c06:	400a      	ands	r2, r1
 8000c08:	00d2      	lsls	r2, r2, #3
 8000c0a:	21ff      	movs	r1, #255	; 0xff
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	000a      	movs	r2, r1
 8000c10:	43d2      	mvns	r2, r2
 8000c12:	401a      	ands	r2, r3
 8000c14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	019b      	lsls	r3, r3, #6
 8000c1a:	22ff      	movs	r2, #255	; 0xff
 8000c1c:	401a      	ands	r2, r3
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	0018      	movs	r0, r3
 8000c24:	2303      	movs	r3, #3
 8000c26:	4003      	ands	r3, r0
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c2c:	481f      	ldr	r0, [pc, #124]	; (8000cac <__NVIC_SetPriority+0xd4>)
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	b25b      	sxtb	r3, r3
 8000c34:	089b      	lsrs	r3, r3, #2
 8000c36:	430a      	orrs	r2, r1
 8000c38:	33c0      	adds	r3, #192	; 0xc0
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c3e:	e031      	b.n	8000ca4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c40:	4a1b      	ldr	r2, [pc, #108]	; (8000cb0 <__NVIC_SetPriority+0xd8>)
 8000c42:	1dfb      	adds	r3, r7, #7
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	0019      	movs	r1, r3
 8000c48:	230f      	movs	r3, #15
 8000c4a:	400b      	ands	r3, r1
 8000c4c:	3b08      	subs	r3, #8
 8000c4e:	089b      	lsrs	r3, r3, #2
 8000c50:	3306      	adds	r3, #6
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	18d3      	adds	r3, r2, r3
 8000c56:	3304      	adds	r3, #4
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	1dfa      	adds	r2, r7, #7
 8000c5c:	7812      	ldrb	r2, [r2, #0]
 8000c5e:	0011      	movs	r1, r2
 8000c60:	2203      	movs	r2, #3
 8000c62:	400a      	ands	r2, r1
 8000c64:	00d2      	lsls	r2, r2, #3
 8000c66:	21ff      	movs	r1, #255	; 0xff
 8000c68:	4091      	lsls	r1, r2
 8000c6a:	000a      	movs	r2, r1
 8000c6c:	43d2      	mvns	r2, r2
 8000c6e:	401a      	ands	r2, r3
 8000c70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	019b      	lsls	r3, r3, #6
 8000c76:	22ff      	movs	r2, #255	; 0xff
 8000c78:	401a      	ands	r2, r3
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	0018      	movs	r0, r3
 8000c80:	2303      	movs	r3, #3
 8000c82:	4003      	ands	r3, r0
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c88:	4809      	ldr	r0, [pc, #36]	; (8000cb0 <__NVIC_SetPriority+0xd8>)
 8000c8a:	1dfb      	adds	r3, r7, #7
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	001c      	movs	r4, r3
 8000c90:	230f      	movs	r3, #15
 8000c92:	4023      	ands	r3, r4
 8000c94:	3b08      	subs	r3, #8
 8000c96:	089b      	lsrs	r3, r3, #2
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	3306      	adds	r3, #6
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	18c3      	adds	r3, r0, r3
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	601a      	str	r2, [r3, #0]
}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b003      	add	sp, #12
 8000caa:	bd90      	pop	{r4, r7, pc}
 8000cac:	e000e100 	.word	0xe000e100
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	1e5a      	subs	r2, r3, #1
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	045b      	lsls	r3, r3, #17
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d301      	bcc.n	8000ccc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e010      	b.n	8000cee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <SysTick_Config+0x44>)
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	3a01      	subs	r2, #1
 8000cd2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	425b      	negs	r3, r3
 8000cd8:	2103      	movs	r1, #3
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f7ff ff7c 	bl	8000bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <SysTick_Config+0x44>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <SysTick_Config+0x44>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	0018      	movs	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b002      	add	sp, #8
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]
 8000d06:	210f      	movs	r1, #15
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	1c02      	adds	r2, r0, #0
 8000d0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	b25b      	sxtb	r3, r3
 8000d16:	0011      	movs	r1, r2
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f7ff ff5d 	bl	8000bd8 <__NVIC_SetPriority>
}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b004      	add	sp, #16
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	0002      	movs	r2, r0
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d32:	1dfb      	adds	r3, r7, #7
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	b25b      	sxtb	r3, r3
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f7ff ff33 	bl	8000ba4 <__NVIC_EnableIRQ>
}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b002      	add	sp, #8
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	0018      	movs	r0, r3
 8000d52:	f7ff ffaf 	bl	8000cb4 <SysTick_Config>
 8000d56:	0003      	movs	r3, r0
}
 8000d58:	0018      	movs	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	b002      	add	sp, #8
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d101      	bne.n	8000d76 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e036      	b.n	8000de4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2221      	movs	r2, #33	; 0x21
 8000d7a:	2102      	movs	r1, #2
 8000d7c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	4a18      	ldr	r2, [pc, #96]	; (8000dec <HAL_DMA_Init+0x8c>)
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000da2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	695b      	ldr	r3, [r3, #20]
 8000da8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	69db      	ldr	r3, [r3, #28]
 8000db4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	68fa      	ldr	r2, [r7, #12]
 8000dc2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f000 f946 	bl	8001058 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2221      	movs	r2, #33	; 0x21
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2220      	movs	r2, #32
 8000dde:	2100      	movs	r1, #0
 8000de0:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
}  
 8000de4:	0018      	movs	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b004      	add	sp, #16
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	ffffc00f 	.word	0xffffc00f

08000df0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
 8000dfc:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000dfe:	2317      	movs	r3, #23
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	2200      	movs	r2, #0
 8000e04:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2220      	movs	r2, #32
 8000e0a:	5c9b      	ldrb	r3, [r3, r2]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d101      	bne.n	8000e14 <HAL_DMA_Start_IT+0x24>
 8000e10:	2302      	movs	r3, #2
 8000e12:	e04f      	b.n	8000eb4 <HAL_DMA_Start_IT+0xc4>
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2220      	movs	r2, #32
 8000e18:	2101      	movs	r1, #1
 8000e1a:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2221      	movs	r2, #33	; 0x21
 8000e20:	5c9b      	ldrb	r3, [r3, r2]
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d13a      	bne.n	8000e9e <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	2221      	movs	r2, #33	; 0x21
 8000e2c:	2102      	movs	r1, #2
 8000e2e:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2200      	movs	r2, #0
 8000e34:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2101      	movs	r1, #1
 8000e42:	438a      	bics	r2, r1
 8000e44:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	68b9      	ldr	r1, [r7, #8]
 8000e4c:	68f8      	ldr	r0, [r7, #12]
 8000e4e:	f000 f8d7 	bl	8001000 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d008      	beq.n	8000e6c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	210e      	movs	r1, #14
 8000e66:	430a      	orrs	r2, r1
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	e00f      	b.n	8000e8c <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	210a      	movs	r1, #10
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2104      	movs	r1, #4
 8000e88:	438a      	bics	r2, r1
 8000e8a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2101      	movs	r1, #1
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	e007      	b.n	8000eae <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	2220      	movs	r2, #32
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8000ea6:	2317      	movs	r3, #23
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	2202      	movs	r2, #2
 8000eac:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8000eae:	2317      	movs	r3, #23
 8000eb0:	18fb      	adds	r3, r7, r3
 8000eb2:	781b      	ldrb	r3, [r3, #0]
} 
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b006      	add	sp, #24
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	2204      	movs	r2, #4
 8000eda:	409a      	lsls	r2, r3
 8000edc:	0013      	movs	r3, r2
 8000ede:	68fa      	ldr	r2, [r7, #12]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	d024      	beq.n	8000f2e <HAL_DMA_IRQHandler+0x72>
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	4013      	ands	r3, r2
 8000eea:	d020      	beq.n	8000f2e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2220      	movs	r2, #32
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d107      	bne.n	8000f08 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2104      	movs	r1, #4
 8000f04:	438a      	bics	r2, r1
 8000f06:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f10:	2104      	movs	r1, #4
 8000f12:	4091      	lsls	r1, r2
 8000f14:	000a      	movs	r2, r1
 8000f16:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d100      	bne.n	8000f22 <HAL_DMA_IRQHandler+0x66>
 8000f20:	e06a      	b.n	8000ff8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	0010      	movs	r0, r2
 8000f2a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000f2c:	e064      	b.n	8000ff8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	2202      	movs	r2, #2
 8000f34:	409a      	lsls	r2, r3
 8000f36:	0013      	movs	r3, r2
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	d02b      	beq.n	8000f96 <HAL_DMA_IRQHandler+0xda>
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	2202      	movs	r2, #2
 8000f42:	4013      	ands	r3, r2
 8000f44:	d027      	beq.n	8000f96 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2220      	movs	r2, #32
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d10b      	bne.n	8000f6a <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	210a      	movs	r1, #10
 8000f5e:	438a      	bics	r2, r1
 8000f60:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2221      	movs	r2, #33	; 0x21
 8000f66:	2101      	movs	r1, #1
 8000f68:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f72:	2102      	movs	r1, #2
 8000f74:	4091      	lsls	r1, r2
 8000f76:	000a      	movs	r2, r1
 8000f78:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2220      	movs	r2, #32
 8000f7e:	2100      	movs	r1, #0
 8000f80:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d036      	beq.n	8000ff8 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	0010      	movs	r0, r2
 8000f92:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000f94:	e030      	b.n	8000ff8 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	2208      	movs	r2, #8
 8000f9c:	409a      	lsls	r2, r3
 8000f9e:	0013      	movs	r3, r2
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d028      	beq.n	8000ff8 <HAL_DMA_IRQHandler+0x13c>
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	2208      	movs	r2, #8
 8000faa:	4013      	ands	r3, r2
 8000fac:	d024      	beq.n	8000ff8 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	210e      	movs	r1, #14
 8000fba:	438a      	bics	r2, r1
 8000fbc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	4091      	lsls	r1, r2
 8000fca:	000a      	movs	r2, r1
 8000fcc:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2221      	movs	r2, #33	; 0x21
 8000fd8:	2101      	movs	r1, #1
 8000fda:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2220      	movs	r2, #32
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d005      	beq.n	8000ff8 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	0010      	movs	r0, r2
 8000ff4:	4798      	blx	r3
    }
   }
}  
 8000ff6:	e7ff      	b.n	8000ff8 <HAL_DMA_IRQHandler+0x13c>
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b004      	add	sp, #16
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
 800100c:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001016:	2101      	movs	r1, #1
 8001018:	4091      	lsls	r1, r2
 800101a:	000a      	movs	r2, r1
 800101c:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	683a      	ldr	r2, [r7, #0]
 8001024:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	2b10      	cmp	r3, #16
 800102c:	d108      	bne.n	8001040 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800103e:	e007      	b.n	8001050 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	68ba      	ldr	r2, [r7, #8]
 8001046:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	60da      	str	r2, [r3, #12]
}
 8001050:	46c0      	nop			; (mov r8, r8)
 8001052:	46bd      	mov	sp, r7
 8001054:	b004      	add	sp, #16
 8001056:	bd80      	pop	{r7, pc}

08001058 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a08      	ldr	r2, [pc, #32]	; (8001088 <DMA_CalcBaseAndBitshift+0x30>)
 8001066:	4694      	mov	ip, r2
 8001068:	4463      	add	r3, ip
 800106a:	2114      	movs	r1, #20
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff f855 	bl	800011c <__udivsi3>
 8001072:	0003      	movs	r3, r0
 8001074:	009a      	lsls	r2, r3, #2
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a03      	ldr	r2, [pc, #12]	; (800108c <DMA_CalcBaseAndBitshift+0x34>)
 800107e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001080:	46c0      	nop			; (mov r8, r8)
 8001082:	46bd      	mov	sp, r7
 8001084:	b002      	add	sp, #8
 8001086:	bd80      	pop	{r7, pc}
 8001088:	bffdfff8 	.word	0xbffdfff8
 800108c:	40020000 	.word	0x40020000

08001090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109e:	e14f      	b.n	8001340 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2101      	movs	r1, #1
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	4091      	lsls	r1, r2
 80010aa:	000a      	movs	r2, r1
 80010ac:	4013      	ands	r3, r2
 80010ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d100      	bne.n	80010b8 <HAL_GPIO_Init+0x28>
 80010b6:	e140      	b.n	800133a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	2203      	movs	r2, #3
 80010be:	4013      	ands	r3, r2
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d005      	beq.n	80010d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2203      	movs	r2, #3
 80010ca:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d130      	bne.n	8001132 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2203      	movs	r2, #3
 80010dc:	409a      	lsls	r2, r3
 80010de:	0013      	movs	r3, r2
 80010e0:	43da      	mvns	r2, r3
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	409a      	lsls	r2, r3
 80010f2:	0013      	movs	r3, r2
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001106:	2201      	movs	r2, #1
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	409a      	lsls	r2, r3
 800110c:	0013      	movs	r3, r2
 800110e:	43da      	mvns	r2, r3
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	091b      	lsrs	r3, r3, #4
 800111c:	2201      	movs	r2, #1
 800111e:	401a      	ands	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	409a      	lsls	r2, r3
 8001124:	0013      	movs	r3, r2
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4313      	orrs	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	693a      	ldr	r2, [r7, #16]
 8001130:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2203      	movs	r2, #3
 8001138:	4013      	ands	r3, r2
 800113a:	2b03      	cmp	r3, #3
 800113c:	d017      	beq.n	800116e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	409a      	lsls	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	43da      	mvns	r2, r3
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	689a      	ldr	r2, [r3, #8]
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	409a      	lsls	r2, r3
 8001160:	0013      	movs	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4313      	orrs	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2203      	movs	r2, #3
 8001174:	4013      	ands	r3, r2
 8001176:	2b02      	cmp	r3, #2
 8001178:	d123      	bne.n	80011c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	08da      	lsrs	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3208      	adds	r2, #8
 8001182:	0092      	lsls	r2, r2, #2
 8001184:	58d3      	ldr	r3, [r2, r3]
 8001186:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	2207      	movs	r2, #7
 800118c:	4013      	ands	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	220f      	movs	r2, #15
 8001192:	409a      	lsls	r2, r3
 8001194:	0013      	movs	r3, r2
 8001196:	43da      	mvns	r2, r3
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	4013      	ands	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	691a      	ldr	r2, [r3, #16]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	2107      	movs	r1, #7
 80011a6:	400b      	ands	r3, r1
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	409a      	lsls	r2, r3
 80011ac:	0013      	movs	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	08da      	lsrs	r2, r3, #3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3208      	adds	r2, #8
 80011bc:	0092      	lsls	r2, r2, #2
 80011be:	6939      	ldr	r1, [r7, #16]
 80011c0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	2203      	movs	r2, #3
 80011ce:	409a      	lsls	r2, r3
 80011d0:	0013      	movs	r3, r2
 80011d2:	43da      	mvns	r2, r3
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2203      	movs	r2, #3
 80011e0:	401a      	ands	r2, r3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	409a      	lsls	r2, r3
 80011e8:	0013      	movs	r3, r2
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	23c0      	movs	r3, #192	; 0xc0
 80011fc:	029b      	lsls	r3, r3, #10
 80011fe:	4013      	ands	r3, r2
 8001200:	d100      	bne.n	8001204 <HAL_GPIO_Init+0x174>
 8001202:	e09a      	b.n	800133a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001204:	4b54      	ldr	r3, [pc, #336]	; (8001358 <HAL_GPIO_Init+0x2c8>)
 8001206:	699a      	ldr	r2, [r3, #24]
 8001208:	4b53      	ldr	r3, [pc, #332]	; (8001358 <HAL_GPIO_Init+0x2c8>)
 800120a:	2101      	movs	r1, #1
 800120c:	430a      	orrs	r2, r1
 800120e:	619a      	str	r2, [r3, #24]
 8001210:	4b51      	ldr	r3, [pc, #324]	; (8001358 <HAL_GPIO_Init+0x2c8>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	2201      	movs	r2, #1
 8001216:	4013      	ands	r3, r2
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800121c:	4a4f      	ldr	r2, [pc, #316]	; (800135c <HAL_GPIO_Init+0x2cc>)
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	089b      	lsrs	r3, r3, #2
 8001222:	3302      	adds	r3, #2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	589b      	ldr	r3, [r3, r2]
 8001228:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	2203      	movs	r2, #3
 800122e:	4013      	ands	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	220f      	movs	r2, #15
 8001234:	409a      	lsls	r2, r3
 8001236:	0013      	movs	r3, r2
 8001238:	43da      	mvns	r2, r3
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4013      	ands	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	2390      	movs	r3, #144	; 0x90
 8001244:	05db      	lsls	r3, r3, #23
 8001246:	429a      	cmp	r2, r3
 8001248:	d013      	beq.n	8001272 <HAL_GPIO_Init+0x1e2>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a44      	ldr	r2, [pc, #272]	; (8001360 <HAL_GPIO_Init+0x2d0>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d00d      	beq.n	800126e <HAL_GPIO_Init+0x1de>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a43      	ldr	r2, [pc, #268]	; (8001364 <HAL_GPIO_Init+0x2d4>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d007      	beq.n	800126a <HAL_GPIO_Init+0x1da>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a42      	ldr	r2, [pc, #264]	; (8001368 <HAL_GPIO_Init+0x2d8>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d101      	bne.n	8001266 <HAL_GPIO_Init+0x1d6>
 8001262:	2303      	movs	r3, #3
 8001264:	e006      	b.n	8001274 <HAL_GPIO_Init+0x1e4>
 8001266:	2305      	movs	r3, #5
 8001268:	e004      	b.n	8001274 <HAL_GPIO_Init+0x1e4>
 800126a:	2302      	movs	r3, #2
 800126c:	e002      	b.n	8001274 <HAL_GPIO_Init+0x1e4>
 800126e:	2301      	movs	r3, #1
 8001270:	e000      	b.n	8001274 <HAL_GPIO_Init+0x1e4>
 8001272:	2300      	movs	r3, #0
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	2103      	movs	r1, #3
 8001278:	400a      	ands	r2, r1
 800127a:	0092      	lsls	r2, r2, #2
 800127c:	4093      	lsls	r3, r2
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001284:	4935      	ldr	r1, [pc, #212]	; (800135c <HAL_GPIO_Init+0x2cc>)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	089b      	lsrs	r3, r3, #2
 800128a:	3302      	adds	r3, #2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001292:	4b36      	ldr	r3, [pc, #216]	; (800136c <HAL_GPIO_Init+0x2dc>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	43da      	mvns	r2, r3
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	025b      	lsls	r3, r3, #9
 80012aa:	4013      	ands	r3, r2
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012b6:	4b2d      	ldr	r3, [pc, #180]	; (800136c <HAL_GPIO_Init+0x2dc>)
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80012bc:	4b2b      	ldr	r3, [pc, #172]	; (800136c <HAL_GPIO_Init+0x2dc>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	43da      	mvns	r2, r3
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	029b      	lsls	r3, r3, #10
 80012d4:	4013      	ands	r3, r2
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012e0:	4b22      	ldr	r3, [pc, #136]	; (800136c <HAL_GPIO_Init+0x2dc>)
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012e6:	4b21      	ldr	r3, [pc, #132]	; (800136c <HAL_GPIO_Init+0x2dc>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	43da      	mvns	r2, r3
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	035b      	lsls	r3, r3, #13
 80012fe:	4013      	ands	r3, r2
 8001300:	d003      	beq.n	800130a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <HAL_GPIO_Init+0x2dc>)
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <HAL_GPIO_Init+0x2dc>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	43da      	mvns	r2, r3
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4013      	ands	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	039b      	lsls	r3, r3, #14
 8001328:	4013      	ands	r3, r2
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001334:	4b0d      	ldr	r3, [pc, #52]	; (800136c <HAL_GPIO_Init+0x2dc>)
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	3301      	adds	r3, #1
 800133e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	40da      	lsrs	r2, r3
 8001348:	1e13      	subs	r3, r2, #0
 800134a:	d000      	beq.n	800134e <HAL_GPIO_Init+0x2be>
 800134c:	e6a8      	b.n	80010a0 <HAL_GPIO_Init+0x10>
  } 
}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	46c0      	nop			; (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	b006      	add	sp, #24
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40021000 	.word	0x40021000
 800135c:	40010000 	.word	0x40010000
 8001360:	48000400 	.word	0x48000400
 8001364:	48000800 	.word	0x48000800
 8001368:	48000c00 	.word	0x48000c00
 800136c:	40010400 	.word	0x40010400

08001370 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	000a      	movs	r2, r1
 800137a:	1cbb      	adds	r3, r7, #2
 800137c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	1cba      	adds	r2, r7, #2
 8001384:	8812      	ldrh	r2, [r2, #0]
 8001386:	4013      	ands	r3, r2
 8001388:	d004      	beq.n	8001394 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800138a:	230f      	movs	r3, #15
 800138c:	18fb      	adds	r3, r7, r3
 800138e:	2201      	movs	r2, #1
 8001390:	701a      	strb	r2, [r3, #0]
 8001392:	e003      	b.n	800139c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001394:	230f      	movs	r3, #15
 8001396:	18fb      	adds	r3, r7, r3
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800139c:	230f      	movs	r3, #15
 800139e:	18fb      	adds	r3, r7, r3
 80013a0:	781b      	ldrb	r3, [r3, #0]
  }
 80013a2:	0018      	movs	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	b004      	add	sp, #16
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	0008      	movs	r0, r1
 80013b4:	0011      	movs	r1, r2
 80013b6:	1cbb      	adds	r3, r7, #2
 80013b8:	1c02      	adds	r2, r0, #0
 80013ba:	801a      	strh	r2, [r3, #0]
 80013bc:	1c7b      	adds	r3, r7, #1
 80013be:	1c0a      	adds	r2, r1, #0
 80013c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013c2:	1c7b      	adds	r3, r7, #1
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d004      	beq.n	80013d4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ca:	1cbb      	adds	r3, r7, #2
 80013cc:	881a      	ldrh	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013d2:	e003      	b.n	80013dc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013d4:	1cbb      	adds	r3, r7, #2
 80013d6:	881a      	ldrh	r2, [r3, #0]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013dc:	46c0      	nop			; (mov r8, r8)
 80013de:	46bd      	mov	sp, r7
 80013e0:	b002      	add	sp, #8
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e301      	b.n	80019fa <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2201      	movs	r2, #1
 80013fc:	4013      	ands	r3, r2
 80013fe:	d100      	bne.n	8001402 <HAL_RCC_OscConfig+0x1e>
 8001400:	e08d      	b.n	800151e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001402:	4bc3      	ldr	r3, [pc, #780]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	220c      	movs	r2, #12
 8001408:	4013      	ands	r3, r2
 800140a:	2b04      	cmp	r3, #4
 800140c:	d00e      	beq.n	800142c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800140e:	4bc0      	ldr	r3, [pc, #768]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	220c      	movs	r2, #12
 8001414:	4013      	ands	r3, r2
 8001416:	2b08      	cmp	r3, #8
 8001418:	d116      	bne.n	8001448 <HAL_RCC_OscConfig+0x64>
 800141a:	4bbd      	ldr	r3, [pc, #756]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	2380      	movs	r3, #128	; 0x80
 8001420:	025b      	lsls	r3, r3, #9
 8001422:	401a      	ands	r2, r3
 8001424:	2380      	movs	r3, #128	; 0x80
 8001426:	025b      	lsls	r3, r3, #9
 8001428:	429a      	cmp	r2, r3
 800142a:	d10d      	bne.n	8001448 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800142c:	4bb8      	ldr	r3, [pc, #736]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	029b      	lsls	r3, r3, #10
 8001434:	4013      	ands	r3, r2
 8001436:	d100      	bne.n	800143a <HAL_RCC_OscConfig+0x56>
 8001438:	e070      	b.n	800151c <HAL_RCC_OscConfig+0x138>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d000      	beq.n	8001444 <HAL_RCC_OscConfig+0x60>
 8001442:	e06b      	b.n	800151c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e2d8      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d107      	bne.n	8001460 <HAL_RCC_OscConfig+0x7c>
 8001450:	4baf      	ldr	r3, [pc, #700]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	4bae      	ldr	r3, [pc, #696]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001456:	2180      	movs	r1, #128	; 0x80
 8001458:	0249      	lsls	r1, r1, #9
 800145a:	430a      	orrs	r2, r1
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	e02f      	b.n	80014c0 <HAL_RCC_OscConfig+0xdc>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d10c      	bne.n	8001482 <HAL_RCC_OscConfig+0x9e>
 8001468:	4ba9      	ldr	r3, [pc, #676]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4ba8      	ldr	r3, [pc, #672]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800146e:	49a9      	ldr	r1, [pc, #676]	; (8001714 <HAL_RCC_OscConfig+0x330>)
 8001470:	400a      	ands	r2, r1
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	4ba6      	ldr	r3, [pc, #664]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4ba5      	ldr	r3, [pc, #660]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800147a:	49a7      	ldr	r1, [pc, #668]	; (8001718 <HAL_RCC_OscConfig+0x334>)
 800147c:	400a      	ands	r2, r1
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	e01e      	b.n	80014c0 <HAL_RCC_OscConfig+0xdc>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	2b05      	cmp	r3, #5
 8001488:	d10e      	bne.n	80014a8 <HAL_RCC_OscConfig+0xc4>
 800148a:	4ba1      	ldr	r3, [pc, #644]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	4ba0      	ldr	r3, [pc, #640]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	02c9      	lsls	r1, r1, #11
 8001494:	430a      	orrs	r2, r1
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	4b9d      	ldr	r3, [pc, #628]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b9c      	ldr	r3, [pc, #624]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800149e:	2180      	movs	r1, #128	; 0x80
 80014a0:	0249      	lsls	r1, r1, #9
 80014a2:	430a      	orrs	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	e00b      	b.n	80014c0 <HAL_RCC_OscConfig+0xdc>
 80014a8:	4b99      	ldr	r3, [pc, #612]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4b98      	ldr	r3, [pc, #608]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 80014ae:	4999      	ldr	r1, [pc, #612]	; (8001714 <HAL_RCC_OscConfig+0x330>)
 80014b0:	400a      	ands	r2, r1
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	4b96      	ldr	r3, [pc, #600]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	4b95      	ldr	r3, [pc, #596]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 80014ba:	4997      	ldr	r1, [pc, #604]	; (8001718 <HAL_RCC_OscConfig+0x334>)
 80014bc:	400a      	ands	r2, r1
 80014be:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d014      	beq.n	80014f2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c8:	f7ff fb62 	bl	8000b90 <HAL_GetTick>
 80014cc:	0003      	movs	r3, r0
 80014ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014d2:	f7ff fb5d 	bl	8000b90 <HAL_GetTick>
 80014d6:	0002      	movs	r2, r0
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b64      	cmp	r3, #100	; 0x64
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e28a      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e4:	4b8a      	ldr	r3, [pc, #552]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	029b      	lsls	r3, r3, #10
 80014ec:	4013      	ands	r3, r2
 80014ee:	d0f0      	beq.n	80014d2 <HAL_RCC_OscConfig+0xee>
 80014f0:	e015      	b.n	800151e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f2:	f7ff fb4d 	bl	8000b90 <HAL_GetTick>
 80014f6:	0003      	movs	r3, r0
 80014f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014fc:	f7ff fb48 	bl	8000b90 <HAL_GetTick>
 8001500:	0002      	movs	r2, r0
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b64      	cmp	r3, #100	; 0x64
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e275      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150e:	4b80      	ldr	r3, [pc, #512]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	029b      	lsls	r3, r3, #10
 8001516:	4013      	ands	r3, r2
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x118>
 800151a:	e000      	b.n	800151e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2202      	movs	r2, #2
 8001524:	4013      	ands	r3, r2
 8001526:	d100      	bne.n	800152a <HAL_RCC_OscConfig+0x146>
 8001528:	e069      	b.n	80015fe <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800152a:	4b79      	ldr	r3, [pc, #484]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	220c      	movs	r2, #12
 8001530:	4013      	ands	r3, r2
 8001532:	d00b      	beq.n	800154c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001534:	4b76      	ldr	r3, [pc, #472]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	220c      	movs	r2, #12
 800153a:	4013      	ands	r3, r2
 800153c:	2b08      	cmp	r3, #8
 800153e:	d11c      	bne.n	800157a <HAL_RCC_OscConfig+0x196>
 8001540:	4b73      	ldr	r3, [pc, #460]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	025b      	lsls	r3, r3, #9
 8001548:	4013      	ands	r3, r2
 800154a:	d116      	bne.n	800157a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154c:	4b70      	ldr	r3, [pc, #448]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2202      	movs	r2, #2
 8001552:	4013      	ands	r3, r2
 8001554:	d005      	beq.n	8001562 <HAL_RCC_OscConfig+0x17e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d001      	beq.n	8001562 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e24b      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001562:	4b6b      	ldr	r3, [pc, #428]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	22f8      	movs	r2, #248	; 0xf8
 8001568:	4393      	bics	r3, r2
 800156a:	0019      	movs	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	00da      	lsls	r2, r3, #3
 8001572:	4b67      	ldr	r3, [pc, #412]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001574:	430a      	orrs	r2, r1
 8001576:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001578:	e041      	b.n	80015fe <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d024      	beq.n	80015cc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001582:	4b63      	ldr	r3, [pc, #396]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4b62      	ldr	r3, [pc, #392]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001588:	2101      	movs	r1, #1
 800158a:	430a      	orrs	r2, r1
 800158c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158e:	f7ff faff 	bl	8000b90 <HAL_GetTick>
 8001592:	0003      	movs	r3, r0
 8001594:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001598:	f7ff fafa 	bl	8000b90 <HAL_GetTick>
 800159c:	0002      	movs	r2, r0
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e227      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015aa:	4b59      	ldr	r3, [pc, #356]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2202      	movs	r2, #2
 80015b0:	4013      	ands	r3, r2
 80015b2:	d0f1      	beq.n	8001598 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b4:	4b56      	ldr	r3, [pc, #344]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	22f8      	movs	r2, #248	; 0xf8
 80015ba:	4393      	bics	r3, r2
 80015bc:	0019      	movs	r1, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	00da      	lsls	r2, r3, #3
 80015c4:	4b52      	ldr	r3, [pc, #328]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 80015c6:	430a      	orrs	r2, r1
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	e018      	b.n	80015fe <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015cc:	4b50      	ldr	r3, [pc, #320]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b4f      	ldr	r3, [pc, #316]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 80015d2:	2101      	movs	r1, #1
 80015d4:	438a      	bics	r2, r1
 80015d6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fada 	bl	8000b90 <HAL_GetTick>
 80015dc:	0003      	movs	r3, r0
 80015de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e2:	f7ff fad5 	bl	8000b90 <HAL_GetTick>
 80015e6:	0002      	movs	r2, r0
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e202      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f4:	4b46      	ldr	r3, [pc, #280]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2202      	movs	r2, #2
 80015fa:	4013      	ands	r3, r2
 80015fc:	d1f1      	bne.n	80015e2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2208      	movs	r2, #8
 8001604:	4013      	ands	r3, r2
 8001606:	d036      	beq.n	8001676 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d019      	beq.n	8001644 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001610:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001612:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001614:	4b3e      	ldr	r3, [pc, #248]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001616:	2101      	movs	r1, #1
 8001618:	430a      	orrs	r2, r1
 800161a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161c:	f7ff fab8 	bl	8000b90 <HAL_GetTick>
 8001620:	0003      	movs	r3, r0
 8001622:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001624:	e008      	b.n	8001638 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001626:	f7ff fab3 	bl	8000b90 <HAL_GetTick>
 800162a:	0002      	movs	r2, r0
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e1e0      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001638:	4b35      	ldr	r3, [pc, #212]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	2202      	movs	r2, #2
 800163e:	4013      	ands	r3, r2
 8001640:	d0f1      	beq.n	8001626 <HAL_RCC_OscConfig+0x242>
 8001642:	e018      	b.n	8001676 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001644:	4b32      	ldr	r3, [pc, #200]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001646:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001648:	4b31      	ldr	r3, [pc, #196]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800164a:	2101      	movs	r1, #1
 800164c:	438a      	bics	r2, r1
 800164e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001650:	f7ff fa9e 	bl	8000b90 <HAL_GetTick>
 8001654:	0003      	movs	r3, r0
 8001656:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800165a:	f7ff fa99 	bl	8000b90 <HAL_GetTick>
 800165e:	0002      	movs	r2, r0
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e1c6      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166c:	4b28      	ldr	r3, [pc, #160]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800166e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001670:	2202      	movs	r2, #2
 8001672:	4013      	ands	r3, r2
 8001674:	d1f1      	bne.n	800165a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2204      	movs	r2, #4
 800167c:	4013      	ands	r3, r2
 800167e:	d100      	bne.n	8001682 <HAL_RCC_OscConfig+0x29e>
 8001680:	e0b4      	b.n	80017ec <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001682:	201f      	movs	r0, #31
 8001684:	183b      	adds	r3, r7, r0
 8001686:	2200      	movs	r2, #0
 8001688:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800168a:	4b21      	ldr	r3, [pc, #132]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800168c:	69da      	ldr	r2, [r3, #28]
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	055b      	lsls	r3, r3, #21
 8001692:	4013      	ands	r3, r2
 8001694:	d110      	bne.n	80016b8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001696:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001698:	69da      	ldr	r2, [r3, #28]
 800169a:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 800169c:	2180      	movs	r1, #128	; 0x80
 800169e:	0549      	lsls	r1, r1, #21
 80016a0:	430a      	orrs	r2, r1
 80016a2:	61da      	str	r2, [r3, #28]
 80016a4:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 80016a6:	69da      	ldr	r2, [r3, #28]
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	055b      	lsls	r3, r3, #21
 80016ac:	4013      	ands	r3, r2
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016b2:	183b      	adds	r3, r7, r0
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b8:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	2380      	movs	r3, #128	; 0x80
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	4013      	ands	r3, r2
 80016c2:	d11a      	bne.n	80016fa <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c4:	4b15      	ldr	r3, [pc, #84]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80016ca:	2180      	movs	r1, #128	; 0x80
 80016cc:	0049      	lsls	r1, r1, #1
 80016ce:	430a      	orrs	r2, r1
 80016d0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d2:	f7ff fa5d 	bl	8000b90 <HAL_GetTick>
 80016d6:	0003      	movs	r3, r0
 80016d8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016dc:	f7ff fa58 	bl	8000b90 <HAL_GetTick>
 80016e0:	0002      	movs	r2, r0
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	; 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e185      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_RCC_OscConfig+0x338>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4013      	ands	r3, r2
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d10e      	bne.n	8001720 <HAL_RCC_OscConfig+0x33c>
 8001702:	4b03      	ldr	r3, [pc, #12]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001704:	6a1a      	ldr	r2, [r3, #32]
 8001706:	4b02      	ldr	r3, [pc, #8]	; (8001710 <HAL_RCC_OscConfig+0x32c>)
 8001708:	2101      	movs	r1, #1
 800170a:	430a      	orrs	r2, r1
 800170c:	621a      	str	r2, [r3, #32]
 800170e:	e035      	b.n	800177c <HAL_RCC_OscConfig+0x398>
 8001710:	40021000 	.word	0x40021000
 8001714:	fffeffff 	.word	0xfffeffff
 8001718:	fffbffff 	.word	0xfffbffff
 800171c:	40007000 	.word	0x40007000
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d10c      	bne.n	8001742 <HAL_RCC_OscConfig+0x35e>
 8001728:	4bb6      	ldr	r3, [pc, #728]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800172a:	6a1a      	ldr	r2, [r3, #32]
 800172c:	4bb5      	ldr	r3, [pc, #724]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800172e:	2101      	movs	r1, #1
 8001730:	438a      	bics	r2, r1
 8001732:	621a      	str	r2, [r3, #32]
 8001734:	4bb3      	ldr	r3, [pc, #716]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001736:	6a1a      	ldr	r2, [r3, #32]
 8001738:	4bb2      	ldr	r3, [pc, #712]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800173a:	2104      	movs	r1, #4
 800173c:	438a      	bics	r2, r1
 800173e:	621a      	str	r2, [r3, #32]
 8001740:	e01c      	b.n	800177c <HAL_RCC_OscConfig+0x398>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b05      	cmp	r3, #5
 8001748:	d10c      	bne.n	8001764 <HAL_RCC_OscConfig+0x380>
 800174a:	4bae      	ldr	r3, [pc, #696]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800174c:	6a1a      	ldr	r2, [r3, #32]
 800174e:	4bad      	ldr	r3, [pc, #692]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001750:	2104      	movs	r1, #4
 8001752:	430a      	orrs	r2, r1
 8001754:	621a      	str	r2, [r3, #32]
 8001756:	4bab      	ldr	r3, [pc, #684]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001758:	6a1a      	ldr	r2, [r3, #32]
 800175a:	4baa      	ldr	r3, [pc, #680]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800175c:	2101      	movs	r1, #1
 800175e:	430a      	orrs	r2, r1
 8001760:	621a      	str	r2, [r3, #32]
 8001762:	e00b      	b.n	800177c <HAL_RCC_OscConfig+0x398>
 8001764:	4ba7      	ldr	r3, [pc, #668]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001766:	6a1a      	ldr	r2, [r3, #32]
 8001768:	4ba6      	ldr	r3, [pc, #664]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800176a:	2101      	movs	r1, #1
 800176c:	438a      	bics	r2, r1
 800176e:	621a      	str	r2, [r3, #32]
 8001770:	4ba4      	ldr	r3, [pc, #656]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001772:	6a1a      	ldr	r2, [r3, #32]
 8001774:	4ba3      	ldr	r3, [pc, #652]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001776:	2104      	movs	r1, #4
 8001778:	438a      	bics	r2, r1
 800177a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d014      	beq.n	80017ae <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001784:	f7ff fa04 	bl	8000b90 <HAL_GetTick>
 8001788:	0003      	movs	r3, r0
 800178a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178c:	e009      	b.n	80017a2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800178e:	f7ff f9ff 	bl	8000b90 <HAL_GetTick>
 8001792:	0002      	movs	r2, r0
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	4a9b      	ldr	r2, [pc, #620]	; (8001a08 <HAL_RCC_OscConfig+0x624>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e12b      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a2:	4b98      	ldr	r3, [pc, #608]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	2202      	movs	r2, #2
 80017a8:	4013      	ands	r3, r2
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x3aa>
 80017ac:	e013      	b.n	80017d6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ae:	f7ff f9ef 	bl	8000b90 <HAL_GetTick>
 80017b2:	0003      	movs	r3, r0
 80017b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b6:	e009      	b.n	80017cc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b8:	f7ff f9ea 	bl	8000b90 <HAL_GetTick>
 80017bc:	0002      	movs	r2, r0
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	4a91      	ldr	r2, [pc, #580]	; (8001a08 <HAL_RCC_OscConfig+0x624>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e116      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017cc:	4b8d      	ldr	r3, [pc, #564]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 80017ce:	6a1b      	ldr	r3, [r3, #32]
 80017d0:	2202      	movs	r2, #2
 80017d2:	4013      	ands	r3, r2
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017d6:	231f      	movs	r3, #31
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d105      	bne.n	80017ec <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e0:	4b88      	ldr	r3, [pc, #544]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 80017e2:	69da      	ldr	r2, [r3, #28]
 80017e4:	4b87      	ldr	r3, [pc, #540]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 80017e6:	4989      	ldr	r1, [pc, #548]	; (8001a0c <HAL_RCC_OscConfig+0x628>)
 80017e8:	400a      	ands	r2, r1
 80017ea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2210      	movs	r2, #16
 80017f2:	4013      	ands	r3, r2
 80017f4:	d063      	beq.n	80018be <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d12a      	bne.n	8001854 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017fe:	4b81      	ldr	r3, [pc, #516]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001802:	4b80      	ldr	r3, [pc, #512]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001804:	2104      	movs	r1, #4
 8001806:	430a      	orrs	r2, r1
 8001808:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800180a:	4b7e      	ldr	r3, [pc, #504]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800180c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800180e:	4b7d      	ldr	r3, [pc, #500]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001810:	2101      	movs	r1, #1
 8001812:	430a      	orrs	r2, r1
 8001814:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001816:	f7ff f9bb 	bl	8000b90 <HAL_GetTick>
 800181a:	0003      	movs	r3, r0
 800181c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001820:	f7ff f9b6 	bl	8000b90 <HAL_GetTick>
 8001824:	0002      	movs	r2, r0
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e0e3      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001832:	4b74      	ldr	r3, [pc, #464]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001836:	2202      	movs	r2, #2
 8001838:	4013      	ands	r3, r2
 800183a:	d0f1      	beq.n	8001820 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800183c:	4b71      	ldr	r3, [pc, #452]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800183e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001840:	22f8      	movs	r2, #248	; 0xf8
 8001842:	4393      	bics	r3, r2
 8001844:	0019      	movs	r1, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	699b      	ldr	r3, [r3, #24]
 800184a:	00da      	lsls	r2, r3, #3
 800184c:	4b6d      	ldr	r3, [pc, #436]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800184e:	430a      	orrs	r2, r1
 8001850:	635a      	str	r2, [r3, #52]	; 0x34
 8001852:	e034      	b.n	80018be <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	3305      	adds	r3, #5
 800185a:	d111      	bne.n	8001880 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800185c:	4b69      	ldr	r3, [pc, #420]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800185e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001860:	4b68      	ldr	r3, [pc, #416]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001862:	2104      	movs	r1, #4
 8001864:	438a      	bics	r2, r1
 8001866:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001868:	4b66      	ldr	r3, [pc, #408]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800186a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186c:	22f8      	movs	r2, #248	; 0xf8
 800186e:	4393      	bics	r3, r2
 8001870:	0019      	movs	r1, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	00da      	lsls	r2, r3, #3
 8001878:	4b62      	ldr	r3, [pc, #392]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800187a:	430a      	orrs	r2, r1
 800187c:	635a      	str	r2, [r3, #52]	; 0x34
 800187e:	e01e      	b.n	80018be <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001880:	4b60      	ldr	r3, [pc, #384]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001884:	4b5f      	ldr	r3, [pc, #380]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001886:	2104      	movs	r1, #4
 8001888:	430a      	orrs	r2, r1
 800188a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800188c:	4b5d      	ldr	r3, [pc, #372]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800188e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001890:	4b5c      	ldr	r3, [pc, #368]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001892:	2101      	movs	r1, #1
 8001894:	438a      	bics	r2, r1
 8001896:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001898:	f7ff f97a 	bl	8000b90 <HAL_GetTick>
 800189c:	0003      	movs	r3, r0
 800189e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018a2:	f7ff f975 	bl	8000b90 <HAL_GetTick>
 80018a6:	0002      	movs	r2, r0
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e0a2      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018b4:	4b53      	ldr	r3, [pc, #332]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 80018b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b8:	2202      	movs	r2, #2
 80018ba:	4013      	ands	r3, r2
 80018bc:	d1f1      	bne.n	80018a2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d100      	bne.n	80018c8 <HAL_RCC_OscConfig+0x4e4>
 80018c6:	e097      	b.n	80019f8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018c8:	4b4e      	ldr	r3, [pc, #312]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	220c      	movs	r2, #12
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d100      	bne.n	80018d6 <HAL_RCC_OscConfig+0x4f2>
 80018d4:	e06b      	b.n	80019ae <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d14c      	bne.n	8001978 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018de:	4b49      	ldr	r3, [pc, #292]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4b48      	ldr	r3, [pc, #288]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 80018e4:	494a      	ldr	r1, [pc, #296]	; (8001a10 <HAL_RCC_OscConfig+0x62c>)
 80018e6:	400a      	ands	r2, r1
 80018e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ea:	f7ff f951 	bl	8000b90 <HAL_GetTick>
 80018ee:	0003      	movs	r3, r0
 80018f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff f94c 	bl	8000b90 <HAL_GetTick>
 80018f8:	0002      	movs	r2, r0
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e079      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001906:	4b3f      	ldr	r3, [pc, #252]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	049b      	lsls	r3, r3, #18
 800190e:	4013      	ands	r3, r2
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001912:	4b3c      	ldr	r3, [pc, #240]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001916:	220f      	movs	r2, #15
 8001918:	4393      	bics	r3, r2
 800191a:	0019      	movs	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001920:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001922:	430a      	orrs	r2, r1
 8001924:	62da      	str	r2, [r3, #44]	; 0x2c
 8001926:	4b37      	ldr	r3, [pc, #220]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	4a3a      	ldr	r2, [pc, #232]	; (8001a14 <HAL_RCC_OscConfig+0x630>)
 800192c:	4013      	ands	r3, r2
 800192e:	0019      	movs	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	431a      	orrs	r2, r3
 800193a:	4b32      	ldr	r3, [pc, #200]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800193c:	430a      	orrs	r2, r1
 800193e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001940:	4b30      	ldr	r3, [pc, #192]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b2f      	ldr	r3, [pc, #188]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 8001946:	2180      	movs	r1, #128	; 0x80
 8001948:	0449      	lsls	r1, r1, #17
 800194a:	430a      	orrs	r2, r1
 800194c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194e:	f7ff f91f 	bl	8000b90 <HAL_GetTick>
 8001952:	0003      	movs	r3, r0
 8001954:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001958:	f7ff f91a 	bl	8000b90 <HAL_GetTick>
 800195c:	0002      	movs	r2, r0
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e047      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800196a:	4b26      	ldr	r3, [pc, #152]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	049b      	lsls	r3, r3, #18
 8001972:	4013      	ands	r3, r2
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0x574>
 8001976:	e03f      	b.n	80019f8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001978:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b21      	ldr	r3, [pc, #132]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 800197e:	4924      	ldr	r1, [pc, #144]	; (8001a10 <HAL_RCC_OscConfig+0x62c>)
 8001980:	400a      	ands	r2, r1
 8001982:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7ff f904 	bl	8000b90 <HAL_GetTick>
 8001988:	0003      	movs	r3, r0
 800198a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800198e:	f7ff f8ff 	bl	8000b90 <HAL_GetTick>
 8001992:	0002      	movs	r2, r0
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e02c      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a0:	4b18      	ldr	r3, [pc, #96]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	049b      	lsls	r3, r3, #18
 80019a8:	4013      	ands	r3, r2
 80019aa:	d1f0      	bne.n	800198e <HAL_RCC_OscConfig+0x5aa>
 80019ac:	e024      	b.n	80019f8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d101      	bne.n	80019ba <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e01f      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80019ba:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80019c0:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <HAL_RCC_OscConfig+0x620>)
 80019c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	025b      	lsls	r3, r3, #9
 80019cc:	401a      	ands	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d10e      	bne.n	80019f4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	220f      	movs	r2, #15
 80019da:	401a      	ands	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d107      	bne.n	80019f4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	23f0      	movs	r3, #240	; 0xf0
 80019e8:	039b      	lsls	r3, r3, #14
 80019ea:	401a      	ands	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e000      	b.n	80019fa <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	0018      	movs	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	b008      	add	sp, #32
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	40021000 	.word	0x40021000
 8001a08:	00001388 	.word	0x00001388
 8001a0c:	efffffff 	.word	0xefffffff
 8001a10:	feffffff 	.word	0xfeffffff
 8001a14:	ffc2ffff 	.word	0xffc2ffff

08001a18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0b3      	b.n	8001b94 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a2c:	4b5b      	ldr	r3, [pc, #364]	; (8001b9c <HAL_RCC_ClockConfig+0x184>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2201      	movs	r2, #1
 8001a32:	4013      	ands	r3, r2
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d911      	bls.n	8001a5e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3a:	4b58      	ldr	r3, [pc, #352]	; (8001b9c <HAL_RCC_ClockConfig+0x184>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	4393      	bics	r3, r2
 8001a42:	0019      	movs	r1, r3
 8001a44:	4b55      	ldr	r3, [pc, #340]	; (8001b9c <HAL_RCC_ClockConfig+0x184>)
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4c:	4b53      	ldr	r3, [pc, #332]	; (8001b9c <HAL_RCC_ClockConfig+0x184>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2201      	movs	r2, #1
 8001a52:	4013      	ands	r3, r2
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d001      	beq.n	8001a5e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e09a      	b.n	8001b94 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2202      	movs	r2, #2
 8001a64:	4013      	ands	r3, r2
 8001a66:	d015      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2204      	movs	r2, #4
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d006      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a72:	4b4b      	ldr	r3, [pc, #300]	; (8001ba0 <HAL_RCC_ClockConfig+0x188>)
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	4b4a      	ldr	r3, [pc, #296]	; (8001ba0 <HAL_RCC_ClockConfig+0x188>)
 8001a78:	21e0      	movs	r1, #224	; 0xe0
 8001a7a:	00c9      	lsls	r1, r1, #3
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a80:	4b47      	ldr	r3, [pc, #284]	; (8001ba0 <HAL_RCC_ClockConfig+0x188>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	22f0      	movs	r2, #240	; 0xf0
 8001a86:	4393      	bics	r3, r2
 8001a88:	0019      	movs	r1, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689a      	ldr	r2, [r3, #8]
 8001a8e:	4b44      	ldr	r3, [pc, #272]	; (8001ba0 <HAL_RCC_ClockConfig+0x188>)
 8001a90:	430a      	orrs	r2, r1
 8001a92:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d040      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	4b3e      	ldr	r3, [pc, #248]	; (8001ba0 <HAL_RCC_ClockConfig+0x188>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	2380      	movs	r3, #128	; 0x80
 8001aac:	029b      	lsls	r3, r3, #10
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d114      	bne.n	8001adc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e06e      	b.n	8001b94 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d107      	bne.n	8001ace <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001abe:	4b38      	ldr	r3, [pc, #224]	; (8001ba0 <HAL_RCC_ClockConfig+0x188>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	049b      	lsls	r3, r3, #18
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d108      	bne.n	8001adc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e062      	b.n	8001b94 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ace:	4b34      	ldr	r3, [pc, #208]	; (8001ba0 <HAL_RCC_ClockConfig+0x188>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e05b      	b.n	8001b94 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001adc:	4b30      	ldr	r3, [pc, #192]	; (8001ba0 <HAL_RCC_ClockConfig+0x188>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2203      	movs	r2, #3
 8001ae2:	4393      	bics	r3, r2
 8001ae4:	0019      	movs	r1, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	4b2d      	ldr	r3, [pc, #180]	; (8001ba0 <HAL_RCC_ClockConfig+0x188>)
 8001aec:	430a      	orrs	r2, r1
 8001aee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001af0:	f7ff f84e 	bl	8000b90 <HAL_GetTick>
 8001af4:	0003      	movs	r3, r0
 8001af6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af8:	e009      	b.n	8001b0e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001afa:	f7ff f849 	bl	8000b90 <HAL_GetTick>
 8001afe:	0002      	movs	r2, r0
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	4a27      	ldr	r2, [pc, #156]	; (8001ba4 <HAL_RCC_ClockConfig+0x18c>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e042      	b.n	8001b94 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0e:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <HAL_RCC_ClockConfig+0x188>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	220c      	movs	r2, #12
 8001b14:	401a      	ands	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d1ec      	bne.n	8001afa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b20:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <HAL_RCC_ClockConfig+0x184>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2201      	movs	r2, #1
 8001b26:	4013      	ands	r3, r2
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d211      	bcs.n	8001b52 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2e:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_RCC_ClockConfig+0x184>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2201      	movs	r2, #1
 8001b34:	4393      	bics	r3, r2
 8001b36:	0019      	movs	r1, r3
 8001b38:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <HAL_RCC_ClockConfig+0x184>)
 8001b3a:	683a      	ldr	r2, [r7, #0]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b40:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <HAL_RCC_ClockConfig+0x184>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2201      	movs	r2, #1
 8001b46:	4013      	ands	r3, r2
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d001      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e020      	b.n	8001b94 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2204      	movs	r2, #4
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d009      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b5c:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <HAL_RCC_ClockConfig+0x188>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	4a11      	ldr	r2, [pc, #68]	; (8001ba8 <HAL_RCC_ClockConfig+0x190>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	0019      	movs	r1, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ba0 <HAL_RCC_ClockConfig+0x188>)
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b70:	f000 f820 	bl	8001bb4 <HAL_RCC_GetSysClockFreq>
 8001b74:	0001      	movs	r1, r0
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <HAL_RCC_ClockConfig+0x188>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	091b      	lsrs	r3, r3, #4
 8001b7c:	220f      	movs	r2, #15
 8001b7e:	4013      	ands	r3, r2
 8001b80:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <HAL_RCC_ClockConfig+0x194>)
 8001b82:	5cd3      	ldrb	r3, [r2, r3]
 8001b84:	000a      	movs	r2, r1
 8001b86:	40da      	lsrs	r2, r3
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_RCC_ClockConfig+0x198>)
 8001b8a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b8c:	2000      	movs	r0, #0
 8001b8e:	f7fe ffb9 	bl	8000b04 <HAL_InitTick>
  
  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	0018      	movs	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b004      	add	sp, #16
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40022000 	.word	0x40022000
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	00001388 	.word	0x00001388
 8001ba8:	fffff8ff 	.word	0xfffff8ff
 8001bac:	08003c14 	.word	0x08003c14
 8001bb0:	20000000 	.word	0x20000000

08001bb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b08f      	sub	sp, #60	; 0x3c
 8001bb8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001bba:	2314      	movs	r3, #20
 8001bbc:	18fb      	adds	r3, r7, r3
 8001bbe:	4a2b      	ldr	r2, [pc, #172]	; (8001c6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bc0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001bc2:	c313      	stmia	r3!, {r0, r1, r4}
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	4a29      	ldr	r2, [pc, #164]	; (8001c70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bcc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001bce:	c313      	stmia	r3!, {r0, r1, r4}
 8001bd0:	6812      	ldr	r2, [r2, #0]
 8001bd2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bd8:	2300      	movs	r3, #0
 8001bda:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bdc:	2300      	movs	r3, #0
 8001bde:	637b      	str	r3, [r7, #52]	; 0x34
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001be4:	2300      	movs	r3, #0
 8001be6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001be8:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf0:	220c      	movs	r2, #12
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d002      	beq.n	8001bfe <HAL_RCC_GetSysClockFreq+0x4a>
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d003      	beq.n	8001c04 <HAL_RCC_GetSysClockFreq+0x50>
 8001bfc:	e02d      	b.n	8001c5a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c00:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c02:	e02d      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c06:	0c9b      	lsrs	r3, r3, #18
 8001c08:	220f      	movs	r2, #15
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2214      	movs	r2, #20
 8001c0e:	18ba      	adds	r2, r7, r2
 8001c10:	5cd3      	ldrb	r3, [r2, r3]
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001c14:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c18:	220f      	movs	r2, #15
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	1d3a      	adds	r2, r7, #4
 8001c1e:	5cd3      	ldrb	r3, [r2, r3]
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	025b      	lsls	r3, r3, #9
 8001c28:	4013      	ands	r3, r2
 8001c2a:	d009      	beq.n	8001c40 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c2e:	4812      	ldr	r0, [pc, #72]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c30:	f7fe fa74 	bl	800011c <__udivsi3>
 8001c34:	0003      	movs	r3, r0
 8001c36:	001a      	movs	r2, r3
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	4353      	muls	r3, r2
 8001c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8001c3e:	e009      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001c40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c42:	000a      	movs	r2, r1
 8001c44:	0152      	lsls	r2, r2, #5
 8001c46:	1a52      	subs	r2, r2, r1
 8001c48:	0193      	lsls	r3, r2, #6
 8001c4a:	1a9b      	subs	r3, r3, r2
 8001c4c:	00db      	lsls	r3, r3, #3
 8001c4e:	185b      	adds	r3, r3, r1
 8001c50:	021b      	lsls	r3, r3, #8
 8001c52:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c56:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c58:	e002      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c5e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c62:	0018      	movs	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	b00f      	add	sp, #60	; 0x3c
 8001c68:	bd90      	pop	{r4, r7, pc}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	08003bf4 	.word	0x08003bf4
 8001c70:	08003c04 	.word	0x08003c04
 8001c74:	40021000 	.word	0x40021000
 8001c78:	007a1200 	.word	0x007a1200

08001c7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c80:	4b02      	ldr	r3, [pc, #8]	; (8001c8c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	0018      	movs	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	20000000 	.word	0x20000000

08001c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001c94:	f7ff fff2 	bl	8001c7c <HAL_RCC_GetHCLKFreq>
 8001c98:	0001      	movs	r1, r0
 8001c9a:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	0a1b      	lsrs	r3, r3, #8
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ca6:	5cd3      	ldrb	r3, [r2, r3]
 8001ca8:	40d9      	lsrs	r1, r3
 8001caa:	000b      	movs	r3, r1
}    
 8001cac:	0018      	movs	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	46c0      	nop			; (mov r8, r8)
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	08003c24 	.word	0x08003c24

08001cbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e044      	b.n	8001d58 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d107      	bne.n	8001ce6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2274      	movs	r2, #116	; 0x74
 8001cda:	2100      	movs	r1, #0
 8001cdc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f7fe fd8f 	bl	8000804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2224      	movs	r2, #36	; 0x24
 8001cea:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	438a      	bics	r2, r1
 8001cfa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f000 f95e 	bl	8001fc0 <UART_SetConfig>
 8001d04:	0003      	movs	r3, r0
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d101      	bne.n	8001d0e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e024      	b.n	8001d58 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f000 fa91 	bl	8002240 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	685a      	ldr	r2, [r3, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	490d      	ldr	r1, [pc, #52]	; (8001d60 <HAL_UART_Init+0xa4>)
 8001d2a:	400a      	ands	r2, r1
 8001d2c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2108      	movs	r1, #8
 8001d3a:	438a      	bics	r2, r1
 8001d3c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2101      	movs	r1, #1
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	0018      	movs	r0, r3
 8001d52:	f000 fb29 	bl	80023a8 <UART_CheckIdleState>
 8001d56:	0003      	movs	r3, r0
}
 8001d58:	0018      	movs	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b002      	add	sp, #8
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	fffff7ff 	.word	0xfffff7ff

08001d64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	; 0x28
 8001d68:	af02      	add	r7, sp, #8
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	1dbb      	adds	r3, r7, #6
 8001d72:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d78:	2b20      	cmp	r3, #32
 8001d7a:	d000      	beq.n	8001d7e <HAL_UART_Transmit+0x1a>
 8001d7c:	e096      	b.n	8001eac <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_UART_Transmit+0x28>
 8001d84:	1dbb      	adds	r3, r7, #6
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e08e      	b.n	8001eae <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	015b      	lsls	r3, r3, #5
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d109      	bne.n	8001db0 <HAL_UART_Transmit+0x4c>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d105      	bne.n	8001db0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2201      	movs	r2, #1
 8001da8:	4013      	ands	r3, r2
 8001daa:	d001      	beq.n	8001db0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e07e      	b.n	8001eae <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2274      	movs	r2, #116	; 0x74
 8001db4:	5c9b      	ldrb	r3, [r3, r2]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d101      	bne.n	8001dbe <HAL_UART_Transmit+0x5a>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e077      	b.n	8001eae <HAL_UART_Transmit+0x14a>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2274      	movs	r2, #116	; 0x74
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2280      	movs	r2, #128	; 0x80
 8001dca:	2100      	movs	r1, #0
 8001dcc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2221      	movs	r2, #33	; 0x21
 8001dd2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001dd4:	f7fe fedc 	bl	8000b90 <HAL_GetTick>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	1dba      	adds	r2, r7, #6
 8001de0:	2150      	movs	r1, #80	; 0x50
 8001de2:	8812      	ldrh	r2, [r2, #0]
 8001de4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	1dba      	adds	r2, r7, #6
 8001dea:	2152      	movs	r1, #82	; 0x52
 8001dec:	8812      	ldrh	r2, [r2, #0]
 8001dee:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	2380      	movs	r3, #128	; 0x80
 8001df6:	015b      	lsls	r3, r3, #5
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d108      	bne.n	8001e0e <HAL_UART_Transmit+0xaa>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d104      	bne.n	8001e0e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	61bb      	str	r3, [r7, #24]
 8001e0c:	e003      	b.n	8001e16 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2274      	movs	r2, #116	; 0x74
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8001e1e:	e02d      	b.n	8001e7c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	9300      	str	r3, [sp, #0]
 8001e28:	0013      	movs	r3, r2
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2180      	movs	r1, #128	; 0x80
 8001e2e:	f000 fb03 	bl	8002438 <UART_WaitOnFlagUntilTimeout>
 8001e32:	1e03      	subs	r3, r0, #0
 8001e34:	d001      	beq.n	8001e3a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e039      	b.n	8001eae <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d10b      	bne.n	8001e58 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	881a      	ldrh	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	05d2      	lsls	r2, r2, #23
 8001e4a:	0dd2      	lsrs	r2, r2, #23
 8001e4c:	b292      	uxth	r2, r2
 8001e4e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	3302      	adds	r3, #2
 8001e54:	61bb      	str	r3, [r7, #24]
 8001e56:	e008      	b.n	8001e6a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	781a      	ldrb	r2, [r3, #0]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	b292      	uxth	r2, r2
 8001e62:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	3301      	adds	r3, #1
 8001e68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2252      	movs	r2, #82	; 0x52
 8001e6e:	5a9b      	ldrh	r3, [r3, r2]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	3b01      	subs	r3, #1
 8001e74:	b299      	uxth	r1, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2252      	movs	r2, #82	; 0x52
 8001e7a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2252      	movs	r2, #82	; 0x52
 8001e80:	5a9b      	ldrh	r3, [r3, r2]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d1cb      	bne.n	8001e20 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	68f8      	ldr	r0, [r7, #12]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	0013      	movs	r3, r2
 8001e92:	2200      	movs	r2, #0
 8001e94:	2140      	movs	r1, #64	; 0x40
 8001e96:	f000 facf 	bl	8002438 <UART_WaitOnFlagUntilTimeout>
 8001e9a:	1e03      	subs	r3, r0, #0
 8001e9c:	d001      	beq.n	8001ea2 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e005      	b.n	8001eae <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	e000      	b.n	8001eae <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8001eac:	2302      	movs	r3, #2
  }
}
 8001eae:	0018      	movs	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	b008      	add	sp, #32
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b088      	sub	sp, #32
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	1dbb      	adds	r3, r7, #6
 8001ec2:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ec8:	2b20      	cmp	r3, #32
 8001eca:	d150      	bne.n	8001f6e <HAL_UART_Receive_DMA+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_UART_Receive_DMA+0x24>
 8001ed2:	1dbb      	adds	r3, r7, #6
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e048      	b.n	8001f70 <HAL_UART_Receive_DMA+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	015b      	lsls	r3, r3, #5
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d109      	bne.n	8001efe <HAL_UART_Receive_DMA+0x48>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d105      	bne.n	8001efe <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d001      	beq.n	8001efe <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e038      	b.n	8001f70 <HAL_UART_Receive_DMA+0xba>
      }
    }

    __HAL_LOCK(huart);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2274      	movs	r2, #116	; 0x74
 8001f02:	5c9b      	ldrb	r3, [r3, r2]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d101      	bne.n	8001f0c <HAL_UART_Receive_DMA+0x56>
 8001f08:	2302      	movs	r3, #2
 8001f0a:	e031      	b.n	8001f70 <HAL_UART_Receive_DMA+0xba>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2274      	movs	r2, #116	; 0x74
 8001f10:	2101      	movs	r1, #1
 8001f12:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2200      	movs	r2, #0
 8001f18:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	041b      	lsls	r3, r3, #16
 8001f24:	4013      	ands	r3, r2
 8001f26:	d019      	beq.n	8001f5c <HAL_UART_Receive_DMA+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f28:	f3ef 8310 	mrs	r3, PRIMASK
 8001f2c:	613b      	str	r3, [r7, #16]
  return(result);
 8001f2e:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001f30:	61fb      	str	r3, [r7, #28]
 8001f32:	2301      	movs	r3, #1
 8001f34:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f383 8810 	msr	PRIMASK, r3
}
 8001f3c:	46c0      	nop			; (mov r8, r8)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2180      	movs	r1, #128	; 0x80
 8001f4a:	04c9      	lsls	r1, r1, #19
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	f383 8810 	msr	PRIMASK, r3
}
 8001f5a:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001f5c:	1dbb      	adds	r3, r7, #6
 8001f5e:	881a      	ldrh	r2, [r3, #0]
 8001f60:	68b9      	ldr	r1, [r7, #8]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	0018      	movs	r0, r3
 8001f66:	f000 fb2b 	bl	80025c0 <UART_Start_Receive_DMA>
 8001f6a:	0003      	movs	r3, r0
 8001f6c:	e000      	b.n	8001f70 <HAL_UART_Receive_DMA+0xba>
  }
  else
  {
    return HAL_BUSY;
 8001f6e:	2302      	movs	r3, #2
  }
}
 8001f70:	0018      	movs	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b008      	add	sp, #32
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8001f80:	46c0      	nop			; (mov r8, r8)
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b002      	add	sp, #8
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8001f90:	46c0      	nop			; (mov r8, r8)
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b002      	add	sp, #8
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8001fa0:	46c0      	nop			; (mov r8, r8)
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b002      	add	sp, #8
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	000a      	movs	r2, r1
 8001fb2:	1cbb      	adds	r3, r7, #2
 8001fb4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	b002      	add	sp, #8
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b088      	sub	sp, #32
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001fc8:	231e      	movs	r3, #30
 8001fca:	18fb      	adds	r3, r7, r3
 8001fcc:	2200      	movs	r2, #0
 8001fce:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	691b      	ldr	r3, [r3, #16]
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a8d      	ldr	r2, [pc, #564]	; (8002224 <UART_SetConfig+0x264>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	0019      	movs	r1, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	4a88      	ldr	r2, [pc, #544]	; (8002228 <UART_SetConfig+0x268>)
 8002006:	4013      	ands	r3, r2
 8002008:	0019      	movs	r1, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	4313      	orrs	r3, r2
 8002024:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	4a7f      	ldr	r2, [pc, #508]	; (800222c <UART_SetConfig+0x26c>)
 800202e:	4013      	ands	r3, r2
 8002030:	0019      	movs	r1, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	430a      	orrs	r2, r1
 800203a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a7b      	ldr	r2, [pc, #492]	; (8002230 <UART_SetConfig+0x270>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d127      	bne.n	8002096 <UART_SetConfig+0xd6>
 8002046:	4b7b      	ldr	r3, [pc, #492]	; (8002234 <UART_SetConfig+0x274>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	2203      	movs	r2, #3
 800204c:	4013      	ands	r3, r2
 800204e:	2b03      	cmp	r3, #3
 8002050:	d00d      	beq.n	800206e <UART_SetConfig+0xae>
 8002052:	d81b      	bhi.n	800208c <UART_SetConfig+0xcc>
 8002054:	2b02      	cmp	r3, #2
 8002056:	d014      	beq.n	8002082 <UART_SetConfig+0xc2>
 8002058:	d818      	bhi.n	800208c <UART_SetConfig+0xcc>
 800205a:	2b00      	cmp	r3, #0
 800205c:	d002      	beq.n	8002064 <UART_SetConfig+0xa4>
 800205e:	2b01      	cmp	r3, #1
 8002060:	d00a      	beq.n	8002078 <UART_SetConfig+0xb8>
 8002062:	e013      	b.n	800208c <UART_SetConfig+0xcc>
 8002064:	231f      	movs	r3, #31
 8002066:	18fb      	adds	r3, r7, r3
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
 800206c:	e021      	b.n	80020b2 <UART_SetConfig+0xf2>
 800206e:	231f      	movs	r3, #31
 8002070:	18fb      	adds	r3, r7, r3
 8002072:	2202      	movs	r2, #2
 8002074:	701a      	strb	r2, [r3, #0]
 8002076:	e01c      	b.n	80020b2 <UART_SetConfig+0xf2>
 8002078:	231f      	movs	r3, #31
 800207a:	18fb      	adds	r3, r7, r3
 800207c:	2204      	movs	r2, #4
 800207e:	701a      	strb	r2, [r3, #0]
 8002080:	e017      	b.n	80020b2 <UART_SetConfig+0xf2>
 8002082:	231f      	movs	r3, #31
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	2208      	movs	r2, #8
 8002088:	701a      	strb	r2, [r3, #0]
 800208a:	e012      	b.n	80020b2 <UART_SetConfig+0xf2>
 800208c:	231f      	movs	r3, #31
 800208e:	18fb      	adds	r3, r7, r3
 8002090:	2210      	movs	r2, #16
 8002092:	701a      	strb	r2, [r3, #0]
 8002094:	e00d      	b.n	80020b2 <UART_SetConfig+0xf2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a67      	ldr	r2, [pc, #412]	; (8002238 <UART_SetConfig+0x278>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d104      	bne.n	80020aa <UART_SetConfig+0xea>
 80020a0:	231f      	movs	r3, #31
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
 80020a8:	e003      	b.n	80020b2 <UART_SetConfig+0xf2>
 80020aa:	231f      	movs	r3, #31
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	2210      	movs	r2, #16
 80020b0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69da      	ldr	r2, [r3, #28]
 80020b6:	2380      	movs	r3, #128	; 0x80
 80020b8:	021b      	lsls	r3, r3, #8
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d15d      	bne.n	800217a <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80020be:	231f      	movs	r3, #31
 80020c0:	18fb      	adds	r3, r7, r3
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d015      	beq.n	80020f4 <UART_SetConfig+0x134>
 80020c8:	dc18      	bgt.n	80020fc <UART_SetConfig+0x13c>
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d00d      	beq.n	80020ea <UART_SetConfig+0x12a>
 80020ce:	dc15      	bgt.n	80020fc <UART_SetConfig+0x13c>
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d002      	beq.n	80020da <UART_SetConfig+0x11a>
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d005      	beq.n	80020e4 <UART_SetConfig+0x124>
 80020d8:	e010      	b.n	80020fc <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80020da:	f7ff fdd9 	bl	8001c90 <HAL_RCC_GetPCLK1Freq>
 80020de:	0003      	movs	r3, r0
 80020e0:	61bb      	str	r3, [r7, #24]
        break;
 80020e2:	e012      	b.n	800210a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80020e4:	4b55      	ldr	r3, [pc, #340]	; (800223c <UART_SetConfig+0x27c>)
 80020e6:	61bb      	str	r3, [r7, #24]
        break;
 80020e8:	e00f      	b.n	800210a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80020ea:	f7ff fd63 	bl	8001bb4 <HAL_RCC_GetSysClockFreq>
 80020ee:	0003      	movs	r3, r0
 80020f0:	61bb      	str	r3, [r7, #24]
        break;
 80020f2:	e00a      	b.n	800210a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80020f4:	2380      	movs	r3, #128	; 0x80
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	61bb      	str	r3, [r7, #24]
        break;
 80020fa:	e006      	b.n	800210a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002100:	231e      	movs	r3, #30
 8002102:	18fb      	adds	r3, r7, r3
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]
        break;
 8002108:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d100      	bne.n	8002112 <UART_SetConfig+0x152>
 8002110:	e07b      	b.n	800220a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	005a      	lsls	r2, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	085b      	lsrs	r3, r3, #1
 800211c:	18d2      	adds	r2, r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	0019      	movs	r1, r3
 8002124:	0010      	movs	r0, r2
 8002126:	f7fd fff9 	bl	800011c <__udivsi3>
 800212a:	0003      	movs	r3, r0
 800212c:	b29b      	uxth	r3, r3
 800212e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	2b0f      	cmp	r3, #15
 8002134:	d91c      	bls.n	8002170 <UART_SetConfig+0x1b0>
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	025b      	lsls	r3, r3, #9
 800213c:	429a      	cmp	r2, r3
 800213e:	d217      	bcs.n	8002170 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	b29a      	uxth	r2, r3
 8002144:	200e      	movs	r0, #14
 8002146:	183b      	adds	r3, r7, r0
 8002148:	210f      	movs	r1, #15
 800214a:	438a      	bics	r2, r1
 800214c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	b29b      	uxth	r3, r3
 8002154:	2207      	movs	r2, #7
 8002156:	4013      	ands	r3, r2
 8002158:	b299      	uxth	r1, r3
 800215a:	183b      	adds	r3, r7, r0
 800215c:	183a      	adds	r2, r7, r0
 800215e:	8812      	ldrh	r2, [r2, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	183a      	adds	r2, r7, r0
 800216a:	8812      	ldrh	r2, [r2, #0]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	e04c      	b.n	800220a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002170:	231e      	movs	r3, #30
 8002172:	18fb      	adds	r3, r7, r3
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]
 8002178:	e047      	b.n	800220a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800217a:	231f      	movs	r3, #31
 800217c:	18fb      	adds	r3, r7, r3
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b08      	cmp	r3, #8
 8002182:	d015      	beq.n	80021b0 <UART_SetConfig+0x1f0>
 8002184:	dc18      	bgt.n	80021b8 <UART_SetConfig+0x1f8>
 8002186:	2b04      	cmp	r3, #4
 8002188:	d00d      	beq.n	80021a6 <UART_SetConfig+0x1e6>
 800218a:	dc15      	bgt.n	80021b8 <UART_SetConfig+0x1f8>
 800218c:	2b00      	cmp	r3, #0
 800218e:	d002      	beq.n	8002196 <UART_SetConfig+0x1d6>
 8002190:	2b02      	cmp	r3, #2
 8002192:	d005      	beq.n	80021a0 <UART_SetConfig+0x1e0>
 8002194:	e010      	b.n	80021b8 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002196:	f7ff fd7b 	bl	8001c90 <HAL_RCC_GetPCLK1Freq>
 800219a:	0003      	movs	r3, r0
 800219c:	61bb      	str	r3, [r7, #24]
        break;
 800219e:	e012      	b.n	80021c6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80021a0:	4b26      	ldr	r3, [pc, #152]	; (800223c <UART_SetConfig+0x27c>)
 80021a2:	61bb      	str	r3, [r7, #24]
        break;
 80021a4:	e00f      	b.n	80021c6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021a6:	f7ff fd05 	bl	8001bb4 <HAL_RCC_GetSysClockFreq>
 80021aa:	0003      	movs	r3, r0
 80021ac:	61bb      	str	r3, [r7, #24]
        break;
 80021ae:	e00a      	b.n	80021c6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80021b0:	2380      	movs	r3, #128	; 0x80
 80021b2:	021b      	lsls	r3, r3, #8
 80021b4:	61bb      	str	r3, [r7, #24]
        break;
 80021b6:	e006      	b.n	80021c6 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80021bc:	231e      	movs	r3, #30
 80021be:	18fb      	adds	r3, r7, r3
 80021c0:	2201      	movs	r2, #1
 80021c2:	701a      	strb	r2, [r3, #0]
        break;
 80021c4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d01e      	beq.n	800220a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	085a      	lsrs	r2, r3, #1
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	18d2      	adds	r2, r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	0019      	movs	r1, r3
 80021dc:	0010      	movs	r0, r2
 80021de:	f7fd ff9d 	bl	800011c <__udivsi3>
 80021e2:	0003      	movs	r3, r0
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	2b0f      	cmp	r3, #15
 80021ec:	d909      	bls.n	8002202 <UART_SetConfig+0x242>
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	2380      	movs	r3, #128	; 0x80
 80021f2:	025b      	lsls	r3, r3, #9
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d204      	bcs.n	8002202 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	60da      	str	r2, [r3, #12]
 8002200:	e003      	b.n	800220a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002202:	231e      	movs	r3, #30
 8002204:	18fb      	adds	r3, r7, r3
 8002206:	2201      	movs	r2, #1
 8002208:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002216:	231e      	movs	r3, #30
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	781b      	ldrb	r3, [r3, #0]
}
 800221c:	0018      	movs	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	b008      	add	sp, #32
 8002222:	bd80      	pop	{r7, pc}
 8002224:	ffff69f3 	.word	0xffff69f3
 8002228:	ffffcfff 	.word	0xffffcfff
 800222c:	fffff4ff 	.word	0xfffff4ff
 8002230:	40013800 	.word	0x40013800
 8002234:	40021000 	.word	0x40021000
 8002238:	40004400 	.word	0x40004400
 800223c:	007a1200 	.word	0x007a1200

08002240 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	2201      	movs	r2, #1
 800224e:	4013      	ands	r3, r2
 8002250:	d00b      	beq.n	800226a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	4a4a      	ldr	r2, [pc, #296]	; (8002384 <UART_AdvFeatureConfig+0x144>)
 800225a:	4013      	ands	r3, r2
 800225c:	0019      	movs	r1, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	2202      	movs	r2, #2
 8002270:	4013      	ands	r3, r2
 8002272:	d00b      	beq.n	800228c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	4a43      	ldr	r2, [pc, #268]	; (8002388 <UART_AdvFeatureConfig+0x148>)
 800227c:	4013      	ands	r3, r2
 800227e:	0019      	movs	r1, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	2204      	movs	r2, #4
 8002292:	4013      	ands	r3, r2
 8002294:	d00b      	beq.n	80022ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	4a3b      	ldr	r2, [pc, #236]	; (800238c <UART_AdvFeatureConfig+0x14c>)
 800229e:	4013      	ands	r3, r2
 80022a0:	0019      	movs	r1, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b2:	2208      	movs	r2, #8
 80022b4:	4013      	ands	r3, r2
 80022b6:	d00b      	beq.n	80022d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4a34      	ldr	r2, [pc, #208]	; (8002390 <UART_AdvFeatureConfig+0x150>)
 80022c0:	4013      	ands	r3, r2
 80022c2:	0019      	movs	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	2210      	movs	r2, #16
 80022d6:	4013      	ands	r3, r2
 80022d8:	d00b      	beq.n	80022f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	4a2c      	ldr	r2, [pc, #176]	; (8002394 <UART_AdvFeatureConfig+0x154>)
 80022e2:	4013      	ands	r3, r2
 80022e4:	0019      	movs	r1, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	2220      	movs	r2, #32
 80022f8:	4013      	ands	r3, r2
 80022fa:	d00b      	beq.n	8002314 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	4a25      	ldr	r2, [pc, #148]	; (8002398 <UART_AdvFeatureConfig+0x158>)
 8002304:	4013      	ands	r3, r2
 8002306:	0019      	movs	r1, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	2240      	movs	r2, #64	; 0x40
 800231a:	4013      	ands	r3, r2
 800231c:	d01d      	beq.n	800235a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	4a1d      	ldr	r2, [pc, #116]	; (800239c <UART_AdvFeatureConfig+0x15c>)
 8002326:	4013      	ands	r3, r2
 8002328:	0019      	movs	r1, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	035b      	lsls	r3, r3, #13
 800233e:	429a      	cmp	r2, r3
 8002340:	d10b      	bne.n	800235a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	4a15      	ldr	r2, [pc, #84]	; (80023a0 <UART_AdvFeatureConfig+0x160>)
 800234a:	4013      	ands	r3, r2
 800234c:	0019      	movs	r1, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235e:	2280      	movs	r2, #128	; 0x80
 8002360:	4013      	ands	r3, r2
 8002362:	d00b      	beq.n	800237c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	4a0e      	ldr	r2, [pc, #56]	; (80023a4 <UART_AdvFeatureConfig+0x164>)
 800236c:	4013      	ands	r3, r2
 800236e:	0019      	movs	r1, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	605a      	str	r2, [r3, #4]
  }
}
 800237c:	46c0      	nop			; (mov r8, r8)
 800237e:	46bd      	mov	sp, r7
 8002380:	b002      	add	sp, #8
 8002382:	bd80      	pop	{r7, pc}
 8002384:	fffdffff 	.word	0xfffdffff
 8002388:	fffeffff 	.word	0xfffeffff
 800238c:	fffbffff 	.word	0xfffbffff
 8002390:	ffff7fff 	.word	0xffff7fff
 8002394:	ffffefff 	.word	0xffffefff
 8002398:	ffffdfff 	.word	0xffffdfff
 800239c:	ffefffff 	.word	0xffefffff
 80023a0:	ff9fffff 	.word	0xff9fffff
 80023a4:	fff7ffff 	.word	0xfff7ffff

080023a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af02      	add	r7, sp, #8
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2280      	movs	r2, #128	; 0x80
 80023b4:	2100      	movs	r1, #0
 80023b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80023b8:	f7fe fbea 	bl	8000b90 <HAL_GetTick>
 80023bc:	0003      	movs	r3, r0
 80023be:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2208      	movs	r2, #8
 80023c8:	4013      	ands	r3, r2
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d10c      	bne.n	80023e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2280      	movs	r2, #128	; 0x80
 80023d2:	0391      	lsls	r1, r2, #14
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	4a17      	ldr	r2, [pc, #92]	; (8002434 <UART_CheckIdleState+0x8c>)
 80023d8:	9200      	str	r2, [sp, #0]
 80023da:	2200      	movs	r2, #0
 80023dc:	f000 f82c 	bl	8002438 <UART_WaitOnFlagUntilTimeout>
 80023e0:	1e03      	subs	r3, r0, #0
 80023e2:	d001      	beq.n	80023e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e021      	b.n	800242c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2204      	movs	r2, #4
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d10c      	bne.n	8002410 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2280      	movs	r2, #128	; 0x80
 80023fa:	03d1      	lsls	r1, r2, #15
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	4a0d      	ldr	r2, [pc, #52]	; (8002434 <UART_CheckIdleState+0x8c>)
 8002400:	9200      	str	r2, [sp, #0]
 8002402:	2200      	movs	r2, #0
 8002404:	f000 f818 	bl	8002438 <UART_WaitOnFlagUntilTimeout>
 8002408:	1e03      	subs	r3, r0, #0
 800240a:	d001      	beq.n	8002410 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e00d      	b.n	800242c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2220      	movs	r2, #32
 8002414:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2220      	movs	r2, #32
 800241a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2274      	movs	r2, #116	; 0x74
 8002426:	2100      	movs	r1, #0
 8002428:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	0018      	movs	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	b004      	add	sp, #16
 8002432:	bd80      	pop	{r7, pc}
 8002434:	01ffffff 	.word	0x01ffffff

08002438 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b094      	sub	sp, #80	; 0x50
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	1dfb      	adds	r3, r7, #7
 8002446:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002448:	e0a3      	b.n	8002592 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800244a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800244c:	3301      	adds	r3, #1
 800244e:	d100      	bne.n	8002452 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002450:	e09f      	b.n	8002592 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002452:	f7fe fb9d 	bl	8000b90 <HAL_GetTick>
 8002456:	0002      	movs	r2, r0
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800245e:	429a      	cmp	r2, r3
 8002460:	d302      	bcc.n	8002468 <UART_WaitOnFlagUntilTimeout+0x30>
 8002462:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002464:	2b00      	cmp	r3, #0
 8002466:	d13d      	bne.n	80024e4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002468:	f3ef 8310 	mrs	r3, PRIMASK
 800246c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800246e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002470:	647b      	str	r3, [r7, #68]	; 0x44
 8002472:	2301      	movs	r3, #1
 8002474:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002478:	f383 8810 	msr	PRIMASK, r3
}
 800247c:	46c0      	nop			; (mov r8, r8)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	494c      	ldr	r1, [pc, #304]	; (80025bc <UART_WaitOnFlagUntilTimeout+0x184>)
 800248a:	400a      	ands	r2, r1
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002490:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002494:	f383 8810 	msr	PRIMASK, r3
}
 8002498:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800249a:	f3ef 8310 	mrs	r3, PRIMASK
 800249e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80024a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024a2:	643b      	str	r3, [r7, #64]	; 0x40
 80024a4:	2301      	movs	r3, #1
 80024a6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024aa:	f383 8810 	msr	PRIMASK, r3
}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2101      	movs	r1, #1
 80024bc:	438a      	bics	r2, r1
 80024be:	609a      	str	r2, [r3, #8]
 80024c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c6:	f383 8810 	msr	PRIMASK, r3
}
 80024ca:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2220      	movs	r2, #32
 80024d0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2220      	movs	r2, #32
 80024d6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2274      	movs	r2, #116	; 0x74
 80024dc:	2100      	movs	r1, #0
 80024de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e067      	b.n	80025b4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2204      	movs	r2, #4
 80024ec:	4013      	ands	r3, r2
 80024ee:	d050      	beq.n	8002592 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	69da      	ldr	r2, [r3, #28]
 80024f6:	2380      	movs	r3, #128	; 0x80
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	401a      	ands	r2, r3
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	429a      	cmp	r2, r3
 8002502:	d146      	bne.n	8002592 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2280      	movs	r2, #128	; 0x80
 800250a:	0112      	lsls	r2, r2, #4
 800250c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800250e:	f3ef 8310 	mrs	r3, PRIMASK
 8002512:	613b      	str	r3, [r7, #16]
  return(result);
 8002514:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002518:	2301      	movs	r3, #1
 800251a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	f383 8810 	msr	PRIMASK, r3
}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4923      	ldr	r1, [pc, #140]	; (80025bc <UART_WaitOnFlagUntilTimeout+0x184>)
 8002530:	400a      	ands	r2, r1
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002536:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	f383 8810 	msr	PRIMASK, r3
}
 800253e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002540:	f3ef 8310 	mrs	r3, PRIMASK
 8002544:	61fb      	str	r3, [r7, #28]
  return(result);
 8002546:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002548:	64bb      	str	r3, [r7, #72]	; 0x48
 800254a:	2301      	movs	r3, #1
 800254c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	f383 8810 	msr	PRIMASK, r3
}
 8002554:	46c0      	nop			; (mov r8, r8)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2101      	movs	r1, #1
 8002562:	438a      	bics	r2, r1
 8002564:	609a      	str	r2, [r3, #8]
 8002566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800256a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800256c:	f383 8810 	msr	PRIMASK, r3
}
 8002570:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2220      	movs	r2, #32
 8002576:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2220      	movs	r2, #32
 800257c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2280      	movs	r2, #128	; 0x80
 8002582:	2120      	movs	r1, #32
 8002584:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2274      	movs	r2, #116	; 0x74
 800258a:	2100      	movs	r1, #0
 800258c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e010      	b.n	80025b4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	4013      	ands	r3, r2
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	425a      	negs	r2, r3
 80025a2:	4153      	adcs	r3, r2
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	001a      	movs	r2, r3
 80025a8:	1dfb      	adds	r3, r7, #7
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d100      	bne.n	80025b2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80025b0:	e74b      	b.n	800244a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	0018      	movs	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	b014      	add	sp, #80	; 0x50
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	fffffe5f 	.word	0xfffffe5f

080025c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b090      	sub	sp, #64	; 0x40
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	1dbb      	adds	r3, r7, #6
 80025cc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	1dba      	adds	r2, r7, #6
 80025d8:	2158      	movs	r1, #88	; 0x58
 80025da:	8812      	ldrh	r2, [r2, #0]
 80025dc:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2280      	movs	r2, #128	; 0x80
 80025e2:	2100      	movs	r1, #0
 80025e4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2222      	movs	r2, #34	; 0x22
 80025ea:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d02b      	beq.n	800264c <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f8:	4a3f      	ldr	r2, [pc, #252]	; (80026f8 <UART_Start_Receive_DMA+0x138>)
 80025fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002600:	4a3e      	ldr	r2, [pc, #248]	; (80026fc <UART_Start_Receive_DMA+0x13c>)
 8002602:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002608:	4a3d      	ldr	r2, [pc, #244]	; (8002700 <UART_Start_Receive_DMA+0x140>)
 800260a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002610:	2200      	movs	r2, #0
 8002612:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	3324      	adds	r3, #36	; 0x24
 800261e:	0019      	movs	r1, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002624:	001a      	movs	r2, r3
 8002626:	1dbb      	adds	r3, r7, #6
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	f7fe fbe1 	bl	8000df0 <HAL_DMA_Start_IT>
 800262e:	1e03      	subs	r3, r0, #0
 8002630:	d00c      	beq.n	800264c <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2280      	movs	r2, #128	; 0x80
 8002636:	2110      	movs	r1, #16
 8002638:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2274      	movs	r2, #116	; 0x74
 800263e:	2100      	movs	r1, #0
 8002640:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2220      	movs	r2, #32
 8002646:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e050      	b.n	80026ee <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2274      	movs	r2, #116	; 0x74
 8002650:	2100      	movs	r1, #0
 8002652:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002654:	f3ef 8310 	mrs	r3, PRIMASK
 8002658:	613b      	str	r3, [r7, #16]
  return(result);
 800265a:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800265c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800265e:	2301      	movs	r3, #1
 8002660:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f383 8810 	msr	PRIMASK, r3
}
 8002668:	46c0      	nop			; (mov r8, r8)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2180      	movs	r1, #128	; 0x80
 8002676:	0049      	lsls	r1, r1, #1
 8002678:	430a      	orrs	r2, r1
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800267e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	f383 8810 	msr	PRIMASK, r3
}
 8002686:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002688:	f3ef 8310 	mrs	r3, PRIMASK
 800268c:	61fb      	str	r3, [r7, #28]
  return(result);
 800268e:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002690:	63bb      	str	r3, [r7, #56]	; 0x38
 8002692:	2301      	movs	r3, #1
 8002694:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	f383 8810 	msr	PRIMASK, r3
}
 800269c:	46c0      	nop			; (mov r8, r8)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2101      	movs	r1, #1
 80026aa:	430a      	orrs	r2, r1
 80026ac:	609a      	str	r2, [r3, #8]
 80026ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	f383 8810 	msr	PRIMASK, r3
}
 80026b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026ba:	f3ef 8310 	mrs	r3, PRIMASK
 80026be:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80026c0:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026c2:	637b      	str	r3, [r7, #52]	; 0x34
 80026c4:	2301      	movs	r3, #1
 80026c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ca:	f383 8810 	msr	PRIMASK, r3
}
 80026ce:	46c0      	nop			; (mov r8, r8)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2140      	movs	r1, #64	; 0x40
 80026dc:	430a      	orrs	r2, r1
 80026de:	609a      	str	r2, [r3, #8]
 80026e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e6:	f383 8810 	msr	PRIMASK, r3
}
 80026ea:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	0018      	movs	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	b010      	add	sp, #64	; 0x40
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	08002811 	.word	0x08002811
 80026fc:	08002935 	.word	0x08002935
 8002700:	08002971 	.word	0x08002971

08002704 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800270c:	f3ef 8310 	mrs	r3, PRIMASK
 8002710:	60bb      	str	r3, [r7, #8]
  return(result);
 8002712:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	2301      	movs	r3, #1
 8002718:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f383 8810 	msr	PRIMASK, r3
}
 8002720:	46c0      	nop			; (mov r8, r8)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	21c0      	movs	r1, #192	; 0xc0
 800272e:	438a      	bics	r2, r1
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	f383 8810 	msr	PRIMASK, r3
}
 800273c:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2220      	movs	r2, #32
 8002742:	679a      	str	r2, [r3, #120]	; 0x78
}
 8002744:	46c0      	nop			; (mov r8, r8)
 8002746:	46bd      	mov	sp, r7
 8002748:	b006      	add	sp, #24
 800274a:	bd80      	pop	{r7, pc}

0800274c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08e      	sub	sp, #56	; 0x38
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002754:	f3ef 8310 	mrs	r3, PRIMASK
 8002758:	617b      	str	r3, [r7, #20]
  return(result);
 800275a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
 800275e:	2301      	movs	r3, #1
 8002760:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	f383 8810 	msr	PRIMASK, r3
}
 8002768:	46c0      	nop			; (mov r8, r8)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4925      	ldr	r1, [pc, #148]	; (800280c <UART_EndRxTransfer+0xc0>)
 8002776:	400a      	ands	r2, r1
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	f383 8810 	msr	PRIMASK, r3
}
 8002784:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002786:	f3ef 8310 	mrs	r3, PRIMASK
 800278a:	623b      	str	r3, [r7, #32]
  return(result);
 800278c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800278e:	633b      	str	r3, [r7, #48]	; 0x30
 8002790:	2301      	movs	r3, #1
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	f383 8810 	msr	PRIMASK, r3
}
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2101      	movs	r1, #1
 80027a8:	438a      	bics	r2, r1
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b2:	f383 8810 	msr	PRIMASK, r3
}
 80027b6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d118      	bne.n	80027f2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027c0:	f3ef 8310 	mrs	r3, PRIMASK
 80027c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80027c6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ca:	2301      	movs	r3, #1
 80027cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f383 8810 	msr	PRIMASK, r3
}
 80027d4:	46c0      	nop			; (mov r8, r8)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2110      	movs	r1, #16
 80027e2:	438a      	bics	r2, r1
 80027e4:	601a      	str	r2, [r3, #0]
 80027e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	f383 8810 	msr	PRIMASK, r3
}
 80027f0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2220      	movs	r2, #32
 80027f6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002804:	46c0      	nop			; (mov r8, r8)
 8002806:	46bd      	mov	sp, r7
 8002808:	b00e      	add	sp, #56	; 0x38
 800280a:	bd80      	pop	{r7, pc}
 800280c:	fffffedf 	.word	0xfffffedf

08002810 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b094      	sub	sp, #80	; 0x50
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b20      	cmp	r3, #32
 8002824:	d06e      	beq.n	8002904 <UART_DMAReceiveCplt+0xf4>
  {
    huart->RxXferCount = 0U;
 8002826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002828:	225a      	movs	r2, #90	; 0x5a
 800282a:	2100      	movs	r1, #0
 800282c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800282e:	f3ef 8310 	mrs	r3, PRIMASK
 8002832:	61bb      	str	r3, [r7, #24]
  return(result);
 8002834:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002836:	64bb      	str	r3, [r7, #72]	; 0x48
 8002838:	2301      	movs	r3, #1
 800283a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f383 8810 	msr	PRIMASK, r3
}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4938      	ldr	r1, [pc, #224]	; (8002930 <UART_DMAReceiveCplt+0x120>)
 8002850:	400a      	ands	r2, r1
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002856:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	f383 8810 	msr	PRIMASK, r3
}
 800285e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002860:	f3ef 8310 	mrs	r3, PRIMASK
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002868:	647b      	str	r3, [r7, #68]	; 0x44
 800286a:	2301      	movs	r3, #1
 800286c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800286e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002870:	f383 8810 	msr	PRIMASK, r3
}
 8002874:	46c0      	nop			; (mov r8, r8)
 8002876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2101      	movs	r1, #1
 8002882:	438a      	bics	r2, r1
 8002884:	609a      	str	r2, [r3, #8]
 8002886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800288a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288c:	f383 8810 	msr	PRIMASK, r3
}
 8002890:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002892:	f3ef 8310 	mrs	r3, PRIMASK
 8002896:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002898:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800289a:	643b      	str	r3, [r7, #64]	; 0x40
 800289c:	2301      	movs	r3, #1
 800289e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a2:	f383 8810 	msr	PRIMASK, r3
}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	2140      	movs	r1, #64	; 0x40
 80028b4:	438a      	bics	r2, r1
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028be:	f383 8810 	msr	PRIMASK, r3
}
 80028c2:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80028c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028c6:	2220      	movs	r2, #32
 80028c8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d118      	bne.n	8002904 <UART_DMAReceiveCplt+0xf4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028d2:	f3ef 8310 	mrs	r3, PRIMASK
 80028d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80028d8:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028dc:	2301      	movs	r3, #1
 80028de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	f383 8810 	msr	PRIMASK, r3
}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2110      	movs	r1, #16
 80028f4:	438a      	bics	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f383 8810 	msr	PRIMASK, r3
}
 8002902:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002908:	2b01      	cmp	r3, #1
 800290a:	d108      	bne.n	800291e <UART_DMAReceiveCplt+0x10e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800290c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800290e:	2258      	movs	r2, #88	; 0x58
 8002910:	5a9a      	ldrh	r2, [r3, r2]
 8002912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002914:	0011      	movs	r1, r2
 8002916:	0018      	movs	r0, r3
 8002918:	f7ff fb46 	bl	8001fa8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800291c:	e003      	b.n	8002926 <UART_DMAReceiveCplt+0x116>
    HAL_UART_RxCpltCallback(huart);
 800291e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002920:	0018      	movs	r0, r3
 8002922:	f7ff fb29 	bl	8001f78 <HAL_UART_RxCpltCallback>
}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	46bd      	mov	sp, r7
 800292a:	b014      	add	sp, #80	; 0x50
 800292c:	bd80      	pop	{r7, pc}
 800292e:	46c0      	nop			; (mov r8, r8)
 8002930:	fffffeff 	.word	0xfffffeff

08002934 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002946:	2b01      	cmp	r3, #1
 8002948:	d10a      	bne.n	8002960 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2258      	movs	r2, #88	; 0x58
 800294e:	5a9b      	ldrh	r3, [r3, r2]
 8002950:	085b      	lsrs	r3, r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	0011      	movs	r1, r2
 8002958:	0018      	movs	r0, r3
 800295a:	f7ff fb25 	bl	8001fa8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800295e:	e003      	b.n	8002968 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	0018      	movs	r0, r3
 8002964:	f7ff fb10 	bl	8001f88 <HAL_UART_RxHalfCpltCallback>
}
 8002968:	46c0      	nop			; (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	b004      	add	sp, #16
 800296e:	bd80      	pop	{r7, pc}

08002970 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b086      	sub	sp, #24
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002982:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002988:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2280      	movs	r2, #128	; 0x80
 8002992:	4013      	ands	r3, r2
 8002994:	2b80      	cmp	r3, #128	; 0x80
 8002996:	d10a      	bne.n	80029ae <UART_DMAError+0x3e>
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	2b21      	cmp	r3, #33	; 0x21
 800299c:	d107      	bne.n	80029ae <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2252      	movs	r2, #82	; 0x52
 80029a2:	2100      	movs	r1, #0
 80029a4:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	0018      	movs	r0, r3
 80029aa:	f7ff feab 	bl	8002704 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2240      	movs	r2, #64	; 0x40
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b40      	cmp	r3, #64	; 0x40
 80029ba:	d10a      	bne.n	80029d2 <UART_DMAError+0x62>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2b22      	cmp	r3, #34	; 0x22
 80029c0:	d107      	bne.n	80029d2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	225a      	movs	r2, #90	; 0x5a
 80029c6:	2100      	movs	r1, #0
 80029c8:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	0018      	movs	r0, r3
 80029ce:	f7ff febd 	bl	800274c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2280      	movs	r2, #128	; 0x80
 80029d6:	589b      	ldr	r3, [r3, r2]
 80029d8:	2210      	movs	r2, #16
 80029da:	431a      	orrs	r2, r3
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	2180      	movs	r1, #128	; 0x80
 80029e0:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	0018      	movs	r0, r3
 80029e6:	f7ff fad7 	bl	8001f98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b006      	add	sp, #24
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <std>:
 80029f4:	2300      	movs	r3, #0
 80029f6:	b510      	push	{r4, lr}
 80029f8:	0004      	movs	r4, r0
 80029fa:	6003      	str	r3, [r0, #0]
 80029fc:	6043      	str	r3, [r0, #4]
 80029fe:	6083      	str	r3, [r0, #8]
 8002a00:	8181      	strh	r1, [r0, #12]
 8002a02:	6643      	str	r3, [r0, #100]	; 0x64
 8002a04:	0019      	movs	r1, r3
 8002a06:	81c2      	strh	r2, [r0, #14]
 8002a08:	6103      	str	r3, [r0, #16]
 8002a0a:	6143      	str	r3, [r0, #20]
 8002a0c:	6183      	str	r3, [r0, #24]
 8002a0e:	2208      	movs	r2, #8
 8002a10:	305c      	adds	r0, #92	; 0x5c
 8002a12:	f000 fa03 	bl	8002e1c <memset>
 8002a16:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <std+0x38>)
 8002a18:	6224      	str	r4, [r4, #32]
 8002a1a:	6263      	str	r3, [r4, #36]	; 0x24
 8002a1c:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <std+0x3c>)
 8002a1e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002a20:	4b04      	ldr	r3, [pc, #16]	; (8002a34 <std+0x40>)
 8002a22:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a24:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <std+0x44>)
 8002a26:	6323      	str	r3, [r4, #48]	; 0x30
 8002a28:	bd10      	pop	{r4, pc}
 8002a2a:	46c0      	nop			; (mov r8, r8)
 8002a2c:	08002c39 	.word	0x08002c39
 8002a30:	08002c61 	.word	0x08002c61
 8002a34:	08002c99 	.word	0x08002c99
 8002a38:	08002cc5 	.word	0x08002cc5

08002a3c <stdio_exit_handler>:
 8002a3c:	b510      	push	{r4, lr}
 8002a3e:	4a03      	ldr	r2, [pc, #12]	; (8002a4c <stdio_exit_handler+0x10>)
 8002a40:	4903      	ldr	r1, [pc, #12]	; (8002a50 <stdio_exit_handler+0x14>)
 8002a42:	4804      	ldr	r0, [pc, #16]	; (8002a54 <stdio_exit_handler+0x18>)
 8002a44:	f000 f86c 	bl	8002b20 <_fwalk_sglue>
 8002a48:	bd10      	pop	{r4, pc}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	2000000c 	.word	0x2000000c
 8002a50:	08003905 	.word	0x08003905
 8002a54:	20000018 	.word	0x20000018

08002a58 <cleanup_stdio>:
 8002a58:	6841      	ldr	r1, [r0, #4]
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <cleanup_stdio+0x30>)
 8002a5c:	b510      	push	{r4, lr}
 8002a5e:	0004      	movs	r4, r0
 8002a60:	4299      	cmp	r1, r3
 8002a62:	d001      	beq.n	8002a68 <cleanup_stdio+0x10>
 8002a64:	f000 ff4e 	bl	8003904 <_fflush_r>
 8002a68:	68a1      	ldr	r1, [r4, #8]
 8002a6a:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <cleanup_stdio+0x34>)
 8002a6c:	4299      	cmp	r1, r3
 8002a6e:	d002      	beq.n	8002a76 <cleanup_stdio+0x1e>
 8002a70:	0020      	movs	r0, r4
 8002a72:	f000 ff47 	bl	8003904 <_fflush_r>
 8002a76:	68e1      	ldr	r1, [r4, #12]
 8002a78:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <cleanup_stdio+0x38>)
 8002a7a:	4299      	cmp	r1, r3
 8002a7c:	d002      	beq.n	8002a84 <cleanup_stdio+0x2c>
 8002a7e:	0020      	movs	r0, r4
 8002a80:	f000 ff40 	bl	8003904 <_fflush_r>
 8002a84:	bd10      	pop	{r4, pc}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	20000298 	.word	0x20000298
 8002a8c:	20000300 	.word	0x20000300
 8002a90:	20000368 	.word	0x20000368

08002a94 <global_stdio_init.part.0>:
 8002a94:	b510      	push	{r4, lr}
 8002a96:	4b09      	ldr	r3, [pc, #36]	; (8002abc <global_stdio_init.part.0+0x28>)
 8002a98:	4a09      	ldr	r2, [pc, #36]	; (8002ac0 <global_stdio_init.part.0+0x2c>)
 8002a9a:	2104      	movs	r1, #4
 8002a9c:	601a      	str	r2, [r3, #0]
 8002a9e:	4809      	ldr	r0, [pc, #36]	; (8002ac4 <global_stdio_init.part.0+0x30>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f7ff ffa7 	bl	80029f4 <std>
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	2109      	movs	r1, #9
 8002aaa:	4807      	ldr	r0, [pc, #28]	; (8002ac8 <global_stdio_init.part.0+0x34>)
 8002aac:	f7ff ffa2 	bl	80029f4 <std>
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	2112      	movs	r1, #18
 8002ab4:	4805      	ldr	r0, [pc, #20]	; (8002acc <global_stdio_init.part.0+0x38>)
 8002ab6:	f7ff ff9d 	bl	80029f4 <std>
 8002aba:	bd10      	pop	{r4, pc}
 8002abc:	200003d0 	.word	0x200003d0
 8002ac0:	08002a3d 	.word	0x08002a3d
 8002ac4:	20000298 	.word	0x20000298
 8002ac8:	20000300 	.word	0x20000300
 8002acc:	20000368 	.word	0x20000368

08002ad0 <__sfp_lock_acquire>:
 8002ad0:	b510      	push	{r4, lr}
 8002ad2:	4802      	ldr	r0, [pc, #8]	; (8002adc <__sfp_lock_acquire+0xc>)
 8002ad4:	f000 faa0 	bl	8003018 <__retarget_lock_acquire_recursive>
 8002ad8:	bd10      	pop	{r4, pc}
 8002ada:	46c0      	nop			; (mov r8, r8)
 8002adc:	200003d9 	.word	0x200003d9

08002ae0 <__sfp_lock_release>:
 8002ae0:	b510      	push	{r4, lr}
 8002ae2:	4802      	ldr	r0, [pc, #8]	; (8002aec <__sfp_lock_release+0xc>)
 8002ae4:	f000 fa99 	bl	800301a <__retarget_lock_release_recursive>
 8002ae8:	bd10      	pop	{r4, pc}
 8002aea:	46c0      	nop			; (mov r8, r8)
 8002aec:	200003d9 	.word	0x200003d9

08002af0 <__sinit>:
 8002af0:	b510      	push	{r4, lr}
 8002af2:	0004      	movs	r4, r0
 8002af4:	f7ff ffec 	bl	8002ad0 <__sfp_lock_acquire>
 8002af8:	6a23      	ldr	r3, [r4, #32]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d002      	beq.n	8002b04 <__sinit+0x14>
 8002afe:	f7ff ffef 	bl	8002ae0 <__sfp_lock_release>
 8002b02:	bd10      	pop	{r4, pc}
 8002b04:	4b04      	ldr	r3, [pc, #16]	; (8002b18 <__sinit+0x28>)
 8002b06:	6223      	str	r3, [r4, #32]
 8002b08:	4b04      	ldr	r3, [pc, #16]	; (8002b1c <__sinit+0x2c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1f6      	bne.n	8002afe <__sinit+0xe>
 8002b10:	f7ff ffc0 	bl	8002a94 <global_stdio_init.part.0>
 8002b14:	e7f3      	b.n	8002afe <__sinit+0xe>
 8002b16:	46c0      	nop			; (mov r8, r8)
 8002b18:	08002a59 	.word	0x08002a59
 8002b1c:	200003d0 	.word	0x200003d0

08002b20 <_fwalk_sglue>:
 8002b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b22:	0014      	movs	r4, r2
 8002b24:	2600      	movs	r6, #0
 8002b26:	9000      	str	r0, [sp, #0]
 8002b28:	9101      	str	r1, [sp, #4]
 8002b2a:	68a5      	ldr	r5, [r4, #8]
 8002b2c:	6867      	ldr	r7, [r4, #4]
 8002b2e:	3f01      	subs	r7, #1
 8002b30:	d504      	bpl.n	8002b3c <_fwalk_sglue+0x1c>
 8002b32:	6824      	ldr	r4, [r4, #0]
 8002b34:	2c00      	cmp	r4, #0
 8002b36:	d1f8      	bne.n	8002b2a <_fwalk_sglue+0xa>
 8002b38:	0030      	movs	r0, r6
 8002b3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002b3c:	89ab      	ldrh	r3, [r5, #12]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d908      	bls.n	8002b54 <_fwalk_sglue+0x34>
 8002b42:	220e      	movs	r2, #14
 8002b44:	5eab      	ldrsh	r3, [r5, r2]
 8002b46:	3301      	adds	r3, #1
 8002b48:	d004      	beq.n	8002b54 <_fwalk_sglue+0x34>
 8002b4a:	0029      	movs	r1, r5
 8002b4c:	9800      	ldr	r0, [sp, #0]
 8002b4e:	9b01      	ldr	r3, [sp, #4]
 8002b50:	4798      	blx	r3
 8002b52:	4306      	orrs	r6, r0
 8002b54:	3568      	adds	r5, #104	; 0x68
 8002b56:	e7ea      	b.n	8002b2e <_fwalk_sglue+0xe>

08002b58 <iprintf>:
 8002b58:	b40f      	push	{r0, r1, r2, r3}
 8002b5a:	b507      	push	{r0, r1, r2, lr}
 8002b5c:	4905      	ldr	r1, [pc, #20]	; (8002b74 <iprintf+0x1c>)
 8002b5e:	ab04      	add	r3, sp, #16
 8002b60:	6808      	ldr	r0, [r1, #0]
 8002b62:	cb04      	ldmia	r3!, {r2}
 8002b64:	6881      	ldr	r1, [r0, #8]
 8002b66:	9301      	str	r3, [sp, #4]
 8002b68:	f000 fba6 	bl	80032b8 <_vfiprintf_r>
 8002b6c:	b003      	add	sp, #12
 8002b6e:	bc08      	pop	{r3}
 8002b70:	b004      	add	sp, #16
 8002b72:	4718      	bx	r3
 8002b74:	20000064 	.word	0x20000064

08002b78 <_puts_r>:
 8002b78:	6a03      	ldr	r3, [r0, #32]
 8002b7a:	b570      	push	{r4, r5, r6, lr}
 8002b7c:	0005      	movs	r5, r0
 8002b7e:	000e      	movs	r6, r1
 8002b80:	6884      	ldr	r4, [r0, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <_puts_r+0x12>
 8002b86:	f7ff ffb3 	bl	8002af0 <__sinit>
 8002b8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002b8c:	07db      	lsls	r3, r3, #31
 8002b8e:	d405      	bmi.n	8002b9c <_puts_r+0x24>
 8002b90:	89a3      	ldrh	r3, [r4, #12]
 8002b92:	059b      	lsls	r3, r3, #22
 8002b94:	d402      	bmi.n	8002b9c <_puts_r+0x24>
 8002b96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b98:	f000 fa3e 	bl	8003018 <__retarget_lock_acquire_recursive>
 8002b9c:	89a3      	ldrh	r3, [r4, #12]
 8002b9e:	071b      	lsls	r3, r3, #28
 8002ba0:	d502      	bpl.n	8002ba8 <_puts_r+0x30>
 8002ba2:	6923      	ldr	r3, [r4, #16]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d11f      	bne.n	8002be8 <_puts_r+0x70>
 8002ba8:	0021      	movs	r1, r4
 8002baa:	0028      	movs	r0, r5
 8002bac:	f000 f8d2 	bl	8002d54 <__swsetup_r>
 8002bb0:	2800      	cmp	r0, #0
 8002bb2:	d019      	beq.n	8002be8 <_puts_r+0x70>
 8002bb4:	2501      	movs	r5, #1
 8002bb6:	426d      	negs	r5, r5
 8002bb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002bba:	07db      	lsls	r3, r3, #31
 8002bbc:	d405      	bmi.n	8002bca <_puts_r+0x52>
 8002bbe:	89a3      	ldrh	r3, [r4, #12]
 8002bc0:	059b      	lsls	r3, r3, #22
 8002bc2:	d402      	bmi.n	8002bca <_puts_r+0x52>
 8002bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bc6:	f000 fa28 	bl	800301a <__retarget_lock_release_recursive>
 8002bca:	0028      	movs	r0, r5
 8002bcc:	bd70      	pop	{r4, r5, r6, pc}
 8002bce:	3601      	adds	r6, #1
 8002bd0:	60a3      	str	r3, [r4, #8]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	da04      	bge.n	8002be0 <_puts_r+0x68>
 8002bd6:	69a2      	ldr	r2, [r4, #24]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	dc16      	bgt.n	8002c0a <_puts_r+0x92>
 8002bdc:	290a      	cmp	r1, #10
 8002bde:	d014      	beq.n	8002c0a <_puts_r+0x92>
 8002be0:	6823      	ldr	r3, [r4, #0]
 8002be2:	1c5a      	adds	r2, r3, #1
 8002be4:	6022      	str	r2, [r4, #0]
 8002be6:	7019      	strb	r1, [r3, #0]
 8002be8:	68a3      	ldr	r3, [r4, #8]
 8002bea:	7831      	ldrb	r1, [r6, #0]
 8002bec:	3b01      	subs	r3, #1
 8002bee:	2900      	cmp	r1, #0
 8002bf0:	d1ed      	bne.n	8002bce <_puts_r+0x56>
 8002bf2:	60a3      	str	r3, [r4, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	da0f      	bge.n	8002c18 <_puts_r+0xa0>
 8002bf8:	0028      	movs	r0, r5
 8002bfa:	0022      	movs	r2, r4
 8002bfc:	310a      	adds	r1, #10
 8002bfe:	f000 f867 	bl	8002cd0 <__swbuf_r>
 8002c02:	250a      	movs	r5, #10
 8002c04:	3001      	adds	r0, #1
 8002c06:	d1d7      	bne.n	8002bb8 <_puts_r+0x40>
 8002c08:	e7d4      	b.n	8002bb4 <_puts_r+0x3c>
 8002c0a:	0022      	movs	r2, r4
 8002c0c:	0028      	movs	r0, r5
 8002c0e:	f000 f85f 	bl	8002cd0 <__swbuf_r>
 8002c12:	3001      	adds	r0, #1
 8002c14:	d1e8      	bne.n	8002be8 <_puts_r+0x70>
 8002c16:	e7cd      	b.n	8002bb4 <_puts_r+0x3c>
 8002c18:	250a      	movs	r5, #10
 8002c1a:	6823      	ldr	r3, [r4, #0]
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	6022      	str	r2, [r4, #0]
 8002c20:	701d      	strb	r5, [r3, #0]
 8002c22:	e7c9      	b.n	8002bb8 <_puts_r+0x40>

08002c24 <puts>:
 8002c24:	b510      	push	{r4, lr}
 8002c26:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <puts+0x10>)
 8002c28:	0001      	movs	r1, r0
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	f7ff ffa4 	bl	8002b78 <_puts_r>
 8002c30:	bd10      	pop	{r4, pc}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	20000064 	.word	0x20000064

08002c38 <__sread>:
 8002c38:	b570      	push	{r4, r5, r6, lr}
 8002c3a:	000c      	movs	r4, r1
 8002c3c:	250e      	movs	r5, #14
 8002c3e:	5f49      	ldrsh	r1, [r1, r5]
 8002c40:	f000 f998 	bl	8002f74 <_read_r>
 8002c44:	2800      	cmp	r0, #0
 8002c46:	db03      	blt.n	8002c50 <__sread+0x18>
 8002c48:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002c4a:	181b      	adds	r3, r3, r0
 8002c4c:	6563      	str	r3, [r4, #84]	; 0x54
 8002c4e:	bd70      	pop	{r4, r5, r6, pc}
 8002c50:	89a3      	ldrh	r3, [r4, #12]
 8002c52:	4a02      	ldr	r2, [pc, #8]	; (8002c5c <__sread+0x24>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	81a3      	strh	r3, [r4, #12]
 8002c58:	e7f9      	b.n	8002c4e <__sread+0x16>
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	ffffefff 	.word	0xffffefff

08002c60 <__swrite>:
 8002c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c62:	001f      	movs	r7, r3
 8002c64:	898b      	ldrh	r3, [r1, #12]
 8002c66:	0005      	movs	r5, r0
 8002c68:	000c      	movs	r4, r1
 8002c6a:	0016      	movs	r6, r2
 8002c6c:	05db      	lsls	r3, r3, #23
 8002c6e:	d505      	bpl.n	8002c7c <__swrite+0x1c>
 8002c70:	230e      	movs	r3, #14
 8002c72:	5ec9      	ldrsh	r1, [r1, r3]
 8002c74:	2200      	movs	r2, #0
 8002c76:	2302      	movs	r3, #2
 8002c78:	f000 f968 	bl	8002f4c <_lseek_r>
 8002c7c:	89a3      	ldrh	r3, [r4, #12]
 8002c7e:	4a05      	ldr	r2, [pc, #20]	; (8002c94 <__swrite+0x34>)
 8002c80:	0028      	movs	r0, r5
 8002c82:	4013      	ands	r3, r2
 8002c84:	81a3      	strh	r3, [r4, #12]
 8002c86:	0032      	movs	r2, r6
 8002c88:	230e      	movs	r3, #14
 8002c8a:	5ee1      	ldrsh	r1, [r4, r3]
 8002c8c:	003b      	movs	r3, r7
 8002c8e:	f000 f985 	bl	8002f9c <_write_r>
 8002c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c94:	ffffefff 	.word	0xffffefff

08002c98 <__sseek>:
 8002c98:	b570      	push	{r4, r5, r6, lr}
 8002c9a:	000c      	movs	r4, r1
 8002c9c:	250e      	movs	r5, #14
 8002c9e:	5f49      	ldrsh	r1, [r1, r5]
 8002ca0:	f000 f954 	bl	8002f4c <_lseek_r>
 8002ca4:	89a3      	ldrh	r3, [r4, #12]
 8002ca6:	1c42      	adds	r2, r0, #1
 8002ca8:	d103      	bne.n	8002cb2 <__sseek+0x1a>
 8002caa:	4a05      	ldr	r2, [pc, #20]	; (8002cc0 <__sseek+0x28>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	81a3      	strh	r3, [r4, #12]
 8002cb0:	bd70      	pop	{r4, r5, r6, pc}
 8002cb2:	2280      	movs	r2, #128	; 0x80
 8002cb4:	0152      	lsls	r2, r2, #5
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	81a3      	strh	r3, [r4, #12]
 8002cba:	6560      	str	r0, [r4, #84]	; 0x54
 8002cbc:	e7f8      	b.n	8002cb0 <__sseek+0x18>
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	ffffefff 	.word	0xffffefff

08002cc4 <__sclose>:
 8002cc4:	b510      	push	{r4, lr}
 8002cc6:	230e      	movs	r3, #14
 8002cc8:	5ec9      	ldrsh	r1, [r1, r3]
 8002cca:	f000 f92d 	bl	8002f28 <_close_r>
 8002cce:	bd10      	pop	{r4, pc}

08002cd0 <__swbuf_r>:
 8002cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd2:	0006      	movs	r6, r0
 8002cd4:	000d      	movs	r5, r1
 8002cd6:	0014      	movs	r4, r2
 8002cd8:	2800      	cmp	r0, #0
 8002cda:	d004      	beq.n	8002ce6 <__swbuf_r+0x16>
 8002cdc:	6a03      	ldr	r3, [r0, #32]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <__swbuf_r+0x16>
 8002ce2:	f7ff ff05 	bl	8002af0 <__sinit>
 8002ce6:	69a3      	ldr	r3, [r4, #24]
 8002ce8:	60a3      	str	r3, [r4, #8]
 8002cea:	89a3      	ldrh	r3, [r4, #12]
 8002cec:	071b      	lsls	r3, r3, #28
 8002cee:	d528      	bpl.n	8002d42 <__swbuf_r+0x72>
 8002cf0:	6923      	ldr	r3, [r4, #16]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d025      	beq.n	8002d42 <__swbuf_r+0x72>
 8002cf6:	6923      	ldr	r3, [r4, #16]
 8002cf8:	6820      	ldr	r0, [r4, #0]
 8002cfa:	b2ef      	uxtb	r7, r5
 8002cfc:	1ac0      	subs	r0, r0, r3
 8002cfe:	6963      	ldr	r3, [r4, #20]
 8002d00:	b2ed      	uxtb	r5, r5
 8002d02:	4283      	cmp	r3, r0
 8002d04:	dc05      	bgt.n	8002d12 <__swbuf_r+0x42>
 8002d06:	0021      	movs	r1, r4
 8002d08:	0030      	movs	r0, r6
 8002d0a:	f000 fdfb 	bl	8003904 <_fflush_r>
 8002d0e:	2800      	cmp	r0, #0
 8002d10:	d11d      	bne.n	8002d4e <__swbuf_r+0x7e>
 8002d12:	68a3      	ldr	r3, [r4, #8]
 8002d14:	3001      	adds	r0, #1
 8002d16:	3b01      	subs	r3, #1
 8002d18:	60a3      	str	r3, [r4, #8]
 8002d1a:	6823      	ldr	r3, [r4, #0]
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	6022      	str	r2, [r4, #0]
 8002d20:	701f      	strb	r7, [r3, #0]
 8002d22:	6963      	ldr	r3, [r4, #20]
 8002d24:	4283      	cmp	r3, r0
 8002d26:	d004      	beq.n	8002d32 <__swbuf_r+0x62>
 8002d28:	89a3      	ldrh	r3, [r4, #12]
 8002d2a:	07db      	lsls	r3, r3, #31
 8002d2c:	d507      	bpl.n	8002d3e <__swbuf_r+0x6e>
 8002d2e:	2d0a      	cmp	r5, #10
 8002d30:	d105      	bne.n	8002d3e <__swbuf_r+0x6e>
 8002d32:	0021      	movs	r1, r4
 8002d34:	0030      	movs	r0, r6
 8002d36:	f000 fde5 	bl	8003904 <_fflush_r>
 8002d3a:	2800      	cmp	r0, #0
 8002d3c:	d107      	bne.n	8002d4e <__swbuf_r+0x7e>
 8002d3e:	0028      	movs	r0, r5
 8002d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d42:	0021      	movs	r1, r4
 8002d44:	0030      	movs	r0, r6
 8002d46:	f000 f805 	bl	8002d54 <__swsetup_r>
 8002d4a:	2800      	cmp	r0, #0
 8002d4c:	d0d3      	beq.n	8002cf6 <__swbuf_r+0x26>
 8002d4e:	2501      	movs	r5, #1
 8002d50:	426d      	negs	r5, r5
 8002d52:	e7f4      	b.n	8002d3e <__swbuf_r+0x6e>

08002d54 <__swsetup_r>:
 8002d54:	4b30      	ldr	r3, [pc, #192]	; (8002e18 <__swsetup_r+0xc4>)
 8002d56:	b570      	push	{r4, r5, r6, lr}
 8002d58:	0005      	movs	r5, r0
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	000c      	movs	r4, r1
 8002d5e:	2800      	cmp	r0, #0
 8002d60:	d004      	beq.n	8002d6c <__swsetup_r+0x18>
 8002d62:	6a03      	ldr	r3, [r0, #32]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <__swsetup_r+0x18>
 8002d68:	f7ff fec2 	bl	8002af0 <__sinit>
 8002d6c:	230c      	movs	r3, #12
 8002d6e:	5ee2      	ldrsh	r2, [r4, r3]
 8002d70:	b293      	uxth	r3, r2
 8002d72:	0711      	lsls	r1, r2, #28
 8002d74:	d423      	bmi.n	8002dbe <__swsetup_r+0x6a>
 8002d76:	06d9      	lsls	r1, r3, #27
 8002d78:	d407      	bmi.n	8002d8a <__swsetup_r+0x36>
 8002d7a:	2309      	movs	r3, #9
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	602b      	str	r3, [r5, #0]
 8002d80:	3337      	adds	r3, #55	; 0x37
 8002d82:	4313      	orrs	r3, r2
 8002d84:	81a3      	strh	r3, [r4, #12]
 8002d86:	4240      	negs	r0, r0
 8002d88:	bd70      	pop	{r4, r5, r6, pc}
 8002d8a:	075b      	lsls	r3, r3, #29
 8002d8c:	d513      	bpl.n	8002db6 <__swsetup_r+0x62>
 8002d8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d90:	2900      	cmp	r1, #0
 8002d92:	d008      	beq.n	8002da6 <__swsetup_r+0x52>
 8002d94:	0023      	movs	r3, r4
 8002d96:	3344      	adds	r3, #68	; 0x44
 8002d98:	4299      	cmp	r1, r3
 8002d9a:	d002      	beq.n	8002da2 <__swsetup_r+0x4e>
 8002d9c:	0028      	movs	r0, r5
 8002d9e:	f000 f95b 	bl	8003058 <_free_r>
 8002da2:	2300      	movs	r3, #0
 8002da4:	6363      	str	r3, [r4, #52]	; 0x34
 8002da6:	2224      	movs	r2, #36	; 0x24
 8002da8:	89a3      	ldrh	r3, [r4, #12]
 8002daa:	4393      	bics	r3, r2
 8002dac:	81a3      	strh	r3, [r4, #12]
 8002dae:	2300      	movs	r3, #0
 8002db0:	6063      	str	r3, [r4, #4]
 8002db2:	6923      	ldr	r3, [r4, #16]
 8002db4:	6023      	str	r3, [r4, #0]
 8002db6:	2308      	movs	r3, #8
 8002db8:	89a2      	ldrh	r2, [r4, #12]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	81a3      	strh	r3, [r4, #12]
 8002dbe:	6923      	ldr	r3, [r4, #16]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10b      	bne.n	8002ddc <__swsetup_r+0x88>
 8002dc4:	21a0      	movs	r1, #160	; 0xa0
 8002dc6:	2280      	movs	r2, #128	; 0x80
 8002dc8:	89a3      	ldrh	r3, [r4, #12]
 8002dca:	0089      	lsls	r1, r1, #2
 8002dcc:	0092      	lsls	r2, r2, #2
 8002dce:	400b      	ands	r3, r1
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d003      	beq.n	8002ddc <__swsetup_r+0x88>
 8002dd4:	0021      	movs	r1, r4
 8002dd6:	0028      	movs	r0, r5
 8002dd8:	f000 fdf8 	bl	80039cc <__smakebuf_r>
 8002ddc:	220c      	movs	r2, #12
 8002dde:	5ea3      	ldrsh	r3, [r4, r2]
 8002de0:	2001      	movs	r0, #1
 8002de2:	001a      	movs	r2, r3
 8002de4:	b299      	uxth	r1, r3
 8002de6:	4002      	ands	r2, r0
 8002de8:	4203      	tst	r3, r0
 8002dea:	d00f      	beq.n	8002e0c <__swsetup_r+0xb8>
 8002dec:	2200      	movs	r2, #0
 8002dee:	60a2      	str	r2, [r4, #8]
 8002df0:	6962      	ldr	r2, [r4, #20]
 8002df2:	4252      	negs	r2, r2
 8002df4:	61a2      	str	r2, [r4, #24]
 8002df6:	2000      	movs	r0, #0
 8002df8:	6922      	ldr	r2, [r4, #16]
 8002dfa:	4282      	cmp	r2, r0
 8002dfc:	d1c4      	bne.n	8002d88 <__swsetup_r+0x34>
 8002dfe:	0609      	lsls	r1, r1, #24
 8002e00:	d5c2      	bpl.n	8002d88 <__swsetup_r+0x34>
 8002e02:	2240      	movs	r2, #64	; 0x40
 8002e04:	4313      	orrs	r3, r2
 8002e06:	81a3      	strh	r3, [r4, #12]
 8002e08:	3801      	subs	r0, #1
 8002e0a:	e7bd      	b.n	8002d88 <__swsetup_r+0x34>
 8002e0c:	0788      	lsls	r0, r1, #30
 8002e0e:	d400      	bmi.n	8002e12 <__swsetup_r+0xbe>
 8002e10:	6962      	ldr	r2, [r4, #20]
 8002e12:	60a2      	str	r2, [r4, #8]
 8002e14:	e7ef      	b.n	8002df6 <__swsetup_r+0xa2>
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	20000064 	.word	0x20000064

08002e1c <memset>:
 8002e1c:	0003      	movs	r3, r0
 8002e1e:	1882      	adds	r2, r0, r2
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d100      	bne.n	8002e26 <memset+0xa>
 8002e24:	4770      	bx	lr
 8002e26:	7019      	strb	r1, [r3, #0]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	e7f9      	b.n	8002e20 <memset+0x4>

08002e2c <strcasecmp>:
 8002e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e2e:	0005      	movs	r5, r0
 8002e30:	2400      	movs	r4, #0
 8002e32:	2703      	movs	r7, #3
 8002e34:	4e09      	ldr	r6, [pc, #36]	; (8002e5c <strcasecmp+0x30>)
 8002e36:	5d2a      	ldrb	r2, [r5, r4]
 8002e38:	5cb3      	ldrb	r3, [r6, r2]
 8002e3a:	403b      	ands	r3, r7
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d100      	bne.n	8002e42 <strcasecmp+0x16>
 8002e40:	3220      	adds	r2, #32
 8002e42:	5d0b      	ldrb	r3, [r1, r4]
 8002e44:	5cf0      	ldrb	r0, [r6, r3]
 8002e46:	4038      	ands	r0, r7
 8002e48:	2801      	cmp	r0, #1
 8002e4a:	d100      	bne.n	8002e4e <strcasecmp+0x22>
 8002e4c:	3320      	adds	r3, #32
 8002e4e:	1ad0      	subs	r0, r2, r3
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d102      	bne.n	8002e5a <strcasecmp+0x2e>
 8002e54:	3401      	adds	r4, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1ed      	bne.n	8002e36 <strcasecmp+0xa>
 8002e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e5c:	08003cda 	.word	0x08003cda

08002e60 <strtok>:
 8002e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e62:	4b16      	ldr	r3, [pc, #88]	; (8002ebc <strtok+0x5c>)
 8002e64:	0005      	movs	r5, r0
 8002e66:	681f      	ldr	r7, [r3, #0]
 8002e68:	000e      	movs	r6, r1
 8002e6a:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8002e6c:	2c00      	cmp	r4, #0
 8002e6e:	d11d      	bne.n	8002eac <strtok+0x4c>
 8002e70:	2050      	movs	r0, #80	; 0x50
 8002e72:	f000 f93b 	bl	80030ec <malloc>
 8002e76:	1e02      	subs	r2, r0, #0
 8002e78:	6478      	str	r0, [r7, #68]	; 0x44
 8002e7a:	d104      	bne.n	8002e86 <strtok+0x26>
 8002e7c:	215b      	movs	r1, #91	; 0x5b
 8002e7e:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <strtok+0x60>)
 8002e80:	4810      	ldr	r0, [pc, #64]	; (8002ec4 <strtok+0x64>)
 8002e82:	f000 f8cb 	bl	800301c <__assert_func>
 8002e86:	6004      	str	r4, [r0, #0]
 8002e88:	6044      	str	r4, [r0, #4]
 8002e8a:	6084      	str	r4, [r0, #8]
 8002e8c:	60c4      	str	r4, [r0, #12]
 8002e8e:	6104      	str	r4, [r0, #16]
 8002e90:	6144      	str	r4, [r0, #20]
 8002e92:	6184      	str	r4, [r0, #24]
 8002e94:	6284      	str	r4, [r0, #40]	; 0x28
 8002e96:	62c4      	str	r4, [r0, #44]	; 0x2c
 8002e98:	6304      	str	r4, [r0, #48]	; 0x30
 8002e9a:	6344      	str	r4, [r0, #52]	; 0x34
 8002e9c:	6384      	str	r4, [r0, #56]	; 0x38
 8002e9e:	63c4      	str	r4, [r0, #60]	; 0x3c
 8002ea0:	6404      	str	r4, [r0, #64]	; 0x40
 8002ea2:	6444      	str	r4, [r0, #68]	; 0x44
 8002ea4:	6484      	str	r4, [r0, #72]	; 0x48
 8002ea6:	64c4      	str	r4, [r0, #76]	; 0x4c
 8002ea8:	7704      	strb	r4, [r0, #28]
 8002eaa:	6244      	str	r4, [r0, #36]	; 0x24
 8002eac:	0031      	movs	r1, r6
 8002eae:	0028      	movs	r0, r5
 8002eb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	f000 f808 	bl	8002ec8 <__strtok_r>
 8002eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	20000064 	.word	0x20000064
 8002ec0:	08003c2c 	.word	0x08003c2c
 8002ec4:	08003c43 	.word	0x08003c43

08002ec8 <__strtok_r>:
 8002ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eca:	2800      	cmp	r0, #0
 8002ecc:	d102      	bne.n	8002ed4 <__strtok_r+0xc>
 8002ece:	6810      	ldr	r0, [r2, #0]
 8002ed0:	2800      	cmp	r0, #0
 8002ed2:	d013      	beq.n	8002efc <__strtok_r+0x34>
 8002ed4:	0004      	movs	r4, r0
 8002ed6:	0020      	movs	r0, r4
 8002ed8:	000e      	movs	r6, r1
 8002eda:	7805      	ldrb	r5, [r0, #0]
 8002edc:	3401      	adds	r4, #1
 8002ede:	7837      	ldrb	r7, [r6, #0]
 8002ee0:	2f00      	cmp	r7, #0
 8002ee2:	d104      	bne.n	8002eee <__strtok_r+0x26>
 8002ee4:	2d00      	cmp	r5, #0
 8002ee6:	d10f      	bne.n	8002f08 <__strtok_r+0x40>
 8002ee8:	0028      	movs	r0, r5
 8002eea:	6015      	str	r5, [r2, #0]
 8002eec:	e006      	b.n	8002efc <__strtok_r+0x34>
 8002eee:	3601      	adds	r6, #1
 8002ef0:	42bd      	cmp	r5, r7
 8002ef2:	d1f4      	bne.n	8002ede <__strtok_r+0x16>
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d1ee      	bne.n	8002ed6 <__strtok_r+0xe>
 8002ef8:	6014      	str	r4, [r2, #0]
 8002efa:	7003      	strb	r3, [r0, #0]
 8002efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002efe:	002f      	movs	r7, r5
 8002f00:	e00f      	b.n	8002f22 <__strtok_r+0x5a>
 8002f02:	3301      	adds	r3, #1
 8002f04:	2e00      	cmp	r6, #0
 8002f06:	d104      	bne.n	8002f12 <__strtok_r+0x4a>
 8002f08:	0023      	movs	r3, r4
 8002f0a:	3401      	adds	r4, #1
 8002f0c:	781d      	ldrb	r5, [r3, #0]
 8002f0e:	0027      	movs	r7, r4
 8002f10:	000b      	movs	r3, r1
 8002f12:	781e      	ldrb	r6, [r3, #0]
 8002f14:	42b5      	cmp	r5, r6
 8002f16:	d1f4      	bne.n	8002f02 <__strtok_r+0x3a>
 8002f18:	2d00      	cmp	r5, #0
 8002f1a:	d0f0      	beq.n	8002efe <__strtok_r+0x36>
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	3c01      	subs	r4, #1
 8002f20:	7023      	strb	r3, [r4, #0]
 8002f22:	6017      	str	r7, [r2, #0]
 8002f24:	e7ea      	b.n	8002efc <__strtok_r+0x34>
	...

08002f28 <_close_r>:
 8002f28:	2300      	movs	r3, #0
 8002f2a:	b570      	push	{r4, r5, r6, lr}
 8002f2c:	4d06      	ldr	r5, [pc, #24]	; (8002f48 <_close_r+0x20>)
 8002f2e:	0004      	movs	r4, r0
 8002f30:	0008      	movs	r0, r1
 8002f32:	602b      	str	r3, [r5, #0]
 8002f34:	f7fd fd3f 	bl	80009b6 <_close>
 8002f38:	1c43      	adds	r3, r0, #1
 8002f3a:	d103      	bne.n	8002f44 <_close_r+0x1c>
 8002f3c:	682b      	ldr	r3, [r5, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d000      	beq.n	8002f44 <_close_r+0x1c>
 8002f42:	6023      	str	r3, [r4, #0]
 8002f44:	bd70      	pop	{r4, r5, r6, pc}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	200003d4 	.word	0x200003d4

08002f4c <_lseek_r>:
 8002f4c:	b570      	push	{r4, r5, r6, lr}
 8002f4e:	0004      	movs	r4, r0
 8002f50:	0008      	movs	r0, r1
 8002f52:	0011      	movs	r1, r2
 8002f54:	001a      	movs	r2, r3
 8002f56:	2300      	movs	r3, #0
 8002f58:	4d05      	ldr	r5, [pc, #20]	; (8002f70 <_lseek_r+0x24>)
 8002f5a:	602b      	str	r3, [r5, #0]
 8002f5c:	f7fd fd4c 	bl	80009f8 <_lseek>
 8002f60:	1c43      	adds	r3, r0, #1
 8002f62:	d103      	bne.n	8002f6c <_lseek_r+0x20>
 8002f64:	682b      	ldr	r3, [r5, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d000      	beq.n	8002f6c <_lseek_r+0x20>
 8002f6a:	6023      	str	r3, [r4, #0]
 8002f6c:	bd70      	pop	{r4, r5, r6, pc}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	200003d4 	.word	0x200003d4

08002f74 <_read_r>:
 8002f74:	b570      	push	{r4, r5, r6, lr}
 8002f76:	0004      	movs	r4, r0
 8002f78:	0008      	movs	r0, r1
 8002f7a:	0011      	movs	r1, r2
 8002f7c:	001a      	movs	r2, r3
 8002f7e:	2300      	movs	r3, #0
 8002f80:	4d05      	ldr	r5, [pc, #20]	; (8002f98 <_read_r+0x24>)
 8002f82:	602b      	str	r3, [r5, #0]
 8002f84:	f7fd fcfa 	bl	800097c <_read>
 8002f88:	1c43      	adds	r3, r0, #1
 8002f8a:	d103      	bne.n	8002f94 <_read_r+0x20>
 8002f8c:	682b      	ldr	r3, [r5, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d000      	beq.n	8002f94 <_read_r+0x20>
 8002f92:	6023      	str	r3, [r4, #0]
 8002f94:	bd70      	pop	{r4, r5, r6, pc}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	200003d4 	.word	0x200003d4

08002f9c <_write_r>:
 8002f9c:	b570      	push	{r4, r5, r6, lr}
 8002f9e:	0004      	movs	r4, r0
 8002fa0:	0008      	movs	r0, r1
 8002fa2:	0011      	movs	r1, r2
 8002fa4:	001a      	movs	r2, r3
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	4d05      	ldr	r5, [pc, #20]	; (8002fc0 <_write_r+0x24>)
 8002faa:	602b      	str	r3, [r5, #0]
 8002fac:	f7fd fa40 	bl	8000430 <_write>
 8002fb0:	1c43      	adds	r3, r0, #1
 8002fb2:	d103      	bne.n	8002fbc <_write_r+0x20>
 8002fb4:	682b      	ldr	r3, [r5, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d000      	beq.n	8002fbc <_write_r+0x20>
 8002fba:	6023      	str	r3, [r4, #0]
 8002fbc:	bd70      	pop	{r4, r5, r6, pc}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	200003d4 	.word	0x200003d4

08002fc4 <__errno>:
 8002fc4:	4b01      	ldr	r3, [pc, #4]	; (8002fcc <__errno+0x8>)
 8002fc6:	6818      	ldr	r0, [r3, #0]
 8002fc8:	4770      	bx	lr
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	20000064 	.word	0x20000064

08002fd0 <__libc_init_array>:
 8002fd0:	b570      	push	{r4, r5, r6, lr}
 8002fd2:	2600      	movs	r6, #0
 8002fd4:	4c0c      	ldr	r4, [pc, #48]	; (8003008 <__libc_init_array+0x38>)
 8002fd6:	4d0d      	ldr	r5, [pc, #52]	; (800300c <__libc_init_array+0x3c>)
 8002fd8:	1b64      	subs	r4, r4, r5
 8002fda:	10a4      	asrs	r4, r4, #2
 8002fdc:	42a6      	cmp	r6, r4
 8002fde:	d109      	bne.n	8002ff4 <__libc_init_array+0x24>
 8002fe0:	2600      	movs	r6, #0
 8002fe2:	f000 fdc3 	bl	8003b6c <_init>
 8002fe6:	4c0a      	ldr	r4, [pc, #40]	; (8003010 <__libc_init_array+0x40>)
 8002fe8:	4d0a      	ldr	r5, [pc, #40]	; (8003014 <__libc_init_array+0x44>)
 8002fea:	1b64      	subs	r4, r4, r5
 8002fec:	10a4      	asrs	r4, r4, #2
 8002fee:	42a6      	cmp	r6, r4
 8002ff0:	d105      	bne.n	8002ffe <__libc_init_array+0x2e>
 8002ff2:	bd70      	pop	{r4, r5, r6, pc}
 8002ff4:	00b3      	lsls	r3, r6, #2
 8002ff6:	58eb      	ldr	r3, [r5, r3]
 8002ff8:	4798      	blx	r3
 8002ffa:	3601      	adds	r6, #1
 8002ffc:	e7ee      	b.n	8002fdc <__libc_init_array+0xc>
 8002ffe:	00b3      	lsls	r3, r6, #2
 8003000:	58eb      	ldr	r3, [r5, r3]
 8003002:	4798      	blx	r3
 8003004:	3601      	adds	r6, #1
 8003006:	e7f2      	b.n	8002fee <__libc_init_array+0x1e>
 8003008:	08003e10 	.word	0x08003e10
 800300c:	08003e10 	.word	0x08003e10
 8003010:	08003e14 	.word	0x08003e14
 8003014:	08003e10 	.word	0x08003e10

08003018 <__retarget_lock_acquire_recursive>:
 8003018:	4770      	bx	lr

0800301a <__retarget_lock_release_recursive>:
 800301a:	4770      	bx	lr

0800301c <__assert_func>:
 800301c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800301e:	0014      	movs	r4, r2
 8003020:	001a      	movs	r2, r3
 8003022:	4b09      	ldr	r3, [pc, #36]	; (8003048 <__assert_func+0x2c>)
 8003024:	0005      	movs	r5, r0
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	000e      	movs	r6, r1
 800302a:	68d8      	ldr	r0, [r3, #12]
 800302c:	4b07      	ldr	r3, [pc, #28]	; (800304c <__assert_func+0x30>)
 800302e:	2c00      	cmp	r4, #0
 8003030:	d101      	bne.n	8003036 <__assert_func+0x1a>
 8003032:	4b07      	ldr	r3, [pc, #28]	; (8003050 <__assert_func+0x34>)
 8003034:	001c      	movs	r4, r3
 8003036:	4907      	ldr	r1, [pc, #28]	; (8003054 <__assert_func+0x38>)
 8003038:	9301      	str	r3, [sp, #4]
 800303a:	9402      	str	r4, [sp, #8]
 800303c:	002b      	movs	r3, r5
 800303e:	9600      	str	r6, [sp, #0]
 8003040:	f000 fc8c 	bl	800395c <fiprintf>
 8003044:	f000 fd41 	bl	8003aca <abort>
 8003048:	20000064 	.word	0x20000064
 800304c:	08003c9d 	.word	0x08003c9d
 8003050:	08003cd8 	.word	0x08003cd8
 8003054:	08003caa 	.word	0x08003caa

08003058 <_free_r>:
 8003058:	b570      	push	{r4, r5, r6, lr}
 800305a:	0005      	movs	r5, r0
 800305c:	2900      	cmp	r1, #0
 800305e:	d010      	beq.n	8003082 <_free_r+0x2a>
 8003060:	1f0c      	subs	r4, r1, #4
 8003062:	6823      	ldr	r3, [r4, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	da00      	bge.n	800306a <_free_r+0x12>
 8003068:	18e4      	adds	r4, r4, r3
 800306a:	0028      	movs	r0, r5
 800306c:	f000 f8ec 	bl	8003248 <__malloc_lock>
 8003070:	4a1d      	ldr	r2, [pc, #116]	; (80030e8 <_free_r+0x90>)
 8003072:	6813      	ldr	r3, [r2, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d105      	bne.n	8003084 <_free_r+0x2c>
 8003078:	6063      	str	r3, [r4, #4]
 800307a:	6014      	str	r4, [r2, #0]
 800307c:	0028      	movs	r0, r5
 800307e:	f000 f8eb 	bl	8003258 <__malloc_unlock>
 8003082:	bd70      	pop	{r4, r5, r6, pc}
 8003084:	42a3      	cmp	r3, r4
 8003086:	d908      	bls.n	800309a <_free_r+0x42>
 8003088:	6820      	ldr	r0, [r4, #0]
 800308a:	1821      	adds	r1, r4, r0
 800308c:	428b      	cmp	r3, r1
 800308e:	d1f3      	bne.n	8003078 <_free_r+0x20>
 8003090:	6819      	ldr	r1, [r3, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	1809      	adds	r1, r1, r0
 8003096:	6021      	str	r1, [r4, #0]
 8003098:	e7ee      	b.n	8003078 <_free_r+0x20>
 800309a:	001a      	movs	r2, r3
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <_free_r+0x4e>
 80030a2:	42a3      	cmp	r3, r4
 80030a4:	d9f9      	bls.n	800309a <_free_r+0x42>
 80030a6:	6811      	ldr	r1, [r2, #0]
 80030a8:	1850      	adds	r0, r2, r1
 80030aa:	42a0      	cmp	r0, r4
 80030ac:	d10b      	bne.n	80030c6 <_free_r+0x6e>
 80030ae:	6820      	ldr	r0, [r4, #0]
 80030b0:	1809      	adds	r1, r1, r0
 80030b2:	1850      	adds	r0, r2, r1
 80030b4:	6011      	str	r1, [r2, #0]
 80030b6:	4283      	cmp	r3, r0
 80030b8:	d1e0      	bne.n	800307c <_free_r+0x24>
 80030ba:	6818      	ldr	r0, [r3, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	1841      	adds	r1, r0, r1
 80030c0:	6011      	str	r1, [r2, #0]
 80030c2:	6053      	str	r3, [r2, #4]
 80030c4:	e7da      	b.n	800307c <_free_r+0x24>
 80030c6:	42a0      	cmp	r0, r4
 80030c8:	d902      	bls.n	80030d0 <_free_r+0x78>
 80030ca:	230c      	movs	r3, #12
 80030cc:	602b      	str	r3, [r5, #0]
 80030ce:	e7d5      	b.n	800307c <_free_r+0x24>
 80030d0:	6820      	ldr	r0, [r4, #0]
 80030d2:	1821      	adds	r1, r4, r0
 80030d4:	428b      	cmp	r3, r1
 80030d6:	d103      	bne.n	80030e0 <_free_r+0x88>
 80030d8:	6819      	ldr	r1, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	1809      	adds	r1, r1, r0
 80030de:	6021      	str	r1, [r4, #0]
 80030e0:	6063      	str	r3, [r4, #4]
 80030e2:	6054      	str	r4, [r2, #4]
 80030e4:	e7ca      	b.n	800307c <_free_r+0x24>
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	200003dc 	.word	0x200003dc

080030ec <malloc>:
 80030ec:	b510      	push	{r4, lr}
 80030ee:	4b03      	ldr	r3, [pc, #12]	; (80030fc <malloc+0x10>)
 80030f0:	0001      	movs	r1, r0
 80030f2:	6818      	ldr	r0, [r3, #0]
 80030f4:	f000 f826 	bl	8003144 <_malloc_r>
 80030f8:	bd10      	pop	{r4, pc}
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	20000064 	.word	0x20000064

08003100 <sbrk_aligned>:
 8003100:	b570      	push	{r4, r5, r6, lr}
 8003102:	4e0f      	ldr	r6, [pc, #60]	; (8003140 <sbrk_aligned+0x40>)
 8003104:	000d      	movs	r5, r1
 8003106:	6831      	ldr	r1, [r6, #0]
 8003108:	0004      	movs	r4, r0
 800310a:	2900      	cmp	r1, #0
 800310c:	d102      	bne.n	8003114 <sbrk_aligned+0x14>
 800310e:	f000 fcbf 	bl	8003a90 <_sbrk_r>
 8003112:	6030      	str	r0, [r6, #0]
 8003114:	0029      	movs	r1, r5
 8003116:	0020      	movs	r0, r4
 8003118:	f000 fcba 	bl	8003a90 <_sbrk_r>
 800311c:	1c43      	adds	r3, r0, #1
 800311e:	d00a      	beq.n	8003136 <sbrk_aligned+0x36>
 8003120:	2303      	movs	r3, #3
 8003122:	1cc5      	adds	r5, r0, #3
 8003124:	439d      	bics	r5, r3
 8003126:	42a8      	cmp	r0, r5
 8003128:	d007      	beq.n	800313a <sbrk_aligned+0x3a>
 800312a:	1a29      	subs	r1, r5, r0
 800312c:	0020      	movs	r0, r4
 800312e:	f000 fcaf 	bl	8003a90 <_sbrk_r>
 8003132:	3001      	adds	r0, #1
 8003134:	d101      	bne.n	800313a <sbrk_aligned+0x3a>
 8003136:	2501      	movs	r5, #1
 8003138:	426d      	negs	r5, r5
 800313a:	0028      	movs	r0, r5
 800313c:	bd70      	pop	{r4, r5, r6, pc}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	200003e0 	.word	0x200003e0

08003144 <_malloc_r>:
 8003144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003146:	2203      	movs	r2, #3
 8003148:	1ccb      	adds	r3, r1, #3
 800314a:	4393      	bics	r3, r2
 800314c:	3308      	adds	r3, #8
 800314e:	0006      	movs	r6, r0
 8003150:	001f      	movs	r7, r3
 8003152:	2b0c      	cmp	r3, #12
 8003154:	d238      	bcs.n	80031c8 <_malloc_r+0x84>
 8003156:	270c      	movs	r7, #12
 8003158:	42b9      	cmp	r1, r7
 800315a:	d837      	bhi.n	80031cc <_malloc_r+0x88>
 800315c:	0030      	movs	r0, r6
 800315e:	f000 f873 	bl	8003248 <__malloc_lock>
 8003162:	4b38      	ldr	r3, [pc, #224]	; (8003244 <_malloc_r+0x100>)
 8003164:	9300      	str	r3, [sp, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	001c      	movs	r4, r3
 800316a:	2c00      	cmp	r4, #0
 800316c:	d133      	bne.n	80031d6 <_malloc_r+0x92>
 800316e:	0039      	movs	r1, r7
 8003170:	0030      	movs	r0, r6
 8003172:	f7ff ffc5 	bl	8003100 <sbrk_aligned>
 8003176:	0004      	movs	r4, r0
 8003178:	1c43      	adds	r3, r0, #1
 800317a:	d15e      	bne.n	800323a <_malloc_r+0xf6>
 800317c:	9b00      	ldr	r3, [sp, #0]
 800317e:	681c      	ldr	r4, [r3, #0]
 8003180:	0025      	movs	r5, r4
 8003182:	2d00      	cmp	r5, #0
 8003184:	d14e      	bne.n	8003224 <_malloc_r+0xe0>
 8003186:	2c00      	cmp	r4, #0
 8003188:	d051      	beq.n	800322e <_malloc_r+0xea>
 800318a:	6823      	ldr	r3, [r4, #0]
 800318c:	0029      	movs	r1, r5
 800318e:	18e3      	adds	r3, r4, r3
 8003190:	0030      	movs	r0, r6
 8003192:	9301      	str	r3, [sp, #4]
 8003194:	f000 fc7c 	bl	8003a90 <_sbrk_r>
 8003198:	9b01      	ldr	r3, [sp, #4]
 800319a:	4283      	cmp	r3, r0
 800319c:	d147      	bne.n	800322e <_malloc_r+0xea>
 800319e:	6823      	ldr	r3, [r4, #0]
 80031a0:	0030      	movs	r0, r6
 80031a2:	1aff      	subs	r7, r7, r3
 80031a4:	0039      	movs	r1, r7
 80031a6:	f7ff ffab 	bl	8003100 <sbrk_aligned>
 80031aa:	3001      	adds	r0, #1
 80031ac:	d03f      	beq.n	800322e <_malloc_r+0xea>
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	19db      	adds	r3, r3, r7
 80031b2:	6023      	str	r3, [r4, #0]
 80031b4:	9b00      	ldr	r3, [sp, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d040      	beq.n	800323e <_malloc_r+0xfa>
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	42a2      	cmp	r2, r4
 80031c0:	d133      	bne.n	800322a <_malloc_r+0xe6>
 80031c2:	2200      	movs	r2, #0
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	e014      	b.n	80031f2 <_malloc_r+0xae>
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	dac5      	bge.n	8003158 <_malloc_r+0x14>
 80031cc:	230c      	movs	r3, #12
 80031ce:	2500      	movs	r5, #0
 80031d0:	6033      	str	r3, [r6, #0]
 80031d2:	0028      	movs	r0, r5
 80031d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80031d6:	6821      	ldr	r1, [r4, #0]
 80031d8:	1bc9      	subs	r1, r1, r7
 80031da:	d420      	bmi.n	800321e <_malloc_r+0xda>
 80031dc:	290b      	cmp	r1, #11
 80031de:	d918      	bls.n	8003212 <_malloc_r+0xce>
 80031e0:	19e2      	adds	r2, r4, r7
 80031e2:	6027      	str	r7, [r4, #0]
 80031e4:	42a3      	cmp	r3, r4
 80031e6:	d112      	bne.n	800320e <_malloc_r+0xca>
 80031e8:	9b00      	ldr	r3, [sp, #0]
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	6863      	ldr	r3, [r4, #4]
 80031ee:	6011      	str	r1, [r2, #0]
 80031f0:	6053      	str	r3, [r2, #4]
 80031f2:	0030      	movs	r0, r6
 80031f4:	0025      	movs	r5, r4
 80031f6:	f000 f82f 	bl	8003258 <__malloc_unlock>
 80031fa:	2207      	movs	r2, #7
 80031fc:	350b      	adds	r5, #11
 80031fe:	1d23      	adds	r3, r4, #4
 8003200:	4395      	bics	r5, r2
 8003202:	1aea      	subs	r2, r5, r3
 8003204:	429d      	cmp	r5, r3
 8003206:	d0e4      	beq.n	80031d2 <_malloc_r+0x8e>
 8003208:	1b5b      	subs	r3, r3, r5
 800320a:	50a3      	str	r3, [r4, r2]
 800320c:	e7e1      	b.n	80031d2 <_malloc_r+0x8e>
 800320e:	605a      	str	r2, [r3, #4]
 8003210:	e7ec      	b.n	80031ec <_malloc_r+0xa8>
 8003212:	6862      	ldr	r2, [r4, #4]
 8003214:	42a3      	cmp	r3, r4
 8003216:	d1d5      	bne.n	80031c4 <_malloc_r+0x80>
 8003218:	9b00      	ldr	r3, [sp, #0]
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	e7e9      	b.n	80031f2 <_malloc_r+0xae>
 800321e:	0023      	movs	r3, r4
 8003220:	6864      	ldr	r4, [r4, #4]
 8003222:	e7a2      	b.n	800316a <_malloc_r+0x26>
 8003224:	002c      	movs	r4, r5
 8003226:	686d      	ldr	r5, [r5, #4]
 8003228:	e7ab      	b.n	8003182 <_malloc_r+0x3e>
 800322a:	0013      	movs	r3, r2
 800322c:	e7c4      	b.n	80031b8 <_malloc_r+0x74>
 800322e:	230c      	movs	r3, #12
 8003230:	0030      	movs	r0, r6
 8003232:	6033      	str	r3, [r6, #0]
 8003234:	f000 f810 	bl	8003258 <__malloc_unlock>
 8003238:	e7cb      	b.n	80031d2 <_malloc_r+0x8e>
 800323a:	6027      	str	r7, [r4, #0]
 800323c:	e7d9      	b.n	80031f2 <_malloc_r+0xae>
 800323e:	605b      	str	r3, [r3, #4]
 8003240:	deff      	udf	#255	; 0xff
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	200003dc 	.word	0x200003dc

08003248 <__malloc_lock>:
 8003248:	b510      	push	{r4, lr}
 800324a:	4802      	ldr	r0, [pc, #8]	; (8003254 <__malloc_lock+0xc>)
 800324c:	f7ff fee4 	bl	8003018 <__retarget_lock_acquire_recursive>
 8003250:	bd10      	pop	{r4, pc}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	200003d8 	.word	0x200003d8

08003258 <__malloc_unlock>:
 8003258:	b510      	push	{r4, lr}
 800325a:	4802      	ldr	r0, [pc, #8]	; (8003264 <__malloc_unlock+0xc>)
 800325c:	f7ff fedd 	bl	800301a <__retarget_lock_release_recursive>
 8003260:	bd10      	pop	{r4, pc}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	200003d8 	.word	0x200003d8

08003268 <__sfputc_r>:
 8003268:	6893      	ldr	r3, [r2, #8]
 800326a:	b510      	push	{r4, lr}
 800326c:	3b01      	subs	r3, #1
 800326e:	6093      	str	r3, [r2, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	da04      	bge.n	800327e <__sfputc_r+0x16>
 8003274:	6994      	ldr	r4, [r2, #24]
 8003276:	42a3      	cmp	r3, r4
 8003278:	db07      	blt.n	800328a <__sfputc_r+0x22>
 800327a:	290a      	cmp	r1, #10
 800327c:	d005      	beq.n	800328a <__sfputc_r+0x22>
 800327e:	6813      	ldr	r3, [r2, #0]
 8003280:	1c58      	adds	r0, r3, #1
 8003282:	6010      	str	r0, [r2, #0]
 8003284:	7019      	strb	r1, [r3, #0]
 8003286:	0008      	movs	r0, r1
 8003288:	bd10      	pop	{r4, pc}
 800328a:	f7ff fd21 	bl	8002cd0 <__swbuf_r>
 800328e:	0001      	movs	r1, r0
 8003290:	e7f9      	b.n	8003286 <__sfputc_r+0x1e>

08003292 <__sfputs_r>:
 8003292:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003294:	0006      	movs	r6, r0
 8003296:	000f      	movs	r7, r1
 8003298:	0014      	movs	r4, r2
 800329a:	18d5      	adds	r5, r2, r3
 800329c:	42ac      	cmp	r4, r5
 800329e:	d101      	bne.n	80032a4 <__sfputs_r+0x12>
 80032a0:	2000      	movs	r0, #0
 80032a2:	e007      	b.n	80032b4 <__sfputs_r+0x22>
 80032a4:	7821      	ldrb	r1, [r4, #0]
 80032a6:	003a      	movs	r2, r7
 80032a8:	0030      	movs	r0, r6
 80032aa:	f7ff ffdd 	bl	8003268 <__sfputc_r>
 80032ae:	3401      	adds	r4, #1
 80032b0:	1c43      	adds	r3, r0, #1
 80032b2:	d1f3      	bne.n	800329c <__sfputs_r+0xa>
 80032b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080032b8 <_vfiprintf_r>:
 80032b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ba:	b0a1      	sub	sp, #132	; 0x84
 80032bc:	000f      	movs	r7, r1
 80032be:	0015      	movs	r5, r2
 80032c0:	001e      	movs	r6, r3
 80032c2:	9003      	str	r0, [sp, #12]
 80032c4:	2800      	cmp	r0, #0
 80032c6:	d004      	beq.n	80032d2 <_vfiprintf_r+0x1a>
 80032c8:	6a03      	ldr	r3, [r0, #32]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d101      	bne.n	80032d2 <_vfiprintf_r+0x1a>
 80032ce:	f7ff fc0f 	bl	8002af0 <__sinit>
 80032d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032d4:	07db      	lsls	r3, r3, #31
 80032d6:	d405      	bmi.n	80032e4 <_vfiprintf_r+0x2c>
 80032d8:	89bb      	ldrh	r3, [r7, #12]
 80032da:	059b      	lsls	r3, r3, #22
 80032dc:	d402      	bmi.n	80032e4 <_vfiprintf_r+0x2c>
 80032de:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80032e0:	f7ff fe9a 	bl	8003018 <__retarget_lock_acquire_recursive>
 80032e4:	89bb      	ldrh	r3, [r7, #12]
 80032e6:	071b      	lsls	r3, r3, #28
 80032e8:	d502      	bpl.n	80032f0 <_vfiprintf_r+0x38>
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d113      	bne.n	8003318 <_vfiprintf_r+0x60>
 80032f0:	0039      	movs	r1, r7
 80032f2:	9803      	ldr	r0, [sp, #12]
 80032f4:	f7ff fd2e 	bl	8002d54 <__swsetup_r>
 80032f8:	2800      	cmp	r0, #0
 80032fa:	d00d      	beq.n	8003318 <_vfiprintf_r+0x60>
 80032fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032fe:	07db      	lsls	r3, r3, #31
 8003300:	d503      	bpl.n	800330a <_vfiprintf_r+0x52>
 8003302:	2001      	movs	r0, #1
 8003304:	4240      	negs	r0, r0
 8003306:	b021      	add	sp, #132	; 0x84
 8003308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800330a:	89bb      	ldrh	r3, [r7, #12]
 800330c:	059b      	lsls	r3, r3, #22
 800330e:	d4f8      	bmi.n	8003302 <_vfiprintf_r+0x4a>
 8003310:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003312:	f7ff fe82 	bl	800301a <__retarget_lock_release_recursive>
 8003316:	e7f4      	b.n	8003302 <_vfiprintf_r+0x4a>
 8003318:	2300      	movs	r3, #0
 800331a:	ac08      	add	r4, sp, #32
 800331c:	6163      	str	r3, [r4, #20]
 800331e:	3320      	adds	r3, #32
 8003320:	7663      	strb	r3, [r4, #25]
 8003322:	3310      	adds	r3, #16
 8003324:	76a3      	strb	r3, [r4, #26]
 8003326:	9607      	str	r6, [sp, #28]
 8003328:	002e      	movs	r6, r5
 800332a:	7833      	ldrb	r3, [r6, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <_vfiprintf_r+0x7c>
 8003330:	2b25      	cmp	r3, #37	; 0x25
 8003332:	d148      	bne.n	80033c6 <_vfiprintf_r+0x10e>
 8003334:	1b73      	subs	r3, r6, r5
 8003336:	9305      	str	r3, [sp, #20]
 8003338:	42ae      	cmp	r6, r5
 800333a:	d00b      	beq.n	8003354 <_vfiprintf_r+0x9c>
 800333c:	002a      	movs	r2, r5
 800333e:	0039      	movs	r1, r7
 8003340:	9803      	ldr	r0, [sp, #12]
 8003342:	f7ff ffa6 	bl	8003292 <__sfputs_r>
 8003346:	3001      	adds	r0, #1
 8003348:	d100      	bne.n	800334c <_vfiprintf_r+0x94>
 800334a:	e0af      	b.n	80034ac <_vfiprintf_r+0x1f4>
 800334c:	6963      	ldr	r3, [r4, #20]
 800334e:	9a05      	ldr	r2, [sp, #20]
 8003350:	189b      	adds	r3, r3, r2
 8003352:	6163      	str	r3, [r4, #20]
 8003354:	7833      	ldrb	r3, [r6, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d100      	bne.n	800335c <_vfiprintf_r+0xa4>
 800335a:	e0a7      	b.n	80034ac <_vfiprintf_r+0x1f4>
 800335c:	2201      	movs	r2, #1
 800335e:	2300      	movs	r3, #0
 8003360:	4252      	negs	r2, r2
 8003362:	6062      	str	r2, [r4, #4]
 8003364:	a904      	add	r1, sp, #16
 8003366:	3254      	adds	r2, #84	; 0x54
 8003368:	1852      	adds	r2, r2, r1
 800336a:	1c75      	adds	r5, r6, #1
 800336c:	6023      	str	r3, [r4, #0]
 800336e:	60e3      	str	r3, [r4, #12]
 8003370:	60a3      	str	r3, [r4, #8]
 8003372:	7013      	strb	r3, [r2, #0]
 8003374:	65a3      	str	r3, [r4, #88]	; 0x58
 8003376:	4b59      	ldr	r3, [pc, #356]	; (80034dc <_vfiprintf_r+0x224>)
 8003378:	2205      	movs	r2, #5
 800337a:	0018      	movs	r0, r3
 800337c:	7829      	ldrb	r1, [r5, #0]
 800337e:	9305      	str	r3, [sp, #20]
 8003380:	f000 fb98 	bl	8003ab4 <memchr>
 8003384:	1c6e      	adds	r6, r5, #1
 8003386:	2800      	cmp	r0, #0
 8003388:	d11f      	bne.n	80033ca <_vfiprintf_r+0x112>
 800338a:	6822      	ldr	r2, [r4, #0]
 800338c:	06d3      	lsls	r3, r2, #27
 800338e:	d504      	bpl.n	800339a <_vfiprintf_r+0xe2>
 8003390:	2353      	movs	r3, #83	; 0x53
 8003392:	a904      	add	r1, sp, #16
 8003394:	185b      	adds	r3, r3, r1
 8003396:	2120      	movs	r1, #32
 8003398:	7019      	strb	r1, [r3, #0]
 800339a:	0713      	lsls	r3, r2, #28
 800339c:	d504      	bpl.n	80033a8 <_vfiprintf_r+0xf0>
 800339e:	2353      	movs	r3, #83	; 0x53
 80033a0:	a904      	add	r1, sp, #16
 80033a2:	185b      	adds	r3, r3, r1
 80033a4:	212b      	movs	r1, #43	; 0x2b
 80033a6:	7019      	strb	r1, [r3, #0]
 80033a8:	782b      	ldrb	r3, [r5, #0]
 80033aa:	2b2a      	cmp	r3, #42	; 0x2a
 80033ac:	d016      	beq.n	80033dc <_vfiprintf_r+0x124>
 80033ae:	002e      	movs	r6, r5
 80033b0:	2100      	movs	r1, #0
 80033b2:	200a      	movs	r0, #10
 80033b4:	68e3      	ldr	r3, [r4, #12]
 80033b6:	7832      	ldrb	r2, [r6, #0]
 80033b8:	1c75      	adds	r5, r6, #1
 80033ba:	3a30      	subs	r2, #48	; 0x30
 80033bc:	2a09      	cmp	r2, #9
 80033be:	d94e      	bls.n	800345e <_vfiprintf_r+0x1a6>
 80033c0:	2900      	cmp	r1, #0
 80033c2:	d111      	bne.n	80033e8 <_vfiprintf_r+0x130>
 80033c4:	e017      	b.n	80033f6 <_vfiprintf_r+0x13e>
 80033c6:	3601      	adds	r6, #1
 80033c8:	e7af      	b.n	800332a <_vfiprintf_r+0x72>
 80033ca:	9b05      	ldr	r3, [sp, #20]
 80033cc:	6822      	ldr	r2, [r4, #0]
 80033ce:	1ac0      	subs	r0, r0, r3
 80033d0:	2301      	movs	r3, #1
 80033d2:	4083      	lsls	r3, r0
 80033d4:	4313      	orrs	r3, r2
 80033d6:	0035      	movs	r5, r6
 80033d8:	6023      	str	r3, [r4, #0]
 80033da:	e7cc      	b.n	8003376 <_vfiprintf_r+0xbe>
 80033dc:	9b07      	ldr	r3, [sp, #28]
 80033de:	1d19      	adds	r1, r3, #4
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	9107      	str	r1, [sp, #28]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	db01      	blt.n	80033ec <_vfiprintf_r+0x134>
 80033e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80033ea:	e004      	b.n	80033f6 <_vfiprintf_r+0x13e>
 80033ec:	425b      	negs	r3, r3
 80033ee:	60e3      	str	r3, [r4, #12]
 80033f0:	2302      	movs	r3, #2
 80033f2:	4313      	orrs	r3, r2
 80033f4:	6023      	str	r3, [r4, #0]
 80033f6:	7833      	ldrb	r3, [r6, #0]
 80033f8:	2b2e      	cmp	r3, #46	; 0x2e
 80033fa:	d10a      	bne.n	8003412 <_vfiprintf_r+0x15a>
 80033fc:	7873      	ldrb	r3, [r6, #1]
 80033fe:	2b2a      	cmp	r3, #42	; 0x2a
 8003400:	d135      	bne.n	800346e <_vfiprintf_r+0x1b6>
 8003402:	9b07      	ldr	r3, [sp, #28]
 8003404:	3602      	adds	r6, #2
 8003406:	1d1a      	adds	r2, r3, #4
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	9207      	str	r2, [sp, #28]
 800340c:	2b00      	cmp	r3, #0
 800340e:	db2b      	blt.n	8003468 <_vfiprintf_r+0x1b0>
 8003410:	9309      	str	r3, [sp, #36]	; 0x24
 8003412:	4d33      	ldr	r5, [pc, #204]	; (80034e0 <_vfiprintf_r+0x228>)
 8003414:	2203      	movs	r2, #3
 8003416:	0028      	movs	r0, r5
 8003418:	7831      	ldrb	r1, [r6, #0]
 800341a:	f000 fb4b 	bl	8003ab4 <memchr>
 800341e:	2800      	cmp	r0, #0
 8003420:	d006      	beq.n	8003430 <_vfiprintf_r+0x178>
 8003422:	2340      	movs	r3, #64	; 0x40
 8003424:	1b40      	subs	r0, r0, r5
 8003426:	4083      	lsls	r3, r0
 8003428:	6822      	ldr	r2, [r4, #0]
 800342a:	3601      	adds	r6, #1
 800342c:	4313      	orrs	r3, r2
 800342e:	6023      	str	r3, [r4, #0]
 8003430:	7831      	ldrb	r1, [r6, #0]
 8003432:	2206      	movs	r2, #6
 8003434:	482b      	ldr	r0, [pc, #172]	; (80034e4 <_vfiprintf_r+0x22c>)
 8003436:	1c75      	adds	r5, r6, #1
 8003438:	7621      	strb	r1, [r4, #24]
 800343a:	f000 fb3b 	bl	8003ab4 <memchr>
 800343e:	2800      	cmp	r0, #0
 8003440:	d043      	beq.n	80034ca <_vfiprintf_r+0x212>
 8003442:	4b29      	ldr	r3, [pc, #164]	; (80034e8 <_vfiprintf_r+0x230>)
 8003444:	2b00      	cmp	r3, #0
 8003446:	d125      	bne.n	8003494 <_vfiprintf_r+0x1dc>
 8003448:	2207      	movs	r2, #7
 800344a:	9b07      	ldr	r3, [sp, #28]
 800344c:	3307      	adds	r3, #7
 800344e:	4393      	bics	r3, r2
 8003450:	3308      	adds	r3, #8
 8003452:	9307      	str	r3, [sp, #28]
 8003454:	6963      	ldr	r3, [r4, #20]
 8003456:	9a04      	ldr	r2, [sp, #16]
 8003458:	189b      	adds	r3, r3, r2
 800345a:	6163      	str	r3, [r4, #20]
 800345c:	e764      	b.n	8003328 <_vfiprintf_r+0x70>
 800345e:	4343      	muls	r3, r0
 8003460:	002e      	movs	r6, r5
 8003462:	2101      	movs	r1, #1
 8003464:	189b      	adds	r3, r3, r2
 8003466:	e7a6      	b.n	80033b6 <_vfiprintf_r+0xfe>
 8003468:	2301      	movs	r3, #1
 800346a:	425b      	negs	r3, r3
 800346c:	e7d0      	b.n	8003410 <_vfiprintf_r+0x158>
 800346e:	2300      	movs	r3, #0
 8003470:	200a      	movs	r0, #10
 8003472:	001a      	movs	r2, r3
 8003474:	3601      	adds	r6, #1
 8003476:	6063      	str	r3, [r4, #4]
 8003478:	7831      	ldrb	r1, [r6, #0]
 800347a:	1c75      	adds	r5, r6, #1
 800347c:	3930      	subs	r1, #48	; 0x30
 800347e:	2909      	cmp	r1, #9
 8003480:	d903      	bls.n	800348a <_vfiprintf_r+0x1d2>
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0c5      	beq.n	8003412 <_vfiprintf_r+0x15a>
 8003486:	9209      	str	r2, [sp, #36]	; 0x24
 8003488:	e7c3      	b.n	8003412 <_vfiprintf_r+0x15a>
 800348a:	4342      	muls	r2, r0
 800348c:	002e      	movs	r6, r5
 800348e:	2301      	movs	r3, #1
 8003490:	1852      	adds	r2, r2, r1
 8003492:	e7f1      	b.n	8003478 <_vfiprintf_r+0x1c0>
 8003494:	aa07      	add	r2, sp, #28
 8003496:	9200      	str	r2, [sp, #0]
 8003498:	0021      	movs	r1, r4
 800349a:	003a      	movs	r2, r7
 800349c:	4b13      	ldr	r3, [pc, #76]	; (80034ec <_vfiprintf_r+0x234>)
 800349e:	9803      	ldr	r0, [sp, #12]
 80034a0:	e000      	b.n	80034a4 <_vfiprintf_r+0x1ec>
 80034a2:	bf00      	nop
 80034a4:	9004      	str	r0, [sp, #16]
 80034a6:	9b04      	ldr	r3, [sp, #16]
 80034a8:	3301      	adds	r3, #1
 80034aa:	d1d3      	bne.n	8003454 <_vfiprintf_r+0x19c>
 80034ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034ae:	07db      	lsls	r3, r3, #31
 80034b0:	d405      	bmi.n	80034be <_vfiprintf_r+0x206>
 80034b2:	89bb      	ldrh	r3, [r7, #12]
 80034b4:	059b      	lsls	r3, r3, #22
 80034b6:	d402      	bmi.n	80034be <_vfiprintf_r+0x206>
 80034b8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80034ba:	f7ff fdae 	bl	800301a <__retarget_lock_release_recursive>
 80034be:	89bb      	ldrh	r3, [r7, #12]
 80034c0:	065b      	lsls	r3, r3, #25
 80034c2:	d500      	bpl.n	80034c6 <_vfiprintf_r+0x20e>
 80034c4:	e71d      	b.n	8003302 <_vfiprintf_r+0x4a>
 80034c6:	980d      	ldr	r0, [sp, #52]	; 0x34
 80034c8:	e71d      	b.n	8003306 <_vfiprintf_r+0x4e>
 80034ca:	aa07      	add	r2, sp, #28
 80034cc:	9200      	str	r2, [sp, #0]
 80034ce:	0021      	movs	r1, r4
 80034d0:	003a      	movs	r2, r7
 80034d2:	4b06      	ldr	r3, [pc, #24]	; (80034ec <_vfiprintf_r+0x234>)
 80034d4:	9803      	ldr	r0, [sp, #12]
 80034d6:	f000 f87b 	bl	80035d0 <_printf_i>
 80034da:	e7e3      	b.n	80034a4 <_vfiprintf_r+0x1ec>
 80034dc:	08003dda 	.word	0x08003dda
 80034e0:	08003de0 	.word	0x08003de0
 80034e4:	08003de4 	.word	0x08003de4
 80034e8:	00000000 	.word	0x00000000
 80034ec:	08003293 	.word	0x08003293

080034f0 <_printf_common>:
 80034f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034f2:	0016      	movs	r6, r2
 80034f4:	9301      	str	r3, [sp, #4]
 80034f6:	688a      	ldr	r2, [r1, #8]
 80034f8:	690b      	ldr	r3, [r1, #16]
 80034fa:	000c      	movs	r4, r1
 80034fc:	9000      	str	r0, [sp, #0]
 80034fe:	4293      	cmp	r3, r2
 8003500:	da00      	bge.n	8003504 <_printf_common+0x14>
 8003502:	0013      	movs	r3, r2
 8003504:	0022      	movs	r2, r4
 8003506:	6033      	str	r3, [r6, #0]
 8003508:	3243      	adds	r2, #67	; 0x43
 800350a:	7812      	ldrb	r2, [r2, #0]
 800350c:	2a00      	cmp	r2, #0
 800350e:	d001      	beq.n	8003514 <_printf_common+0x24>
 8003510:	3301      	adds	r3, #1
 8003512:	6033      	str	r3, [r6, #0]
 8003514:	6823      	ldr	r3, [r4, #0]
 8003516:	069b      	lsls	r3, r3, #26
 8003518:	d502      	bpl.n	8003520 <_printf_common+0x30>
 800351a:	6833      	ldr	r3, [r6, #0]
 800351c:	3302      	adds	r3, #2
 800351e:	6033      	str	r3, [r6, #0]
 8003520:	6822      	ldr	r2, [r4, #0]
 8003522:	2306      	movs	r3, #6
 8003524:	0015      	movs	r5, r2
 8003526:	401d      	ands	r5, r3
 8003528:	421a      	tst	r2, r3
 800352a:	d027      	beq.n	800357c <_printf_common+0x8c>
 800352c:	0023      	movs	r3, r4
 800352e:	3343      	adds	r3, #67	; 0x43
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	1e5a      	subs	r2, r3, #1
 8003534:	4193      	sbcs	r3, r2
 8003536:	6822      	ldr	r2, [r4, #0]
 8003538:	0692      	lsls	r2, r2, #26
 800353a:	d430      	bmi.n	800359e <_printf_common+0xae>
 800353c:	0022      	movs	r2, r4
 800353e:	9901      	ldr	r1, [sp, #4]
 8003540:	9800      	ldr	r0, [sp, #0]
 8003542:	9d08      	ldr	r5, [sp, #32]
 8003544:	3243      	adds	r2, #67	; 0x43
 8003546:	47a8      	blx	r5
 8003548:	3001      	adds	r0, #1
 800354a:	d025      	beq.n	8003598 <_printf_common+0xa8>
 800354c:	2206      	movs	r2, #6
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	2500      	movs	r5, #0
 8003552:	4013      	ands	r3, r2
 8003554:	2b04      	cmp	r3, #4
 8003556:	d105      	bne.n	8003564 <_printf_common+0x74>
 8003558:	6833      	ldr	r3, [r6, #0]
 800355a:	68e5      	ldr	r5, [r4, #12]
 800355c:	1aed      	subs	r5, r5, r3
 800355e:	43eb      	mvns	r3, r5
 8003560:	17db      	asrs	r3, r3, #31
 8003562:	401d      	ands	r5, r3
 8003564:	68a3      	ldr	r3, [r4, #8]
 8003566:	6922      	ldr	r2, [r4, #16]
 8003568:	4293      	cmp	r3, r2
 800356a:	dd01      	ble.n	8003570 <_printf_common+0x80>
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	18ed      	adds	r5, r5, r3
 8003570:	2600      	movs	r6, #0
 8003572:	42b5      	cmp	r5, r6
 8003574:	d120      	bne.n	80035b8 <_printf_common+0xc8>
 8003576:	2000      	movs	r0, #0
 8003578:	e010      	b.n	800359c <_printf_common+0xac>
 800357a:	3501      	adds	r5, #1
 800357c:	68e3      	ldr	r3, [r4, #12]
 800357e:	6832      	ldr	r2, [r6, #0]
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	42ab      	cmp	r3, r5
 8003584:	ddd2      	ble.n	800352c <_printf_common+0x3c>
 8003586:	0022      	movs	r2, r4
 8003588:	2301      	movs	r3, #1
 800358a:	9901      	ldr	r1, [sp, #4]
 800358c:	9800      	ldr	r0, [sp, #0]
 800358e:	9f08      	ldr	r7, [sp, #32]
 8003590:	3219      	adds	r2, #25
 8003592:	47b8      	blx	r7
 8003594:	3001      	adds	r0, #1
 8003596:	d1f0      	bne.n	800357a <_printf_common+0x8a>
 8003598:	2001      	movs	r0, #1
 800359a:	4240      	negs	r0, r0
 800359c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800359e:	2030      	movs	r0, #48	; 0x30
 80035a0:	18e1      	adds	r1, r4, r3
 80035a2:	3143      	adds	r1, #67	; 0x43
 80035a4:	7008      	strb	r0, [r1, #0]
 80035a6:	0021      	movs	r1, r4
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	3145      	adds	r1, #69	; 0x45
 80035ac:	7809      	ldrb	r1, [r1, #0]
 80035ae:	18a2      	adds	r2, r4, r2
 80035b0:	3243      	adds	r2, #67	; 0x43
 80035b2:	3302      	adds	r3, #2
 80035b4:	7011      	strb	r1, [r2, #0]
 80035b6:	e7c1      	b.n	800353c <_printf_common+0x4c>
 80035b8:	0022      	movs	r2, r4
 80035ba:	2301      	movs	r3, #1
 80035bc:	9901      	ldr	r1, [sp, #4]
 80035be:	9800      	ldr	r0, [sp, #0]
 80035c0:	9f08      	ldr	r7, [sp, #32]
 80035c2:	321a      	adds	r2, #26
 80035c4:	47b8      	blx	r7
 80035c6:	3001      	adds	r0, #1
 80035c8:	d0e6      	beq.n	8003598 <_printf_common+0xa8>
 80035ca:	3601      	adds	r6, #1
 80035cc:	e7d1      	b.n	8003572 <_printf_common+0x82>
	...

080035d0 <_printf_i>:
 80035d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035d2:	b08b      	sub	sp, #44	; 0x2c
 80035d4:	9206      	str	r2, [sp, #24]
 80035d6:	000a      	movs	r2, r1
 80035d8:	3243      	adds	r2, #67	; 0x43
 80035da:	9307      	str	r3, [sp, #28]
 80035dc:	9005      	str	r0, [sp, #20]
 80035de:	9204      	str	r2, [sp, #16]
 80035e0:	7e0a      	ldrb	r2, [r1, #24]
 80035e2:	000c      	movs	r4, r1
 80035e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80035e6:	2a78      	cmp	r2, #120	; 0x78
 80035e8:	d809      	bhi.n	80035fe <_printf_i+0x2e>
 80035ea:	2a62      	cmp	r2, #98	; 0x62
 80035ec:	d80b      	bhi.n	8003606 <_printf_i+0x36>
 80035ee:	2a00      	cmp	r2, #0
 80035f0:	d100      	bne.n	80035f4 <_printf_i+0x24>
 80035f2:	e0be      	b.n	8003772 <_printf_i+0x1a2>
 80035f4:	497c      	ldr	r1, [pc, #496]	; (80037e8 <_printf_i+0x218>)
 80035f6:	9103      	str	r1, [sp, #12]
 80035f8:	2a58      	cmp	r2, #88	; 0x58
 80035fa:	d100      	bne.n	80035fe <_printf_i+0x2e>
 80035fc:	e093      	b.n	8003726 <_printf_i+0x156>
 80035fe:	0026      	movs	r6, r4
 8003600:	3642      	adds	r6, #66	; 0x42
 8003602:	7032      	strb	r2, [r6, #0]
 8003604:	e022      	b.n	800364c <_printf_i+0x7c>
 8003606:	0010      	movs	r0, r2
 8003608:	3863      	subs	r0, #99	; 0x63
 800360a:	2815      	cmp	r0, #21
 800360c:	d8f7      	bhi.n	80035fe <_printf_i+0x2e>
 800360e:	f7fc fd7b 	bl	8000108 <__gnu_thumb1_case_shi>
 8003612:	0016      	.short	0x0016
 8003614:	fff6001f 	.word	0xfff6001f
 8003618:	fff6fff6 	.word	0xfff6fff6
 800361c:	001ffff6 	.word	0x001ffff6
 8003620:	fff6fff6 	.word	0xfff6fff6
 8003624:	fff6fff6 	.word	0xfff6fff6
 8003628:	003600a3 	.word	0x003600a3
 800362c:	fff60083 	.word	0xfff60083
 8003630:	00b4fff6 	.word	0x00b4fff6
 8003634:	0036fff6 	.word	0x0036fff6
 8003638:	fff6fff6 	.word	0xfff6fff6
 800363c:	0087      	.short	0x0087
 800363e:	0026      	movs	r6, r4
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	3642      	adds	r6, #66	; 0x42
 8003644:	1d11      	adds	r1, r2, #4
 8003646:	6019      	str	r1, [r3, #0]
 8003648:	6813      	ldr	r3, [r2, #0]
 800364a:	7033      	strb	r3, [r6, #0]
 800364c:	2301      	movs	r3, #1
 800364e:	e0a2      	b.n	8003796 <_printf_i+0x1c6>
 8003650:	6818      	ldr	r0, [r3, #0]
 8003652:	6809      	ldr	r1, [r1, #0]
 8003654:	1d02      	adds	r2, r0, #4
 8003656:	060d      	lsls	r5, r1, #24
 8003658:	d50b      	bpl.n	8003672 <_printf_i+0xa2>
 800365a:	6805      	ldr	r5, [r0, #0]
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	2d00      	cmp	r5, #0
 8003660:	da03      	bge.n	800366a <_printf_i+0x9a>
 8003662:	232d      	movs	r3, #45	; 0x2d
 8003664:	9a04      	ldr	r2, [sp, #16]
 8003666:	426d      	negs	r5, r5
 8003668:	7013      	strb	r3, [r2, #0]
 800366a:	4b5f      	ldr	r3, [pc, #380]	; (80037e8 <_printf_i+0x218>)
 800366c:	270a      	movs	r7, #10
 800366e:	9303      	str	r3, [sp, #12]
 8003670:	e01b      	b.n	80036aa <_printf_i+0xda>
 8003672:	6805      	ldr	r5, [r0, #0]
 8003674:	601a      	str	r2, [r3, #0]
 8003676:	0649      	lsls	r1, r1, #25
 8003678:	d5f1      	bpl.n	800365e <_printf_i+0x8e>
 800367a:	b22d      	sxth	r5, r5
 800367c:	e7ef      	b.n	800365e <_printf_i+0x8e>
 800367e:	680d      	ldr	r5, [r1, #0]
 8003680:	6819      	ldr	r1, [r3, #0]
 8003682:	1d08      	adds	r0, r1, #4
 8003684:	6018      	str	r0, [r3, #0]
 8003686:	062e      	lsls	r6, r5, #24
 8003688:	d501      	bpl.n	800368e <_printf_i+0xbe>
 800368a:	680d      	ldr	r5, [r1, #0]
 800368c:	e003      	b.n	8003696 <_printf_i+0xc6>
 800368e:	066d      	lsls	r5, r5, #25
 8003690:	d5fb      	bpl.n	800368a <_printf_i+0xba>
 8003692:	680d      	ldr	r5, [r1, #0]
 8003694:	b2ad      	uxth	r5, r5
 8003696:	4b54      	ldr	r3, [pc, #336]	; (80037e8 <_printf_i+0x218>)
 8003698:	2708      	movs	r7, #8
 800369a:	9303      	str	r3, [sp, #12]
 800369c:	2a6f      	cmp	r2, #111	; 0x6f
 800369e:	d000      	beq.n	80036a2 <_printf_i+0xd2>
 80036a0:	3702      	adds	r7, #2
 80036a2:	0023      	movs	r3, r4
 80036a4:	2200      	movs	r2, #0
 80036a6:	3343      	adds	r3, #67	; 0x43
 80036a8:	701a      	strb	r2, [r3, #0]
 80036aa:	6863      	ldr	r3, [r4, #4]
 80036ac:	60a3      	str	r3, [r4, #8]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	db03      	blt.n	80036ba <_printf_i+0xea>
 80036b2:	2104      	movs	r1, #4
 80036b4:	6822      	ldr	r2, [r4, #0]
 80036b6:	438a      	bics	r2, r1
 80036b8:	6022      	str	r2, [r4, #0]
 80036ba:	2d00      	cmp	r5, #0
 80036bc:	d102      	bne.n	80036c4 <_printf_i+0xf4>
 80036be:	9e04      	ldr	r6, [sp, #16]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00c      	beq.n	80036de <_printf_i+0x10e>
 80036c4:	9e04      	ldr	r6, [sp, #16]
 80036c6:	0028      	movs	r0, r5
 80036c8:	0039      	movs	r1, r7
 80036ca:	f7fc fdad 	bl	8000228 <__aeabi_uidivmod>
 80036ce:	9b03      	ldr	r3, [sp, #12]
 80036d0:	3e01      	subs	r6, #1
 80036d2:	5c5b      	ldrb	r3, [r3, r1]
 80036d4:	7033      	strb	r3, [r6, #0]
 80036d6:	002b      	movs	r3, r5
 80036d8:	0005      	movs	r5, r0
 80036da:	429f      	cmp	r7, r3
 80036dc:	d9f3      	bls.n	80036c6 <_printf_i+0xf6>
 80036de:	2f08      	cmp	r7, #8
 80036e0:	d109      	bne.n	80036f6 <_printf_i+0x126>
 80036e2:	6823      	ldr	r3, [r4, #0]
 80036e4:	07db      	lsls	r3, r3, #31
 80036e6:	d506      	bpl.n	80036f6 <_printf_i+0x126>
 80036e8:	6862      	ldr	r2, [r4, #4]
 80036ea:	6923      	ldr	r3, [r4, #16]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	dc02      	bgt.n	80036f6 <_printf_i+0x126>
 80036f0:	2330      	movs	r3, #48	; 0x30
 80036f2:	3e01      	subs	r6, #1
 80036f4:	7033      	strb	r3, [r6, #0]
 80036f6:	9b04      	ldr	r3, [sp, #16]
 80036f8:	1b9b      	subs	r3, r3, r6
 80036fa:	6123      	str	r3, [r4, #16]
 80036fc:	9b07      	ldr	r3, [sp, #28]
 80036fe:	0021      	movs	r1, r4
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	9805      	ldr	r0, [sp, #20]
 8003704:	9b06      	ldr	r3, [sp, #24]
 8003706:	aa09      	add	r2, sp, #36	; 0x24
 8003708:	f7ff fef2 	bl	80034f0 <_printf_common>
 800370c:	3001      	adds	r0, #1
 800370e:	d147      	bne.n	80037a0 <_printf_i+0x1d0>
 8003710:	2001      	movs	r0, #1
 8003712:	4240      	negs	r0, r0
 8003714:	b00b      	add	sp, #44	; 0x2c
 8003716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003718:	2220      	movs	r2, #32
 800371a:	6809      	ldr	r1, [r1, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	6022      	str	r2, [r4, #0]
 8003720:	2278      	movs	r2, #120	; 0x78
 8003722:	4932      	ldr	r1, [pc, #200]	; (80037ec <_printf_i+0x21c>)
 8003724:	9103      	str	r1, [sp, #12]
 8003726:	0021      	movs	r1, r4
 8003728:	3145      	adds	r1, #69	; 0x45
 800372a:	700a      	strb	r2, [r1, #0]
 800372c:	6819      	ldr	r1, [r3, #0]
 800372e:	6822      	ldr	r2, [r4, #0]
 8003730:	c920      	ldmia	r1!, {r5}
 8003732:	0610      	lsls	r0, r2, #24
 8003734:	d402      	bmi.n	800373c <_printf_i+0x16c>
 8003736:	0650      	lsls	r0, r2, #25
 8003738:	d500      	bpl.n	800373c <_printf_i+0x16c>
 800373a:	b2ad      	uxth	r5, r5
 800373c:	6019      	str	r1, [r3, #0]
 800373e:	07d3      	lsls	r3, r2, #31
 8003740:	d502      	bpl.n	8003748 <_printf_i+0x178>
 8003742:	2320      	movs	r3, #32
 8003744:	4313      	orrs	r3, r2
 8003746:	6023      	str	r3, [r4, #0]
 8003748:	2710      	movs	r7, #16
 800374a:	2d00      	cmp	r5, #0
 800374c:	d1a9      	bne.n	80036a2 <_printf_i+0xd2>
 800374e:	2220      	movs	r2, #32
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	4393      	bics	r3, r2
 8003754:	6023      	str	r3, [r4, #0]
 8003756:	e7a4      	b.n	80036a2 <_printf_i+0xd2>
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	680d      	ldr	r5, [r1, #0]
 800375c:	1d10      	adds	r0, r2, #4
 800375e:	6949      	ldr	r1, [r1, #20]
 8003760:	6018      	str	r0, [r3, #0]
 8003762:	6813      	ldr	r3, [r2, #0]
 8003764:	062e      	lsls	r6, r5, #24
 8003766:	d501      	bpl.n	800376c <_printf_i+0x19c>
 8003768:	6019      	str	r1, [r3, #0]
 800376a:	e002      	b.n	8003772 <_printf_i+0x1a2>
 800376c:	066d      	lsls	r5, r5, #25
 800376e:	d5fb      	bpl.n	8003768 <_printf_i+0x198>
 8003770:	8019      	strh	r1, [r3, #0]
 8003772:	2300      	movs	r3, #0
 8003774:	9e04      	ldr	r6, [sp, #16]
 8003776:	6123      	str	r3, [r4, #16]
 8003778:	e7c0      	b.n	80036fc <_printf_i+0x12c>
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	1d11      	adds	r1, r2, #4
 800377e:	6019      	str	r1, [r3, #0]
 8003780:	6816      	ldr	r6, [r2, #0]
 8003782:	2100      	movs	r1, #0
 8003784:	0030      	movs	r0, r6
 8003786:	6862      	ldr	r2, [r4, #4]
 8003788:	f000 f994 	bl	8003ab4 <memchr>
 800378c:	2800      	cmp	r0, #0
 800378e:	d001      	beq.n	8003794 <_printf_i+0x1c4>
 8003790:	1b80      	subs	r0, r0, r6
 8003792:	6060      	str	r0, [r4, #4]
 8003794:	6863      	ldr	r3, [r4, #4]
 8003796:	6123      	str	r3, [r4, #16]
 8003798:	2300      	movs	r3, #0
 800379a:	9a04      	ldr	r2, [sp, #16]
 800379c:	7013      	strb	r3, [r2, #0]
 800379e:	e7ad      	b.n	80036fc <_printf_i+0x12c>
 80037a0:	0032      	movs	r2, r6
 80037a2:	6923      	ldr	r3, [r4, #16]
 80037a4:	9906      	ldr	r1, [sp, #24]
 80037a6:	9805      	ldr	r0, [sp, #20]
 80037a8:	9d07      	ldr	r5, [sp, #28]
 80037aa:	47a8      	blx	r5
 80037ac:	3001      	adds	r0, #1
 80037ae:	d0af      	beq.n	8003710 <_printf_i+0x140>
 80037b0:	6823      	ldr	r3, [r4, #0]
 80037b2:	079b      	lsls	r3, r3, #30
 80037b4:	d415      	bmi.n	80037e2 <_printf_i+0x212>
 80037b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037b8:	68e0      	ldr	r0, [r4, #12]
 80037ba:	4298      	cmp	r0, r3
 80037bc:	daaa      	bge.n	8003714 <_printf_i+0x144>
 80037be:	0018      	movs	r0, r3
 80037c0:	e7a8      	b.n	8003714 <_printf_i+0x144>
 80037c2:	0022      	movs	r2, r4
 80037c4:	2301      	movs	r3, #1
 80037c6:	9906      	ldr	r1, [sp, #24]
 80037c8:	9805      	ldr	r0, [sp, #20]
 80037ca:	9e07      	ldr	r6, [sp, #28]
 80037cc:	3219      	adds	r2, #25
 80037ce:	47b0      	blx	r6
 80037d0:	3001      	adds	r0, #1
 80037d2:	d09d      	beq.n	8003710 <_printf_i+0x140>
 80037d4:	3501      	adds	r5, #1
 80037d6:	68e3      	ldr	r3, [r4, #12]
 80037d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	42ab      	cmp	r3, r5
 80037de:	dcf0      	bgt.n	80037c2 <_printf_i+0x1f2>
 80037e0:	e7e9      	b.n	80037b6 <_printf_i+0x1e6>
 80037e2:	2500      	movs	r5, #0
 80037e4:	e7f7      	b.n	80037d6 <_printf_i+0x206>
 80037e6:	46c0      	nop			; (mov r8, r8)
 80037e8:	08003deb 	.word	0x08003deb
 80037ec:	08003dfc 	.word	0x08003dfc

080037f0 <__sflush_r>:
 80037f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037f2:	898b      	ldrh	r3, [r1, #12]
 80037f4:	0005      	movs	r5, r0
 80037f6:	000c      	movs	r4, r1
 80037f8:	071a      	lsls	r2, r3, #28
 80037fa:	d45c      	bmi.n	80038b6 <__sflush_r+0xc6>
 80037fc:	684a      	ldr	r2, [r1, #4]
 80037fe:	2a00      	cmp	r2, #0
 8003800:	dc04      	bgt.n	800380c <__sflush_r+0x1c>
 8003802:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003804:	2a00      	cmp	r2, #0
 8003806:	dc01      	bgt.n	800380c <__sflush_r+0x1c>
 8003808:	2000      	movs	r0, #0
 800380a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800380c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800380e:	2f00      	cmp	r7, #0
 8003810:	d0fa      	beq.n	8003808 <__sflush_r+0x18>
 8003812:	2200      	movs	r2, #0
 8003814:	2080      	movs	r0, #128	; 0x80
 8003816:	682e      	ldr	r6, [r5, #0]
 8003818:	602a      	str	r2, [r5, #0]
 800381a:	001a      	movs	r2, r3
 800381c:	0140      	lsls	r0, r0, #5
 800381e:	6a21      	ldr	r1, [r4, #32]
 8003820:	4002      	ands	r2, r0
 8003822:	4203      	tst	r3, r0
 8003824:	d034      	beq.n	8003890 <__sflush_r+0xa0>
 8003826:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003828:	89a3      	ldrh	r3, [r4, #12]
 800382a:	075b      	lsls	r3, r3, #29
 800382c:	d506      	bpl.n	800383c <__sflush_r+0x4c>
 800382e:	6863      	ldr	r3, [r4, #4]
 8003830:	1ac0      	subs	r0, r0, r3
 8003832:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <__sflush_r+0x4c>
 8003838:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800383a:	1ac0      	subs	r0, r0, r3
 800383c:	0002      	movs	r2, r0
 800383e:	2300      	movs	r3, #0
 8003840:	0028      	movs	r0, r5
 8003842:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003844:	6a21      	ldr	r1, [r4, #32]
 8003846:	47b8      	blx	r7
 8003848:	89a2      	ldrh	r2, [r4, #12]
 800384a:	1c43      	adds	r3, r0, #1
 800384c:	d106      	bne.n	800385c <__sflush_r+0x6c>
 800384e:	6829      	ldr	r1, [r5, #0]
 8003850:	291d      	cmp	r1, #29
 8003852:	d82c      	bhi.n	80038ae <__sflush_r+0xbe>
 8003854:	4b2a      	ldr	r3, [pc, #168]	; (8003900 <__sflush_r+0x110>)
 8003856:	410b      	asrs	r3, r1
 8003858:	07db      	lsls	r3, r3, #31
 800385a:	d428      	bmi.n	80038ae <__sflush_r+0xbe>
 800385c:	2300      	movs	r3, #0
 800385e:	6063      	str	r3, [r4, #4]
 8003860:	6923      	ldr	r3, [r4, #16]
 8003862:	6023      	str	r3, [r4, #0]
 8003864:	04d2      	lsls	r2, r2, #19
 8003866:	d505      	bpl.n	8003874 <__sflush_r+0x84>
 8003868:	1c43      	adds	r3, r0, #1
 800386a:	d102      	bne.n	8003872 <__sflush_r+0x82>
 800386c:	682b      	ldr	r3, [r5, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d100      	bne.n	8003874 <__sflush_r+0x84>
 8003872:	6560      	str	r0, [r4, #84]	; 0x54
 8003874:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003876:	602e      	str	r6, [r5, #0]
 8003878:	2900      	cmp	r1, #0
 800387a:	d0c5      	beq.n	8003808 <__sflush_r+0x18>
 800387c:	0023      	movs	r3, r4
 800387e:	3344      	adds	r3, #68	; 0x44
 8003880:	4299      	cmp	r1, r3
 8003882:	d002      	beq.n	800388a <__sflush_r+0x9a>
 8003884:	0028      	movs	r0, r5
 8003886:	f7ff fbe7 	bl	8003058 <_free_r>
 800388a:	2000      	movs	r0, #0
 800388c:	6360      	str	r0, [r4, #52]	; 0x34
 800388e:	e7bc      	b.n	800380a <__sflush_r+0x1a>
 8003890:	2301      	movs	r3, #1
 8003892:	0028      	movs	r0, r5
 8003894:	47b8      	blx	r7
 8003896:	1c43      	adds	r3, r0, #1
 8003898:	d1c6      	bne.n	8003828 <__sflush_r+0x38>
 800389a:	682b      	ldr	r3, [r5, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0c3      	beq.n	8003828 <__sflush_r+0x38>
 80038a0:	2b1d      	cmp	r3, #29
 80038a2:	d001      	beq.n	80038a8 <__sflush_r+0xb8>
 80038a4:	2b16      	cmp	r3, #22
 80038a6:	d101      	bne.n	80038ac <__sflush_r+0xbc>
 80038a8:	602e      	str	r6, [r5, #0]
 80038aa:	e7ad      	b.n	8003808 <__sflush_r+0x18>
 80038ac:	89a2      	ldrh	r2, [r4, #12]
 80038ae:	2340      	movs	r3, #64	; 0x40
 80038b0:	4313      	orrs	r3, r2
 80038b2:	81a3      	strh	r3, [r4, #12]
 80038b4:	e7a9      	b.n	800380a <__sflush_r+0x1a>
 80038b6:	690e      	ldr	r6, [r1, #16]
 80038b8:	2e00      	cmp	r6, #0
 80038ba:	d0a5      	beq.n	8003808 <__sflush_r+0x18>
 80038bc:	680f      	ldr	r7, [r1, #0]
 80038be:	600e      	str	r6, [r1, #0]
 80038c0:	1bba      	subs	r2, r7, r6
 80038c2:	9201      	str	r2, [sp, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	079b      	lsls	r3, r3, #30
 80038c8:	d100      	bne.n	80038cc <__sflush_r+0xdc>
 80038ca:	694a      	ldr	r2, [r1, #20]
 80038cc:	60a2      	str	r2, [r4, #8]
 80038ce:	9b01      	ldr	r3, [sp, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	dd99      	ble.n	8003808 <__sflush_r+0x18>
 80038d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80038d6:	0032      	movs	r2, r6
 80038d8:	001f      	movs	r7, r3
 80038da:	0028      	movs	r0, r5
 80038dc:	9b01      	ldr	r3, [sp, #4]
 80038de:	6a21      	ldr	r1, [r4, #32]
 80038e0:	47b8      	blx	r7
 80038e2:	2800      	cmp	r0, #0
 80038e4:	dc06      	bgt.n	80038f4 <__sflush_r+0x104>
 80038e6:	2340      	movs	r3, #64	; 0x40
 80038e8:	2001      	movs	r0, #1
 80038ea:	89a2      	ldrh	r2, [r4, #12]
 80038ec:	4240      	negs	r0, r0
 80038ee:	4313      	orrs	r3, r2
 80038f0:	81a3      	strh	r3, [r4, #12]
 80038f2:	e78a      	b.n	800380a <__sflush_r+0x1a>
 80038f4:	9b01      	ldr	r3, [sp, #4]
 80038f6:	1836      	adds	r6, r6, r0
 80038f8:	1a1b      	subs	r3, r3, r0
 80038fa:	9301      	str	r3, [sp, #4]
 80038fc:	e7e7      	b.n	80038ce <__sflush_r+0xde>
 80038fe:	46c0      	nop			; (mov r8, r8)
 8003900:	dfbffffe 	.word	0xdfbffffe

08003904 <_fflush_r>:
 8003904:	690b      	ldr	r3, [r1, #16]
 8003906:	b570      	push	{r4, r5, r6, lr}
 8003908:	0005      	movs	r5, r0
 800390a:	000c      	movs	r4, r1
 800390c:	2b00      	cmp	r3, #0
 800390e:	d102      	bne.n	8003916 <_fflush_r+0x12>
 8003910:	2500      	movs	r5, #0
 8003912:	0028      	movs	r0, r5
 8003914:	bd70      	pop	{r4, r5, r6, pc}
 8003916:	2800      	cmp	r0, #0
 8003918:	d004      	beq.n	8003924 <_fflush_r+0x20>
 800391a:	6a03      	ldr	r3, [r0, #32]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <_fflush_r+0x20>
 8003920:	f7ff f8e6 	bl	8002af0 <__sinit>
 8003924:	220c      	movs	r2, #12
 8003926:	5ea3      	ldrsh	r3, [r4, r2]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0f1      	beq.n	8003910 <_fflush_r+0xc>
 800392c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800392e:	07d2      	lsls	r2, r2, #31
 8003930:	d404      	bmi.n	800393c <_fflush_r+0x38>
 8003932:	059b      	lsls	r3, r3, #22
 8003934:	d402      	bmi.n	800393c <_fflush_r+0x38>
 8003936:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003938:	f7ff fb6e 	bl	8003018 <__retarget_lock_acquire_recursive>
 800393c:	0028      	movs	r0, r5
 800393e:	0021      	movs	r1, r4
 8003940:	f7ff ff56 	bl	80037f0 <__sflush_r>
 8003944:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003946:	0005      	movs	r5, r0
 8003948:	07db      	lsls	r3, r3, #31
 800394a:	d4e2      	bmi.n	8003912 <_fflush_r+0xe>
 800394c:	89a3      	ldrh	r3, [r4, #12]
 800394e:	059b      	lsls	r3, r3, #22
 8003950:	d4df      	bmi.n	8003912 <_fflush_r+0xe>
 8003952:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003954:	f7ff fb61 	bl	800301a <__retarget_lock_release_recursive>
 8003958:	e7db      	b.n	8003912 <_fflush_r+0xe>
	...

0800395c <fiprintf>:
 800395c:	b40e      	push	{r1, r2, r3}
 800395e:	b517      	push	{r0, r1, r2, r4, lr}
 8003960:	4c05      	ldr	r4, [pc, #20]	; (8003978 <fiprintf+0x1c>)
 8003962:	ab05      	add	r3, sp, #20
 8003964:	cb04      	ldmia	r3!, {r2}
 8003966:	0001      	movs	r1, r0
 8003968:	6820      	ldr	r0, [r4, #0]
 800396a:	9301      	str	r3, [sp, #4]
 800396c:	f7ff fca4 	bl	80032b8 <_vfiprintf_r>
 8003970:	bc1e      	pop	{r1, r2, r3, r4}
 8003972:	bc08      	pop	{r3}
 8003974:	b003      	add	sp, #12
 8003976:	4718      	bx	r3
 8003978:	20000064 	.word	0x20000064

0800397c <__swhatbuf_r>:
 800397c:	b570      	push	{r4, r5, r6, lr}
 800397e:	000e      	movs	r6, r1
 8003980:	001d      	movs	r5, r3
 8003982:	230e      	movs	r3, #14
 8003984:	5ec9      	ldrsh	r1, [r1, r3]
 8003986:	0014      	movs	r4, r2
 8003988:	b096      	sub	sp, #88	; 0x58
 800398a:	2900      	cmp	r1, #0
 800398c:	da0c      	bge.n	80039a8 <__swhatbuf_r+0x2c>
 800398e:	89b2      	ldrh	r2, [r6, #12]
 8003990:	2380      	movs	r3, #128	; 0x80
 8003992:	0011      	movs	r1, r2
 8003994:	4019      	ands	r1, r3
 8003996:	421a      	tst	r2, r3
 8003998:	d013      	beq.n	80039c2 <__swhatbuf_r+0x46>
 800399a:	2100      	movs	r1, #0
 800399c:	3b40      	subs	r3, #64	; 0x40
 800399e:	2000      	movs	r0, #0
 80039a0:	6029      	str	r1, [r5, #0]
 80039a2:	6023      	str	r3, [r4, #0]
 80039a4:	b016      	add	sp, #88	; 0x58
 80039a6:	bd70      	pop	{r4, r5, r6, pc}
 80039a8:	466a      	mov	r2, sp
 80039aa:	f000 f84d 	bl	8003a48 <_fstat_r>
 80039ae:	2800      	cmp	r0, #0
 80039b0:	dbed      	blt.n	800398e <__swhatbuf_r+0x12>
 80039b2:	23f0      	movs	r3, #240	; 0xf0
 80039b4:	9901      	ldr	r1, [sp, #4]
 80039b6:	021b      	lsls	r3, r3, #8
 80039b8:	4019      	ands	r1, r3
 80039ba:	4b03      	ldr	r3, [pc, #12]	; (80039c8 <__swhatbuf_r+0x4c>)
 80039bc:	18c9      	adds	r1, r1, r3
 80039be:	424b      	negs	r3, r1
 80039c0:	4159      	adcs	r1, r3
 80039c2:	2380      	movs	r3, #128	; 0x80
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	e7ea      	b.n	800399e <__swhatbuf_r+0x22>
 80039c8:	ffffe000 	.word	0xffffe000

080039cc <__smakebuf_r>:
 80039cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039ce:	2602      	movs	r6, #2
 80039d0:	898b      	ldrh	r3, [r1, #12]
 80039d2:	0005      	movs	r5, r0
 80039d4:	000c      	movs	r4, r1
 80039d6:	4233      	tst	r3, r6
 80039d8:	d006      	beq.n	80039e8 <__smakebuf_r+0x1c>
 80039da:	0023      	movs	r3, r4
 80039dc:	3347      	adds	r3, #71	; 0x47
 80039de:	6023      	str	r3, [r4, #0]
 80039e0:	6123      	str	r3, [r4, #16]
 80039e2:	2301      	movs	r3, #1
 80039e4:	6163      	str	r3, [r4, #20]
 80039e6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80039e8:	466a      	mov	r2, sp
 80039ea:	ab01      	add	r3, sp, #4
 80039ec:	f7ff ffc6 	bl	800397c <__swhatbuf_r>
 80039f0:	9900      	ldr	r1, [sp, #0]
 80039f2:	0007      	movs	r7, r0
 80039f4:	0028      	movs	r0, r5
 80039f6:	f7ff fba5 	bl	8003144 <_malloc_r>
 80039fa:	2800      	cmp	r0, #0
 80039fc:	d108      	bne.n	8003a10 <__smakebuf_r+0x44>
 80039fe:	220c      	movs	r2, #12
 8003a00:	5ea3      	ldrsh	r3, [r4, r2]
 8003a02:	059a      	lsls	r2, r3, #22
 8003a04:	d4ef      	bmi.n	80039e6 <__smakebuf_r+0x1a>
 8003a06:	2203      	movs	r2, #3
 8003a08:	4393      	bics	r3, r2
 8003a0a:	431e      	orrs	r6, r3
 8003a0c:	81a6      	strh	r6, [r4, #12]
 8003a0e:	e7e4      	b.n	80039da <__smakebuf_r+0xe>
 8003a10:	2380      	movs	r3, #128	; 0x80
 8003a12:	89a2      	ldrh	r2, [r4, #12]
 8003a14:	6020      	str	r0, [r4, #0]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	81a3      	strh	r3, [r4, #12]
 8003a1a:	9b00      	ldr	r3, [sp, #0]
 8003a1c:	6120      	str	r0, [r4, #16]
 8003a1e:	6163      	str	r3, [r4, #20]
 8003a20:	9b01      	ldr	r3, [sp, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00c      	beq.n	8003a40 <__smakebuf_r+0x74>
 8003a26:	0028      	movs	r0, r5
 8003a28:	230e      	movs	r3, #14
 8003a2a:	5ee1      	ldrsh	r1, [r4, r3]
 8003a2c:	f000 f81e 	bl	8003a6c <_isatty_r>
 8003a30:	2800      	cmp	r0, #0
 8003a32:	d005      	beq.n	8003a40 <__smakebuf_r+0x74>
 8003a34:	2303      	movs	r3, #3
 8003a36:	89a2      	ldrh	r2, [r4, #12]
 8003a38:	439a      	bics	r2, r3
 8003a3a:	3b02      	subs	r3, #2
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	81a3      	strh	r3, [r4, #12]
 8003a40:	89a3      	ldrh	r3, [r4, #12]
 8003a42:	433b      	orrs	r3, r7
 8003a44:	81a3      	strh	r3, [r4, #12]
 8003a46:	e7ce      	b.n	80039e6 <__smakebuf_r+0x1a>

08003a48 <_fstat_r>:
 8003a48:	2300      	movs	r3, #0
 8003a4a:	b570      	push	{r4, r5, r6, lr}
 8003a4c:	4d06      	ldr	r5, [pc, #24]	; (8003a68 <_fstat_r+0x20>)
 8003a4e:	0004      	movs	r4, r0
 8003a50:	0008      	movs	r0, r1
 8003a52:	0011      	movs	r1, r2
 8003a54:	602b      	str	r3, [r5, #0]
 8003a56:	f7fc ffb8 	bl	80009ca <_fstat>
 8003a5a:	1c43      	adds	r3, r0, #1
 8003a5c:	d103      	bne.n	8003a66 <_fstat_r+0x1e>
 8003a5e:	682b      	ldr	r3, [r5, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d000      	beq.n	8003a66 <_fstat_r+0x1e>
 8003a64:	6023      	str	r3, [r4, #0]
 8003a66:	bd70      	pop	{r4, r5, r6, pc}
 8003a68:	200003d4 	.word	0x200003d4

08003a6c <_isatty_r>:
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	b570      	push	{r4, r5, r6, lr}
 8003a70:	4d06      	ldr	r5, [pc, #24]	; (8003a8c <_isatty_r+0x20>)
 8003a72:	0004      	movs	r4, r0
 8003a74:	0008      	movs	r0, r1
 8003a76:	602b      	str	r3, [r5, #0]
 8003a78:	f7fc ffb5 	bl	80009e6 <_isatty>
 8003a7c:	1c43      	adds	r3, r0, #1
 8003a7e:	d103      	bne.n	8003a88 <_isatty_r+0x1c>
 8003a80:	682b      	ldr	r3, [r5, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d000      	beq.n	8003a88 <_isatty_r+0x1c>
 8003a86:	6023      	str	r3, [r4, #0]
 8003a88:	bd70      	pop	{r4, r5, r6, pc}
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	200003d4 	.word	0x200003d4

08003a90 <_sbrk_r>:
 8003a90:	2300      	movs	r3, #0
 8003a92:	b570      	push	{r4, r5, r6, lr}
 8003a94:	4d06      	ldr	r5, [pc, #24]	; (8003ab0 <_sbrk_r+0x20>)
 8003a96:	0004      	movs	r4, r0
 8003a98:	0008      	movs	r0, r1
 8003a9a:	602b      	str	r3, [r5, #0]
 8003a9c:	f7fc ffb8 	bl	8000a10 <_sbrk>
 8003aa0:	1c43      	adds	r3, r0, #1
 8003aa2:	d103      	bne.n	8003aac <_sbrk_r+0x1c>
 8003aa4:	682b      	ldr	r3, [r5, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d000      	beq.n	8003aac <_sbrk_r+0x1c>
 8003aaa:	6023      	str	r3, [r4, #0]
 8003aac:	bd70      	pop	{r4, r5, r6, pc}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	200003d4 	.word	0x200003d4

08003ab4 <memchr>:
 8003ab4:	b2c9      	uxtb	r1, r1
 8003ab6:	1882      	adds	r2, r0, r2
 8003ab8:	4290      	cmp	r0, r2
 8003aba:	d101      	bne.n	8003ac0 <memchr+0xc>
 8003abc:	2000      	movs	r0, #0
 8003abe:	4770      	bx	lr
 8003ac0:	7803      	ldrb	r3, [r0, #0]
 8003ac2:	428b      	cmp	r3, r1
 8003ac4:	d0fb      	beq.n	8003abe <memchr+0xa>
 8003ac6:	3001      	adds	r0, #1
 8003ac8:	e7f6      	b.n	8003ab8 <memchr+0x4>

08003aca <abort>:
 8003aca:	2006      	movs	r0, #6
 8003acc:	b510      	push	{r4, lr}
 8003ace:	f000 f82d 	bl	8003b2c <raise>
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	f7fc ff46 	bl	8000964 <_exit>

08003ad8 <_raise_r>:
 8003ad8:	b570      	push	{r4, r5, r6, lr}
 8003ada:	0004      	movs	r4, r0
 8003adc:	000d      	movs	r5, r1
 8003ade:	291f      	cmp	r1, #31
 8003ae0:	d904      	bls.n	8003aec <_raise_r+0x14>
 8003ae2:	2316      	movs	r3, #22
 8003ae4:	6003      	str	r3, [r0, #0]
 8003ae6:	2001      	movs	r0, #1
 8003ae8:	4240      	negs	r0, r0
 8003aea:	bd70      	pop	{r4, r5, r6, pc}
 8003aec:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d004      	beq.n	8003afc <_raise_r+0x24>
 8003af2:	008a      	lsls	r2, r1, #2
 8003af4:	189b      	adds	r3, r3, r2
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	2a00      	cmp	r2, #0
 8003afa:	d108      	bne.n	8003b0e <_raise_r+0x36>
 8003afc:	0020      	movs	r0, r4
 8003afe:	f000 f831 	bl	8003b64 <_getpid_r>
 8003b02:	002a      	movs	r2, r5
 8003b04:	0001      	movs	r1, r0
 8003b06:	0020      	movs	r0, r4
 8003b08:	f000 f81a 	bl	8003b40 <_kill_r>
 8003b0c:	e7ed      	b.n	8003aea <_raise_r+0x12>
 8003b0e:	2000      	movs	r0, #0
 8003b10:	2a01      	cmp	r2, #1
 8003b12:	d0ea      	beq.n	8003aea <_raise_r+0x12>
 8003b14:	1c51      	adds	r1, r2, #1
 8003b16:	d103      	bne.n	8003b20 <_raise_r+0x48>
 8003b18:	2316      	movs	r3, #22
 8003b1a:	3001      	adds	r0, #1
 8003b1c:	6023      	str	r3, [r4, #0]
 8003b1e:	e7e4      	b.n	8003aea <_raise_r+0x12>
 8003b20:	2400      	movs	r4, #0
 8003b22:	0028      	movs	r0, r5
 8003b24:	601c      	str	r4, [r3, #0]
 8003b26:	4790      	blx	r2
 8003b28:	0020      	movs	r0, r4
 8003b2a:	e7de      	b.n	8003aea <_raise_r+0x12>

08003b2c <raise>:
 8003b2c:	b510      	push	{r4, lr}
 8003b2e:	4b03      	ldr	r3, [pc, #12]	; (8003b3c <raise+0x10>)
 8003b30:	0001      	movs	r1, r0
 8003b32:	6818      	ldr	r0, [r3, #0]
 8003b34:	f7ff ffd0 	bl	8003ad8 <_raise_r>
 8003b38:	bd10      	pop	{r4, pc}
 8003b3a:	46c0      	nop			; (mov r8, r8)
 8003b3c:	20000064 	.word	0x20000064

08003b40 <_kill_r>:
 8003b40:	2300      	movs	r3, #0
 8003b42:	b570      	push	{r4, r5, r6, lr}
 8003b44:	4d06      	ldr	r5, [pc, #24]	; (8003b60 <_kill_r+0x20>)
 8003b46:	0004      	movs	r4, r0
 8003b48:	0008      	movs	r0, r1
 8003b4a:	0011      	movs	r1, r2
 8003b4c:	602b      	str	r3, [r5, #0]
 8003b4e:	f7fc fef9 	bl	8000944 <_kill>
 8003b52:	1c43      	adds	r3, r0, #1
 8003b54:	d103      	bne.n	8003b5e <_kill_r+0x1e>
 8003b56:	682b      	ldr	r3, [r5, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d000      	beq.n	8003b5e <_kill_r+0x1e>
 8003b5c:	6023      	str	r3, [r4, #0]
 8003b5e:	bd70      	pop	{r4, r5, r6, pc}
 8003b60:	200003d4 	.word	0x200003d4

08003b64 <_getpid_r>:
 8003b64:	b510      	push	{r4, lr}
 8003b66:	f7fc fee7 	bl	8000938 <_getpid>
 8003b6a:	bd10      	pop	{r4, pc}

08003b6c <_init>:
 8003b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b72:	bc08      	pop	{r3}
 8003b74:	469e      	mov	lr, r3
 8003b76:	4770      	bx	lr

08003b78 <_fini>:
 8003b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b7e:	bc08      	pop	{r3}
 8003b80:	469e      	mov	lr, r3
 8003b82:	4770      	bx	lr
